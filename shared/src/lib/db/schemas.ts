// Generated by ts-to-zod
import { z } from "zod"
import type { Json } from "./types"

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
)

export const cardContentsRowSchema = z.object({
  back: z.string().nullable(),
  created_at: z.string(),
  front: z.string().nullable(),
  id: z.number(),
  is_accepted: z.boolean(),
  is_rejected: z.boolean(),
  note_id: z.number().nullable(),
})

export const cardContentsInsertSchema = z.object({
  back: z.string().optional().nullable(),
  created_at: z.string().optional(),
  front: z.string().optional().nullable(),
  id: z.number().optional(),
  is_accepted: z.boolean().optional(),
  is_rejected: z.boolean().optional(),
  note_id: z.number().optional().nullable(),
})

export const cardContentsUpdateSchema = z.object({
  back: z.string().optional().nullable(),
  created_at: z.string().optional(),
  front: z.string().optional().nullable(),
  id: z.number().optional(),
  is_accepted: z.boolean().optional(),
  is_rejected: z.boolean().optional(),
  note_id: z.number().optional().nullable(),
})

export const cardsRowSchema = z.object({
  card_content_id: z.number(),
  created_at: z.string(),
  difficulty: z.number(),
  due: z.string(),
  elapsed_days: z.number(),
  id: z.number(),
  lapses: z.number(),
  last_review: z.string(),
  reps: z.number(),
  scheduled_days: z.number(),
  stability: z.number(),
  state: z.number(),
  user_id: z.string(),
})

export const cardsInsertSchema = z.object({
  card_content_id: z.number(),
  created_at: z.string().optional(),
  difficulty: z.number(),
  due: z.string(),
  elapsed_days: z.number(),
  id: z.number().optional(),
  lapses: z.number(),
  last_review: z.string(),
  reps: z.number(),
  scheduled_days: z.number(),
  stability: z.number(),
  state: z.number(),
  user_id: z.string().optional(),
})

export const cardsUpdateSchema = z.object({
  card_content_id: z.number().optional(),
  created_at: z.string().optional(),
  difficulty: z.number().optional(),
  due: z.string().optional(),
  elapsed_days: z.number().optional(),
  id: z.number().optional(),
  lapses: z.number().optional(),
  last_review: z.string().optional(),
  reps: z.number().optional(),
  scheduled_days: z.number().optional(),
  stability: z.number().optional(),
  state: z.number().optional(),
  user_id: z.string().optional(),
})

export const countriesRowSchema = z.object({
  id: z.number(),
  name: z.string(),
})

export const countriesInsertSchema = z.object({
  id: z.number().optional(),
  name: z.string(),
})

export const countriesUpdateSchema = z.object({
  id: z.number().optional(),
  name: z.string().optional(),
})

export const notesRowSchema = z.object({
  context: z.string().nullable(),
  context_html: z.string().nullable(),
  created_at: z.string(),
  highlights: z.array(z.string()),
  id: z.number(),
  predicted_topic: z.string().nullable(),
  quote: z.string(),
  serialized_highlight: z.string().nullable(),
  snippet_uuid: z.string().nullable(),
  source_id: z.number(),
  tags: z.array(z.string()),
  user_id: z.string(),
  user_note: z.string().nullable(),
})

export const notesInsertSchema = z.object({
  context: z.string().optional().nullable(),
  context_html: z.string().optional().nullable(),
  created_at: z.string().optional(),
  highlights: z.array(z.string()),
  id: z.number().optional(),
  predicted_topic: z.string().optional().nullable(),
  quote: z.string(),
  serialized_highlight: z.string().optional().nullable(),
  snippet_uuid: z.string().optional().nullable(),
  source_id: z.number(),
  tags: z.array(z.string()).optional(),
  user_id: z.string().optional(),
  user_note: z.string().optional().nullable(),
})

export const notesUpdateSchema = z.object({
  context: z.string().optional().nullable(),
  context_html: z.string().optional().nullable(),
  created_at: z.string().optional(),
  highlights: z.array(z.string()).optional(),
  id: z.number().optional(),
  predicted_topic: z.string().optional().nullable(),
  quote: z.string().optional(),
  serialized_highlight: z.string().optional().nullable(),
  snippet_uuid: z.string().optional().nullable(),
  source_id: z.number().optional(),
  tags: z.array(z.string()).optional(),
  user_id: z.string().optional(),
  user_note: z.string().optional().nullable(),
})

export const profilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  full_name: z.string().nullable(),
  id: z.string(),
  updated_at: z.string().nullable(),
  username: z.string().nullable(),
  website: z.string().nullable(),
})

export const profilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
})

export const profilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  username: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
})

export const sourcesRowSchema = z.object({
  created_at: z.string(),
  DOI: z.string().nullable(),
  domain: z.string().nullable(),
  id: z.number(),
  title: z.string().nullable(),
  url: z.string().nullable(),
})

export const sourcesInsertSchema = z.object({
  created_at: z.string().optional(),
  DOI: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  id: z.number().optional(),
  title: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
})

export const sourcesUpdateSchema = z.object({
  created_at: z.string().optional(),
  DOI: z.string().optional().nullable(),
  domain: z.string().optional().nullable(),
  id: z.number().optional(),
  title: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
})

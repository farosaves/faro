From: <Saved by Blink>
Snapshot-Content-Location: https://kit.svelte.dev/docs/load#parallel-loading
Subject: =?utf-8?Q?Loading=20data=20=E2=80=A2=20Docs=20=E2=80=A2=20SvelteKit?=
Date: Mon, 8 Apr 2024 09:04:09 +0200
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----"


------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/html
Content-ID: <frame-DFFFCF9E5DF7B2EA5735D0D920BE9490@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/docs/load#parallel-loading

<!DOCTYPE html><html lang=3D"en" class=3D"" style=3D"--sk-banner-bottom-hei=
ght: 0px;"><head><meta http-equiv=3D"Content-Type" content=3D"text/html; ch=
arset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-5=
8f29a70-0913-43d9-bda7-5df74a6ed710@mhtml.blink" />
	=09
		<meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D=
1">
		<meta name=3D"theme-color" content=3D"#ff3e00">
		<meta name=3D"color-scheme" content=3D"dark light">

		<link rel=3D"manifest" href=3D"https://kit.svelte.dev/manifest.json">
		<link rel=3D"icon" type=3D"image/png" href=3D"https://kit.svelte.dev/favi=
con.png">

		<meta name=3D"twitter:card" content=3D"summary">
		<meta name=3D"twitter:site" content=3D"@sveltejs">
		<meta name=3D"twitter:creator" content=3D"@sveltejs">
		<meta name=3D"twitter:image" content=3D"https://kit.svelte.dev/images/twi=
tter-thumbnail.jpg">
		<meta name=3D"og:image" content=3D"https://kit.svelte.dev/images/twitter-=
thumbnail.jpg">

		<link rel=3D"search" type=3D"application/opensearchdescription+xml" href=
=3D"https://kit.svelte.dev/opensearch.xml" title=3D"SvelteKit">

		<!-- add inline style and blocking script to prevent content flash/jump -=
->
	=09
	=09

	=09
		<link href=3D"https://kit.svelte.dev/_app/immutable/assets/0.rZS1kFg9.css=
" rel=3D"stylesheet">
		<link href=3D"https://kit.svelte.dev/_app/immutable/assets/ThemeToggle.vU=
NFaod-.css" rel=3D"stylesheet">
		<link href=3D"https://kit.svelte.dev/_app/immutable/assets/theme.6RVyi6nR=
.css" rel=3D"stylesheet">
		<link href=3D"https://kit.svelte.dev/_app/immutable/assets/root-scroll.3-=
7Nlnhx.css" rel=3D"stylesheet">
		<link href=3D"https://kit.svelte.dev/_app/immutable/assets/flexsearch.bun=
dle.module.kDjERGTi.css" rel=3D"stylesheet">
		<link href=3D"https://kit.svelte.dev/_app/immutable/assets/2._rkDlgd7.css=
" rel=3D"stylesheet">
		<link href=3D"https://kit.svelte.dev/_app/immutable/assets/Tooltip.pgXQ42=
ag.css" rel=3D"stylesheet">
		<link href=3D"https://kit.svelte.dev/_app/immutable/assets/5.MhVYpst-.css=
" rel=3D"stylesheet">
		<link rel=3D"preload" as=3D"font" type=3D"font/woff2" href=3D"https://kit=
.svelte.dev/_app/immutable/assets/overpass-latin-300.ldBGjluk.woff2" crosso=
rigin=3D"">
		<link rel=3D"preload" as=3D"font" type=3D"font/woff2" href=3D"https://kit=
.svelte.dev/_app/immutable/assets/overpass-latin-600.K39Izyhw.woff2" crosso=
rigin=3D"">
		<link rel=3D"preload" as=3D"font" type=3D"font/woff2" href=3D"https://kit=
.svelte.dev/_app/immutable/assets/fira-mono-latin-400.U_SXdLRM.woff2" cross=
origin=3D"">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/entry/start.kcjERL21.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/entry.5qLL7v8p.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/scheduler.6bCsyflz.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/control.pJ1mnnAb.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/entry/app.tMaFfEYH.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/index.0hharxhn.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/nodes/0.8_P4mwZD.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/stores.vAkInWbA.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/theme.0hFiD2Pe.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/focus-outside.coXij7FT.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/root-scroll.sXY6SLLS.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/chunks/flexsearch.bundle.module.min.TwIGl8w_.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/nodes/2.9YpvRIc3.js">
		<link rel=3D"modulepreload" href=3D"https://kit.svelte.dev/_app/immutable=
/nodes/5.ewizKfRc.js"><title>Loading data =E2=80=A2 Docs =E2=80=A2 SvelteKi=
t</title><meta name=3D"twitter:title" content=3D"SvelteKit docs"><meta name=
=3D"twitter:description" content=3D"Loading data =E2=80=A2 SvelteKit docume=
ntation"><meta name=3D"Description" content=3D"Loading data =E2=80=A2 Svelt=
eKit documentation">
	<link rel=3D"modulepreload" as=3D"script" crossorigin=3D"" href=3D"https:/=
/kit.svelte.dev/_app/immutable/nodes/1.U3kMppdF.js"><link rel=3D"stylesheet=
" href=3D"https://kit.svelte.dev/_app/immutable/assets/1.bpchmm27.css"></he=
ad>
	<body class=3D"dark" cz-shortcut-listen=3D"true">
	=09

		<div style=3D"height: 100%"><div style=3D"display: contents;"><div style=
=3D"display: none" data-svelte-h=3D"svelte-qvvwta"> <svg><symbol id=3D"arro=
w-left" class=3D"icon" viewBox=3D"0 0 24 24"><line x1=3D"19" y1=3D"12" x2=
=3D"5" y2=3D"12"></line><polyline points=3D"12 19 5 12 12 5"></polyline></s=
ymbol><symbol id=3D"arrow-right" class=3D"icon" viewBox=3D"0 0 24 24"><line=
 x1=3D"5" y1=3D"12" x2=3D"19" y2=3D"12"></line><polyline points=3D"12 5 19 =
12 12 19"></polyline></symbol><symbol id=3D"arrow-right-chevron" viewBox=3D=
"0 0 24 24"><path fill=3D"currentColor" d=3D"M8.7 17.3q-.275-.275-.275-.7t.=
275-.7l3.9-3.9l-3.9-3.9q-.275-.275-.275-.7t.275-.7q.275-.275.7-.275t.7.275l=
4.6 4.6q.15.15.213.325t.062.375q0 .2-.063.375t-.212.325l-4.6 4.6q-.275.275-=
.7.275t-.7-.275Z"></path></symbol><symbol id=3D"arrow-up" class=3D"icon" vi=
ewBox=3D"0 0 24 24"><line x1=3D"12" y1=3D"19" x2=3D"12" y2=3D"5"></line><po=
lyline points=3D"5 12 12 5 19 12"></polyline></symbol><symbol id=3D"arrow-d=
own" class=3D"icon" viewBox=3D"0 0 24 24"><line x1=3D"12" y1=3D"5" x2=3D"12=
" y2=3D"19"></line><polyline points=3D"19 12 12 19 5 12"></polyline></symbo=
l><symbol id=3D"check" class=3D"icon" viewBox=3D"0 0 24 24"><polyline point=
s=3D"20 6 9 17 4 12"></polyline></symbol><symbol id=3D"close" class=3D"icon=
" viewBox=3D"0 0 24 24"><line x1=3D"18" y1=3D"6" x2=3D"6" y2=3D"18"></line>=
<line x1=3D"6" y1=3D"6" x2=3D"18" y2=3D"18"></line></symbol><symbol id=3D"d=
ownload" class=3D"icon" viewBox=3D"0 0 24 24"><path d=3D"M21 15V19A2 2 0 0 =
1 19 21H5A2 2 0 0 1 3 19V15"></path><polyline points=3D"7 10 12 15 17 10"><=
/polyline><line x1=3D"12" y1=3D"15" x2=3D"12" y2=3D"3"></line></symbol><sym=
bol id=3D"edit" class=3D"icon" viewBox=3D"0 0 24 24"><path d=3D"M20 14.66V2=
0a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h5.34"></path><polygon point=
s=3D"18 2 22 6 12 16 8 16 8 12 18 2"></polygon></symbol><symbol viewBox=3D"=
0 0 24 24" id=3D"github" stroke-width=3D"0"><path fill=3D"currentColor" d=
=3D"M12 0a12 12 0 1 0 0 24a12 12 0 0 0 0-24zm3.163 21.783h-.093a.513.513 0 =
0 1-.382-.14a.513.513 0 0 1-.14-.372v-1.406c.006-.467.01-.94.01-1.416a3.693=
 3.693 0 0 0-.151-1.028a1.832 1.832 0 0 0-.542-.875a8.014 8.014 0 0 0 2.038=
-.471a4.051 4.051 0 0 0 1.466-.964c.407-.427.71-.943.885-1.506a6.77 6.77 0 =
0 0 .3-2.13a4.138 4.138 0 0 0-.26-1.476a3.892 3.892 0 0 0-.795-1.284a2.81 2=
.81 0 0 0 .162-.582c.033-.2.05-.402.05-.604c0-.26-.03-.52-.09-.773a5.309 5.=
309 0 0 0-.221-.763a.293.293 0 0 0-.111-.02h-.11c-.23.002-.456.04-.674.111a=
5.34 5.34 0 0 0-.703.26a6.503 6.503 0 0 0-.661.343c-.215.127-.405.249-.573.=
362a9.578 9.578 0 0 0-5.143 0a13.507 13.507 0 0 0-.572-.362a6.022 6.022 0 0=
 0-.672-.342a4.516 4.516 0 0 0-.705-.261a2.203 2.203 0 0 0-.662-.111h-.11a.=
29.29 0 0 0-.11.02a5.844 5.844 0 0 0-.23.763c-.054.254-.08.513-.081.773c0 .=
202.017.404.051.604c.033.199.086.394.16.582A3.888 3.888 0 0 0 5.702 10a4.14=
2 4.142 0 0 0-.263 1.476a6.871 6.871 0 0 0 .292 2.12c.181.563.483 1.08.884 =
1.516c.415.422.915.75 1.466.964c.653.25 1.337.41 2.033.476a1.828 1.828 0 0 =
0-.452.633a2.99 2.99 0 0 0-.2.744a2.754 2.754 0 0 1-1.175.27a1.788 1.788 0 =
0 1-1.065-.3a2.904 2.904 0 0 1-.752-.824a3.1 3.1 0 0 0-.292-.382a2.693 2.69=
3 0 0 0-.372-.343a1.841 1.841 0 0 0-.432-.24a1.2 1.2 0 0 0-.481-.101c-.04.0=
01-.08.005-.12.01a.649.649 0 0 0-.162.02a.408.408 0 0 0-.13.06a.116.116 0 0=
 0-.06.1a.33.33 0 0 0 .14.242c.093.074.17.131.232.171l.03.021c.133.103.261.=
214.382.333c.112.098.213.209.3.33c.09.119.168.246.231.381c.073.134.15.288.2=
31.463c.188.474.522.875.954 1.145c.453.243.961.364 1.476.351c.174 0 .349-.0=
1.522-.03c.172-.028.343-.057.515-.091v1.743a.5.5 0 0 1-.533.521h-.062a10.28=
6 10.286 0 1 1 6.324 0v.005z"></path></symbol><symbol viewBox=3D"0 0 24 24"=
 id=3D"discord" stroke-width=3D"0"><path fill=3D"currentColor" d=3D"M19.27 =
5.33C17.94 4.71 16.5 4.26 15 4a.09.09 0 0 0-.07.03c-.18.33-.39.76-.53 1.09a=
16.09 16.09 0 0 0-4.8 0c-.14-.34-.35-.76-.54-1.09c-.01-.02-.04-.03-.07-.03c=
-1.5.26-2.93.71-4.27 1.33c-.01 0-.02.01-.03.02c-2.72 4.07-3.47 8.03-3.1 11.=
95c0 .02.01.04.03.05c1.8 1.32 3.53 2.12 5.24 2.65c.03.01.06 0 .07-.02c.4-.5=
5.76-1.13 1.07-1.74c.02-.04 0-.08-.04-.09c-.57-.22-1.11-.48-1.64-.78c-.04-.=
02-.04-.08-.01-.11c.11-.08.22-.17.33-.25c.02-.02.05-.02.07-.01c3.44 1.57 7.=
15 1.57 10.55 0c.02-.01.05-.01.07.01c.11.09.22.17.33.26c.04.03.04.09-.01.11=
c-.52.31-1.07.56-1.64.78c-.04.01-.05.06-.04.09c.32.61.68 1.19 1.07 1.74c.03=
.01.06.02.09.01c1.72-.53 3.45-1.33 5.25-2.65c.02-.01.03-.03.03-.05c.44-4.53=
-.73-8.46-3.1-11.95c-.01-.01-.02-.02-.04-.02zM8.52 14.91c-1.03 0-1.89-.95-1=
.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89 2.12c0 1.17-.84 2.12-1.89 2.=
12zm6.97 0c-1.03 0-1.89-.95-1.89-2.12s.84-2.12 1.89-2.12c1.06 0 1.9.96 1.89=
 2.12c0 1.17-.83 2.12-1.89 2.12z"></path></symbol><symbol id=3D"git-branch"=
 class=3D"icon" viewBox=3D"0 0 24 24"><line x1=3D"6" y1=3D"3" x2=3D"6" y2=
=3D"15"></line><circle cx=3D"18" cy=3D"6" r=3D"3"></circle><circle cx=3D"6"=
 cy=3D"18" r=3D"3"></circle><path d=3D"M18 9a9 9 0 0 1-9 9"></path></symbol=
><symbol id=3D"log-in" class=3D"icon" viewBox=3D"0 0 24 24"><path d=3D"M15 =
3H19A2 2 0 0 1 21 5V19A2 2 0 0 1 19 21H15"></path><polyline points=3D"10 17=
 15 12 10 7"></polyline><line x1=3D"15" y1=3D"12" x2=3D"3" y2=3D"12"></line=
></symbol><symbol id=3D"maximize" class=3D"icon" viewBox=3D"0 0 24 24"><pat=
h d=3D"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v=
-3M3 16v3a2 2 0 0 0 2 2h3"></path></symbol><symbol id=3D"maximize-2" class=
=3D"icon" viewBox=3D"0 0 24 24"><polyline points=3D"15 3 21 3 21 9"></polyl=
ine><polyline points=3D"9 21 3 21 3 15"></polyline><line x1=3D"21" y1=3D"3"=
 x2=3D"14" y2=3D"10"></line><line x1=3D"3" y1=3D"21" x2=3D"10" y2=3D"14"></=
line></symbol><symbol id=3D"menu" viewBox=3D"0 0 48 48"><path fill=3D"none"=
 stroke=3D"currentColor" stroke-linecap=3D"round" stroke-linejoin=3D"round"=
 stroke-width=3D"4" d=3D"M7.95 11.95h32m-32 12h32m-32 12h32"></path></symbo=
l><symbol id=3D"message-square" class=3D"icon" viewBox=3D"0 0 24 24"><g tra=
nsform=3D"translate(0, 1)"><path d=3D"M16.5 19H11V15H18V11H22V19H19.5L18 20=
.5L16.5 19Z" stroke=3D"currentColor" stroke-width=3D"1.5" stroke-linecap=3D=
"round" stroke-linejoin=3D"round"></path><path d=3D"M2 3H18V15H8.5L6.5 17L4=
.5 15H2V3 M5 10L5 12L10 12L10 10  M5 6L5 9L13 9L13 6Z" fill=3D"currentColor=
" stroke=3D"currentColor" stroke-width=3D"1.5" stroke-linecap=3D"round" str=
oke-linejoin=3D"round"></path></g></symbol><symbol id=3D"minus" class=3D"ic=
on" viewBox=3D"0 0 24 24"><line x1=3D"5" y1=3D"12" x2=3D"19" y2=3D"12"></li=
ne></symbol><symbol id=3D"plus" class=3D"icon" viewBox=3D"0 0 24 24"><line =
x1=3D"12" y1=3D"5" x2=3D"12" y2=3D"19"></line><line x1=3D"5" y1=3D"12" x2=
=3D"19" y2=3D"12"></line></symbol><symbol id=3D"save" class=3D"icon" viewBo=
x=3D"0 0 24 24"><path d=3D"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11=
a2 2 0 0 1-2 2z"></path><polyline points=3D"17 21 17 13 7 13 7 21"></polyli=
ne><polyline points=3D"7 3 7 8 15 8"></polyline></symbol><symbol id=3D"link=
" class=3D"icon" viewBox=3D"0 0 24 24"><path d=3D"M9,7L6,7A2 2 0 0 0 6,17L9=
,17"></path><path d=3D"M15,7L18,7A2 2 0 0 1 18,17L15,17"></path><path d=3D"=
M7,12L17,12"></path></symbol><symbol viewBox=3D"0 0 24 24" id=3D"external-l=
ink"><path fill=3D"currentColor" stroke-width=3D"0" d=3D"m16 8.4l-8.875 8.9=
q-.3.3-.713.3t-.712-.3q-.3-.3-.3-.713t.3-.712L14.6 7H7q-.425 0-.713-.288T6 =
6q0-.425.288-.713T7 5h10q.425 0 .713.288T18 6v10q0 .425-.288.713T17 17q-.42=
5 0-.713-.288T16 16V8.4Z"></path></symbol><symbol id=3D"chevron" class=3D"i=
con" viewBox=3D"0 0 24 24"><path d=3D"M2,7 L12,17 L20,7"></path></symbol><s=
ymbol id=3D"chevron-up" class=3D"icon" viewBox=3D"0 0 24 24"><polyline poin=
ts=3D"18 15 12 9 6 15"></polyline></symbol><symbol id=3D"chevron-down" clas=
s=3D"icon" viewBox=3D"0 0 24 24"><polyline points=3D"6 9 12 15 18 9"></poly=
line></symbol><symbol id=3D"delete" class=3D"icon" viewBox=3D"0 0 24 24"><p=
ath fill=3D"currentColor" stroke=3D"none" d=3D"M22 4.2h-5.6L15 1.6c-.1-.2-.=
4-.4-.7-.4H9.6c-.2 0-.5.2-.6.4L7.6 4.2H2c-.4 0-.8.4-.8.8s.4.8.8.8h1.8V22c0 =
.4.3.8.8.8h15c.4 0 .8-.3.8-.8V5.8H22c.4 0 .8-.3.8-.8s-.4-.8-.8-.8zM10.8 16.=
5c0 .4-.3.8-.8.8s-.8-.3-.8-.8V10c0-.4.3-.8.8-.8s.8.3.8.8v6.5zm4 0c0 .4-.3.8=
-.8.8s-.8-.3-.8-.8V10c0-.4.3-.8.8-.8s.8.3.8.8v6.5z"></path></symbol><symbol=
 id=3D"home" viewBox=3D"0 0 256 256"><path fill=3D"currentColor" d=3D"m221.=
56 100.85l-79.95-75.47l-.16-.15a19.93 19.93 0 0 0-26.91 0l-.17.15l-79.93 75=
.47a20.07 20.07 0 0 0-6.44 14.7V208a20 20 0 0 0 20 20h48a20 20 0 0 0 20-20v=
-44h24v44a20 20 0 0 0 20 20h48a20 20 0 0 0 20-20v-92.45a20.07 20.07 0 0 0-6=
.44-14.7ZM204 204h-40v-44a20 20 0 0 0-20-20h-32a20 20 0 0 0-20 20v44H52v-86=
.72l76-71.75l76 71.75Z"></path></symbol><symbol id=3D"search" viewBox=3D"0 =
0 24 24"><path stroke-width=3D"0.2" fill=3D"currentColor" d=3D"m18.9 20.3l-=
5.6-5.6q-.75.6-1.725.95T9.5 16q-2.725 0-4.612-1.888T3 9.5q0-2.725 1.888-4.6=
12T9.5 3q2.725 0 4.612 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l5.625 5.625q.=
275.275.275.675t-.3.7q-.275.275-.7.275t-.7-.275ZM9.5 14q1.875 0 3.188-1.313=
T14 9.5q0-1.875-1.313-3.188T9.5 5Q7.625 5 6.312 6.313T5 9.5q0 1.875 1.313 3=
.188T9.5 14Z"></path></symbol><symbol id=3D"docs" viewBox=3D"0 0 16 16"><pa=
th fill=3D"currentColor" d=3D"M1 3.25C1 2.56 1.56 2 2.249 2h.5c.69 0 1.248.=
56 1.248 1.25v9.495c0 .69-.559 1.25-1.248 1.25h-.5A1.25 1.25 0 0 1 1 12.744=
V3.249ZM2.249 3a.25.25 0 0 0-.25.25v9.495c0 .138.112.25.25.25h.5a.25.25 0 0=
 0 .25-.25V3.249a.25.25 0 0 0-.25-.25h-.5Zm2.748.25c0-.69.559-1.25 1.249-1.=
25h.5c.689 0 1.248.56 1.248 1.25v9.495c0 .69-.56 1.25-1.249 1.25h-.5a1.25 1=
.25 0 0 1-1.248-1.25V3.249ZM6.246 3a.25.25 0 0 0-.25.25v9.495c0 .138.112.25=
.25.25h.5a.25.25 0 0 0 .249-.25V3.249a.25.25 0 0 0-.25-.25h-.5Zm5.726 1.777=
a1.249 1.249 0 0 0-1.57-.713l-.583.204a1.25 1.25 0 0 0-.746 1.645l2.937 7.3=
04c.249.62.94.933 1.571.713l.582-.204a1.25 1.25 0 0 0 .746-1.646l-2.937-7.3=
03Zm-1.24.23a.25.25 0 0 1 .313.143l2.937 7.303a.25.25 0 0 1-.149.33l-.582.2=
03a.25.25 0 0 1-.314-.142L10 5.54a.25.25 0 0 1 .149-.329l.582-.204Z"></path=
></symbol><symbol id=3D"contents" viewBox=3D"0 0 256 256" stroke-width=3D"0=
"><path fill=3D"currentColor" d=3D"M224 44h-64a43.86 43.86 0 0 0-32 13.85A4=
3.86 43.86 0 0 0 96 44H32a20 20 0 0 0-20 20v128a20 20 0 0 0 20 20h64a20 20 =
0 0 1 20 20a12 12 0 0 0 24 0a20 20 0 0 1 20-20h64a20 20 0 0 0 20-20V64a20 2=
0 0 0 0-20-20ZM96 188H36V68h60a20 20 0 0 1 20 20v104.81A43.79 43.79 0 0 0 9=
6 188Zm124 0h-60a43.71 43.71 0 0 0-20 4.83V88a20 20 0 0 1 20-20h60Z"></path=
></symbol><symbol viewBox=3D"0 0 24 24" id=3D"copy-to-clipboard-empty"><pat=
h fill=3D"currentColor" d=3D"M5 22q-.825 0-1.413-.588T3 20V6h2v14h11v2H5Zm4=
-4q-.825 0-1.413-.588T7 16V4q0-.825.588-1.413T9 2h9q.825 0 1.413.588T20 4v1=
2q0 .825-.588 1.413T18 18H9Zm0-2h9V4H9v12Zm0 0V4v12Z"></path></symbol><symb=
ol viewBox=3D"0 0 24 24" id=3D"copy-to-clipboard-filled"><path fill=3D"curr=
entColor" d=3D"M5 22q-.825 0-1.413-.588T3 20V6h2v14h11v2H5Zm4-4q-.825 0-1.4=
13-.588T7 16V4q0-.825.588-1.413T9 2h9q.825 0 1.413.588T20 4v12q0 .825-.588 =
1.413T18 18H9Z"></path></symbol></svg></div>  <a href=3D"https://kit.svelte=
.dev/docs/load#main" class=3D"svelte-1rscj97">Skip to main content</a> <nav=
 aria-label=3D"Primary" class=3D"svelte-1wcjdtw dark"><a class=3D"home-link=
 svelte-1wcjdtw" href=3D"https://kit.svelte.dev/" title=3D"Homepage"><span =
class=3D"home-large svelte-1wcjdtw"><strong data-svelte-h=3D"svelte-1to94iu=
">kit</strong>.svelte.dev</span> <span class=3D"home-small svelte-1wcjdtw">=
<strong data-svelte-h=3D"svelte-1to94iu">kit</strong></span></a> <div class=
=3D"current-section mobile svelte-1wcjdtw">=EF=BD=9C Docs</div> <div class=
=3D"desktop svelte-1wcjdtw"><div class=3D"center-area svelte-1wcjdtw"><form=
 class=3D"search-container svelte-15l0yne" action=3D"https://kit.svelte.dev=
/search"><input type=3D"search" name=3D"q" placeholder=3D"Search" aria-labe=
l=3D"Search" spellcheck=3D"false" class=3D"svelte-15l0yne"> <div class=3D"s=
hortcut svelte-15l0yne"><kbd class=3D"svelte-15l0yne">=E2=8C=98</kbd> <kbd =
class=3D"svelte-15l0yne">K</kbd></div></form></div> <div class=3D"menu svel=
te-1wcjdtw"><a href=3D"https://kit.svelte.dev/docs/introduction" aria-curre=
nt=3D"page">Docs</a> <hr class=3D"svelte-hbkmlj"> <a href=3D"https://learn.=
svelte.dev/tutorial/introducing-sveltekit" rel=3D"external" data-svelte-h=
=3D"svelte-15y8ruk">Tutorial</a> <a href=3D"https://svelte.dev/" data-svelt=
e-h=3D"svelte-yry8a6">Svelte</a> <hr class=3D"svelte-hbkmlj"> <a href=3D"ht=
tps://svelte.dev/chat" rel=3D"external" title=3D"Discord Chat"><span class=
=3D"small svelte-egrlut" data-svelte-h=3D"svelte-byakra">Discord</span> <sp=
an class=3D"large svelte-egrlut"><svg class=3D"icon svelte-5yec89" width=3D=
"20" height=3D"20"><use xlink:href=3D"#discord"></use></svg></span></a> <a =
href=3D"https://github.com/sveltejs/kit" title=3D"GitHub Repo"><span class=
=3D"small svelte-egrlut" data-svelte-h=3D"svelte-1o8f6s1">GitHub</span> <sp=
an class=3D"large svelte-egrlut"><svg class=3D"icon svelte-5yec89" width=3D=
"20" height=3D"20"><use xlink:href=3D"#github"></use></svg></span></a> <div=
 class=3D"appearance svelte-1wcjdtw"><span class=3D"caption svelte-1wcjdtw"=
>Theme</span> <button type=3D"button" aria-pressed=3D"true" aria-label=3D"D=
ark mode" class=3D"svelte-1b9q9nc"><span class=3D"check svelte-1b9q9nc chec=
ked"><span class=3D"icon svelte-1b9q9nc"><svg xmlns=3D"http://www.w3.org/20=
00/svg" width=3D"32" height=3D"32" viewBox=3D"0 0 24 24"><path fill=3D"curr=
entColor" d=3D"M12 21q-3.775 0-6.388-2.613T3 12q0-3.45 2.25-5.988T11 3.05q.=
625-.075.975.45t-.025 1.1q-.425.65-.638 1.375T11.1 7.5q0 2.25 1.575 3.825T1=
6.5 12.9q.775 0 1.538-.225t1.362-.625q.525-.35 1.075-.037t.475.987q-.35 3.4=
5-2.937 5.725T12 21Zm0-2q2.2 0 3.95-1.213t2.55-3.162q-.5.125-1 .2t-1 .075q-=
3.075 0-5.238-2.163T9.1 7.5q0-.5.075-1t.2-1q-1.95.8-3.163 2.55T5 12q0 2.9 2=
.05 4.95T12 19Zm-.25-6.75Z"></path></svg></span></span></button></div></div=
></div> <div class=3D"mobile mobile-menu svelte-1wcjdtw"><button aria-label=
=3D"Search" class=3D"search svelte-1wcjdtw"><svg class=3D"icon svelte-5yec8=
9" width=3D".6em" height=3D".6em"><use xlink:href=3D"#search"></use></svg><=
/button> <div style=3D"display: contents"><button aria-label=3D"Toggle menu=
" aria-expanded=3D"false" class=3D"menu-toggle svelte-1ih0snl"><svg class=
=3D"icon svelte-5yec89" width=3D"1em" height=3D"1em"><use xlink:href=3D"#me=
nu"></use></svg></button> </div></div></nav> <div class=3D"modal-overlay sv=
elte-1sui5a8" aria-hidden=3D"true"></div> <main id=3D"main" class=3D"svelte=
-1sui5a8"><div class=3D"container svelte-p2d7pa"><div class=3D"page svelte-=
p2d7pa"><p class=3D"category svelte-p2d7pa">Core concepts</p>  <div class=
=3D"text content svelte-zelrq3"><h1>Loading data</h1> <a class=3D"edit svel=
te-zelrq3" href=3D"https://github.com/sveltejs/kit/edit/main/documentation/=
docs/20-core-concepts/20-load.md"><svg class=3D"icon svelte-5yec89" width=
=3D"50" height=3D"50"><use xlink:href=3D"#edit"></use></svg> Edit this page=
 on GitHub</a> <aside class=3D"on-this-page svelte-1wvrrw dark" style=3D"z-=
index: 2;"><h2 class=3D"svelte-1wvrrw"><button class=3D"heading svelte-1wvr=
rw" aria-expanded=3D"false"><span class=3D"h2 svelte-1wvrrw">On this page</=
span> <span class=3D"expand-icon svelte-1wvrrw"><svg class=3D"icon svelte-5=
yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#chevron-down"></use><=
/svg></span></button> <span class=3D"h2 desktop-only-heading svelte-1wvrrw"=
>On this page</span></h2> <nav aria-label=3D"On this page" class=3D"svelte-=
1wvrrw"><ul class=3D"svelte-1wvrrw"><li class=3D"svelte-1wvrrw"><a href=3D"=
https://kit.svelte.dev/docs/load" aria-current=3D"false" class=3D"svelte-1w=
vrrw">Loading data</a></li> <li class=3D"svelte-1wvrrw"><a href=3D"https://=
kit.svelte.dev/docs/load#page-data" aria-current=3D"false" class=3D"svelte-=
1wvrrw">Page data</a> </li><li class=3D"svelte-1wvrrw"><a href=3D"https://k=
it.svelte.dev/docs/load#layout-data" aria-current=3D"false" class=3D"svelte=
-1wvrrw">Layout data</a> </li><li class=3D"svelte-1wvrrw"><a href=3D"https:=
//kit.svelte.dev/docs/load#$page-data" aria-current=3D"false" class=3D"svel=
te-1wvrrw">$page.data</a> </li><li class=3D"svelte-1wvrrw"><a href=3D"https=
://kit.svelte.dev/docs/load#universal-vs-server" aria-current=3D"false" cla=
ss=3D"svelte-1wvrrw">Universal vs server</a> </li><li class=3D"svelte-1wvrr=
w"><a href=3D"https://kit.svelte.dev/docs/load#using-url-data" aria-current=
=3D"false" class=3D"svelte-1wvrrw">Using URL data</a> </li><li class=3D"sve=
lte-1wvrrw"><a href=3D"https://kit.svelte.dev/docs/load#making-fetch-reques=
ts" aria-current=3D"false" class=3D"svelte-1wvrrw">Making fetch requests</a=
> </li><li class=3D"svelte-1wvrrw"><a href=3D"https://kit.svelte.dev/docs/l=
oad#cookies" aria-current=3D"false" class=3D"svelte-1wvrrw">Cookies</a> </l=
i><li class=3D"svelte-1wvrrw"><a href=3D"https://kit.svelte.dev/docs/load#h=
eaders" aria-current=3D"false" class=3D"svelte-1wvrrw">Headers</a> </li><li=
 class=3D"svelte-1wvrrw"><a href=3D"https://kit.svelte.dev/docs/load#using-=
parent-data" aria-current=3D"false" class=3D"svelte-1wvrrw">Using parent da=
ta</a> </li><li class=3D"svelte-1wvrrw"><a href=3D"https://kit.svelte.dev/d=
ocs/load#errors" aria-current=3D"false" class=3D"svelte-1wvrrw">Errors</a> =
</li><li class=3D"svelte-1wvrrw"><a href=3D"https://kit.svelte.dev/docs/loa=
d#redirects" aria-current=3D"false" class=3D"svelte-1wvrrw">Redirects</a> <=
/li><li class=3D"svelte-1wvrrw"><a href=3D"https://kit.svelte.dev/docs/load=
#streaming-with-promises" aria-current=3D"false" class=3D"svelte-1wvrrw">St=
reaming with promises</a> </li><li class=3D"svelte-1wvrrw"><a href=3D"https=
://kit.svelte.dev/docs/load#parallel-loading" aria-current=3D"page" class=
=3D"svelte-1wvrrw">Parallel loading</a> </li><li class=3D"svelte-1wvrrw"><a=
 href=3D"https://kit.svelte.dev/docs/load#rerunning-load-functions" aria-cu=
rrent=3D"false" class=3D"svelte-1wvrrw">Rerunning load functions</a> </li><=
li class=3D"svelte-1wvrrw"><a href=3D"https://kit.svelte.dev/docs/load#impl=
ications-for-authentication" aria-current=3D"false" class=3D"svelte-1wvrrw"=
>Implications for authentication</a> </li><li class=3D"svelte-1wvrrw"><a hr=
ef=3D"https://kit.svelte.dev/docs/load#further-reading" aria-current=3D"fal=
se" class=3D"svelte-1wvrrw">Further reading</a> </li></ul></nav></aside> <s=
ection><p>Before a <a href=3D"https://kit.svelte.dev/docs/routing#page-page=
-svelte"><code>+page.svelte</code></a> component (and its containing <a hre=
f=3D"https://kit.svelte.dev/docs/routing#layout-layout-svelte"><code>+layou=
t.svelte</code></a> components) can be rendered, we often need to get some =
data. This is done by defining <code>load</code> functions.</p>
<h2 id=3D"page-data">Page data<a href=3D"https://kit.svelte.dev/docs/load#p=
age-data" class=3D"permalink"><span class=3D"visually-hidden">permalink</sp=
an></a></h2><p>A <code>+page.svelte</code> file can have a sibling <code>+p=
age.js</code> that exports a <code>load</code> function, the return value o=
f which is available to the page via the <code>data</code> prop:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/blog/[slug]/+page.js</span><pre class=3D"shiki twoslash lsp" =
style=3D"background-color: var(--shiki-color-background); color: var(--shik=
i-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-contai=
ner"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-comm=
ent)">/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</s=
pan><span style=3D"color: var(--shiki-token-comment)"> </span><span style=
=3D"color: var(--shiki-token-function)">{import('./$types').PageLoad}</span=
><span style=3D"color: var(--shiki-token-comment)"> */</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span>=
<span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color=
: var(--shiki-token-keyword)">function</span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-function)"=
><data-lsp lsp=3D"function load(event: LoadEvent&amp;lt;{&amp;#10;    slug:=
 string;&amp;#10;}, Record&amp;lt;string, any> | null, Record&amp;lt;string=
, any>, string | null>): MaybePromise&amp;lt;void | Record&amp;lt;string, a=
ny>>">load</data-lsp></span><span style=3D"color: var(--shiki-color-text)">=
({ <data-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: string;&amp;#10=
;}">params</data-lsp> }) {</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-to=
ken-keyword)">return</span><span style=3D"color: var(--shiki-color-text)"> =
{</span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-t=
ext)">		<data-lsp lsp=3D"(property) post: {&amp;#10;    title: string;&amp;=
#10;    content: string;&amp;#10;}">post</data-lsp></span><span style=3D"co=
lor: var(--shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-=
color-text)"> {</span></div><div class=3D"line"><span style=3D"color: var(-=
-shiki-color-text)">			<data-lsp lsp=3D"(property) title: string">title</da=
ta-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</span><sp=
an style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: v=
ar(--shiki-token-string-expression)">`Title for </span><span style=3D"color=
: var(--shiki-token-keyword)">${</span><span style=3D"color: var(--shiki-to=
ken-constant)"><data-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: str=
ing;&amp;#10;}">params</data-lsp></span><span style=3D"color: var(--shiki-c=
olor-text)">.<data-lsp lsp=3D"(property) slug: string">slug</data-lsp></spa=
n><span style=3D"color: var(--shiki-token-keyword)">}</span><span style=3D"=
color: var(--shiki-token-string-expression)"> goes here`</span><span style=
=3D"color: var(--shiki-token-punctuation)">,</span></div><div class=3D"line=
"><span style=3D"color: var(--shiki-color-text)">			<data-lsp lsp=3D"(prope=
rty) content: string">content</data-lsp></span><span style=3D"color: var(--=
shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-text)=
"> </span><span style=3D"color: var(--shiki-token-string-expression)">`Cont=
ent for </span><span style=3D"color: var(--shiki-token-keyword)">${</span><=
span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(paramet=
er) params: {&amp;#10;    slug: string;&amp;#10;}">params</data-lsp></span>=
<span style=3D"color: var(--shiki-color-text)">.<data-lsp lsp=3D"(property)=
 slug: string">slug</data-lsp></span><span style=3D"color: var(--shiki-toke=
n-keyword)">}</span><span style=3D"color: var(--shiki-token-string-expressi=
on)"> goes here`</span></div><div class=3D"line"><span style=3D"color: var(=
--shiki-color-text)">		}</span></div><div class=3D"line"><span style=3D"col=
or: var(--shiki-color-text)">	};</span></div><div class=3D"line"><span styl=
e=3D"color: var(--shiki-color-text)">}</span></div></code></div></pre><butt=
on id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"s=
velte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20">=
<use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></=
div><div class=3D"ts-version copy-code-block code-block"><span class=3D"fil=
ename">src/routes/blog/[slug]/+page.ts</span><pre class=3D"shiki twoslash l=
sp" style=3D"background-color: var(--shiki-color-background); color: var(--=
shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-co=
ntainer"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-=
keyword)">import</span><span style=3D"color: var(--shiki-color-text)"> </sp=
an><span style=3D"color: var(--shiki-token-keyword)">type</span><span style=
=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type PageLo=
ad =3D (event: Kit.LoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, =
Record&amp;lt;string, any> | null, Record&amp;lt;string, any>, string | nul=
l>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10=
;import PageLoad">PageLoad</data-lsp> } </span><span style=3D"color: var(--=
shiki-token-keyword)">from</span><span style=3D"color: var(--shiki-color-te=
xt)"> </span><span style=3D"color: var(--shiki-token-string-expression)">'.=
/$types'</span><span style=3D"color: var(--shiki-color-text)">;</span></div=
><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageLoad">load</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEven=
t&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record&amp;lt;string, any> =
| null, Record&amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&a=
mp;lt;void | Record&amp;lt;string, any>>&amp;#10;import PageLoad">PageLoad<=
/data-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span><sp=
an style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"col=
or: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(parameter) params: {&amp=
;#10;    slug: string;&amp;#10;}">params</data-lsp> }) </span><span style=
=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><span style=3D"color: =
var(--shiki-color-text)"> {</span></div><div class=3D"line"><span style=3D"=
color: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-t=
oken-keyword)">return</span><span style=3D"color: var(--shiki-color-text)">=
 {</span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-=
text)">		<data-lsp lsp=3D"(property) post: {&amp;#10;    title: string;&amp=
;#10;    content: string;&amp;#10;}">post</data-lsp></span><span style=3D"c=
olor: var(--shiki-token-keyword)">:</span><span style=3D"color: var(--shiki=
-color-text)"> {</span></div><div class=3D"line"><span style=3D"color: var(=
--shiki-color-text)">			<data-lsp lsp=3D"(property) title: string">title</d=
ata-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-string-expression)">`Title for </span><span style=3D"colo=
r: var(--shiki-token-keyword)">${</span><span style=3D"color: var(--shiki-t=
oken-constant)"><data-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: st=
ring;&amp;#10;}">params</data-lsp></span><span style=3D"color: var(--shiki-=
color-text)">.<data-lsp lsp=3D"(property) slug: string">slug</data-lsp></sp=
an><span style=3D"color: var(--shiki-token-keyword)">}</span><span style=3D=
"color: var(--shiki-token-string-expression)"> goes here`</span><span style=
=3D"color: var(--shiki-token-punctuation)">,</span></div><div class=3D"line=
"><span style=3D"color: var(--shiki-color-text)">			<data-lsp lsp=3D"(prope=
rty) content: string">content</data-lsp></span><span style=3D"color: var(--=
shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-text)=
"> </span><span style=3D"color: var(--shiki-token-string-expression)">`Cont=
ent for </span><span style=3D"color: var(--shiki-token-keyword)">${</span><=
span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(paramet=
er) params: {&amp;#10;    slug: string;&amp;#10;}">params</data-lsp></span>=
<span style=3D"color: var(--shiki-color-text)">.<data-lsp lsp=3D"(property)=
 slug: string">slug</data-lsp></span><span style=3D"color: var(--shiki-toke=
n-keyword)">}</span><span style=3D"color: var(--shiki-token-string-expressi=
on)"> goes here`</span><span style=3D"color: var(--shiki-token-punctuation)=
">,</span></div><div class=3D"line"><span style=3D"color: var(--shiki-color=
-text)">		}</span><span style=3D"color: var(--shiki-token-punctuation)">,</=
span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-text=
)">	};</span></div><div class=3D"line"><span style=3D"color: var(--shiki-co=
lor-text)">};</span></div></code></div></pre><button id=3D"copy-to-clipboar=
d-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=
=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy=
-to-clipboard-empty"></use></svg></span></button></div><div class=3D"js-ver=
sion copy-code-block code-block"><span class=3D"filename">src/routes/blog/[=
slug]/+page.svelte</span><pre class=3D"shiki" style=3D"background-color: va=
r(--shiki-color-background)"><code><span class=3D"line"><span style=3D"colo=
r: var(--shiki-color-text)">&lt;</span><span style=3D"color: var(--shiki-to=
ken-string-expression)">script</span><span style=3D"color: var(--shiki-colo=
r-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-comment)">/** </span><span style=
=3D"color: var(--shiki-token-keyword)">@type</span><span style=3D"color: va=
r(--shiki-token-comment)"> </span><span style=3D"color: var(--shiki-token-f=
unction)">{import('./$types').PageData}</span><span style=3D"color: var(--s=
hiki-token-comment)"> */</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">h1</span><s=
pan style=3D"color: var(--shiki-color-text)">&gt;{</span><span style=3D"col=
or: var(--shiki-token-constant)">data</span><span style=3D"color: var(--shi=
ki-color-text)">.</span><span style=3D"color: var(--shiki-token-constant)">=
post</span><span style=3D"color: var(--shiki-color-text)">.title}&lt;/</spa=
n><span style=3D"color: var(--shiki-token-string-expression)">h1</span><spa=
n style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">div</span><=
span style=3D"color: var(--shiki-color-text)">&gt;{@</span><span style=3D"c=
olor: var(--shiki-token-keyword)">html</span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)"=
>data</span><span style=3D"color: var(--shiki-color-text)">.</span><span st=
yle=3D"color: var(--shiki-token-constant)">post</span><span style=3D"color:=
 var(--shiki-color-text)">.content}&lt;/</span><span style=3D"color: var(--=
shiki-token-string-expression)">div</span><span style=3D"color: var(--shiki=
-color-text)">&gt;</span></span></code></pre><button id=3D"copy-to-clipboar=
d-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=
=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy=
-to-clipboard-empty"></use></svg></span></button></div><div class=3D"ts-ver=
sion copy-code-block code-block"><span class=3D"filename">src/routes/blog/[=
slug]/+page.svelte</span><pre class=3D"shiki" style=3D"background-color: va=
r(--shiki-color-background)"><code><span class=3D"line"><span style=3D"colo=
r: var(--shiki-color-text)">&lt;</span><span style=3D"color: var(--shiki-to=
ken-string-expression)">script</span><span style=3D"color: var(--shiki-colo=
r-text)"> </span><span style=3D"color: var(--shiki-token-function)">lang</s=
pan><span style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=
=3D"color: var(--shiki-token-string-expression)">"ts"</span><span style=3D"=
color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">type</span><span style=3D"color: var(--shiki-color-text)=
"> { PageData } </span><span style=3D"color: var(--shiki-token-keyword)">fr=
om</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-string-expression)">'./$types'</span><span sty=
le=3D"color: var(--shiki-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data</span><span style=3D"color: var(--shiki-token-keyword)">:</span><spa=
n style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: va=
r(--shiki-token-function)">PageData</span><span style=3D"color: var(--shiki=
-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">h1</span><s=
pan style=3D"color: var(--shiki-color-text)">&gt;{</span><span style=3D"col=
or: var(--shiki-token-constant)">data</span><span style=3D"color: var(--shi=
ki-color-text)">.</span><span style=3D"color: var(--shiki-token-constant)">=
post</span><span style=3D"color: var(--shiki-color-text)">.title}&lt;/</spa=
n><span style=3D"color: var(--shiki-token-string-expression)">h1</span><spa=
n style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">div</span><=
span style=3D"color: var(--shiki-color-text)">&gt;{@</span><span style=3D"c=
olor: var(--shiki-token-keyword)">html</span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)"=
>data</span><span style=3D"color: var(--shiki-color-text)">.</span><span st=
yle=3D"color: var(--shiki-token-constant)">post</span><span style=3D"color:=
 var(--shiki-color-text)">.content}&lt;/</span><span style=3D"color: var(--=
shiki-token-string-expression)">div</span><span style=3D"color: var(--shiki=
-color-text)">&gt;</span></span></code></pre><button id=3D"copy-to-clipboar=
d-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=
=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy=
-to-clipboard-empty"></use></svg></span></button></div><p>Thanks to the gen=
erated <code>$types</code> module, we get full type safety.</p>
<p>A <code>load</code> function in a <code>+page.js</code> file runs both o=
n the server and in the browser (unless combined with <code>export const ss=
r =3D false</code>, in which case it will <a href=3D"https://kit.svelte.dev=
/docs/page-options#ssr">only run in the browser</a>). If your <code>load</c=
ode> function should <em>always</em> run on the server (because it uses pri=
vate environment variables, for example, or accesses a database) then it wo=
uld go in a <code>+page.server.js</code> instead.</p>
<p>A more realistic version of your blog post's <code>load</code> function,=
 that only runs on the server and pulls data from a database, might look li=
ke this:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/blog/[slug]/+page.server.js</span><pre class=3D"shiki twoslas=
h lsp" style=3D"background-color: var(--shiki-color-background); color: var=
(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code=
-container"><code><div class=3D"line"><span style=3D"color: var(--shiki-tok=
en-keyword)">import</span><span style=3D"color: var(--shiki-color-text)"> <=
/span><span style=3D"color: var(--shiki-token-constant)">*</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-keyword)">as</span><span style=3D"color: var(--shiki-color-text)"=
> <data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;=
import db">db</data-lsp> </span><span style=3D"color: var(--shiki-token-key=
word)">from</span><span style=3D"color: var(--shiki-color-text)"> </span><s=
pan style=3D"color: var(--shiki-token-string-expression)">'$lib/server/data=
base'</span><span style=3D"color: var(--shiki-color-text)">;</span></div><d=
iv class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').PageServerLoad}</span>=
<span style=3D"color: var(--shiki-token-comment)"> */</span></div><div clas=
s=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span><=
span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color:=
 var(--shiki-token-keyword)">async</span><span style=3D"color: var(--shiki-=
color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">func=
tion</span><span style=3D"color: var(--shiki-color-text)"> </span><span sty=
le=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(ev=
ent: ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record&a=
mp;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Record&amp;=
lt;string, any>>">load</data-lsp></span><span style=3D"color: var(--shiki-c=
olor-text)">({ <data-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: str=
ing;&amp;#10;}">params</data-lsp> }) {</span></div><div class=3D"line"><spa=
n style=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: va=
r(--shiki-token-keyword)">return</span><span style=3D"color: var(--shiki-co=
lor-text)"> {</span></div><div class=3D"line"><span style=3D"color: var(--s=
hiki-color-text)">		<data-lsp lsp=3D"(property) post: {&amp;#10;    title: =
string;&amp;#10;    content: string;&amp;#10;}">post</data-lsp></span><span=
 style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"color: =
var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-ke=
yword)">await</span><span style=3D"color: var(--shiki-color-text)"> </span>=
<span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(alias)=
 module &quot;$lib/server/database&quot;&amp;#10;import db">db</data-lsp></=
span><span style=3D"color: var(--shiki-token-function)">.<data-lsp lsp=3D"f=
unction getPost(slug: string): Promise&amp;lt;{&amp;#10;    title: string;&=
amp;#10;    content: string;&amp;#10;}>">getPost</data-lsp></span><span sty=
le=3D"color: var(--shiki-color-text)">(</span><span style=3D"color: var(--s=
hiki-token-constant)"><data-lsp lsp=3D"(parameter) params: {&amp;#10;    sl=
ug: string;&amp;#10;}">params</data-lsp></span><span style=3D"color: var(--=
shiki-color-text)">.<data-lsp lsp=3D"(property) slug: string">slug</data-ls=
p>)</span></div><div class=3D"line"><span style=3D"color: var(--shiki-color=
-text)">	};</span></div><div class=3D"line"><span style=3D"color: var(--shi=
ki-color-text)">}</span></div></code></div></pre><button id=3D"copy-to-clip=
board-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg cl=
ass=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#c=
opy-to-clipboard-empty"></use></svg></span></button></div><div class=3D"ts-=
version copy-code-block code-block"><span class=3D"filename">src/routes/blo=
g/[slug]/+page.server.ts</span><pre class=3D"shiki twoslash lsp" style=3D"b=
ackground-color: var(--shiki-color-background); color: var(--shiki-color-te=
xt)"><div class=3D"language-id">ts</div><div class=3D"code-container"><code=
><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)">impo=
rt</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-constant)">*</span><span style=3D"color: var(-=
-shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword=
)">as</span><span style=3D"color: var(--shiki-color-text)"> <data-lsp lsp=
=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;import db">db</=
data-lsp> </span><span style=3D"color: var(--shiki-token-keyword)">from</sp=
an><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"co=
lor: var(--shiki-token-string-expression)">'$lib/server/database'</span><sp=
an style=3D"color: var(--shiki-color-text)">;</span></div><div class=3D"lin=
e"><span style=3D"color: var(--shiki-token-keyword)">import</span><span sty=
le=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--s=
hiki-token-keyword)">type</span><span style=3D"color: var(--shiki-color-tex=
t)"> { <data-lsp lsp=3D"(alias) type PageServerLoad =3D (event: Kit.ServerL=
oadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record&amp;lt;string=
, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;s=
tring, any>>&amp;#10;import PageServerLoad">PageServerLoad</data-lsp> } </s=
pan><span style=3D"color: var(--shiki-token-keyword)">from</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-string-expression)">'./$types'</span><span style=3D"color: var(--=
shiki-color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageServerLoad">load</data-lsp></s=
pan><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type PageServerLoad =3D (event=
: Kit.ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record&=
amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Re=
cord&amp;lt;string, any>>&amp;#10;import PageServerLoad">PageServerLoad</da=
ta-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color:=
 var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-k=
eyword)">async</span><span style=3D"color: var(--shiki-color-text)"> ({ <da=
ta-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: string;&amp;#10;}">pa=
rams</data-lsp> }) </span><span style=3D"color: var(--shiki-token-keyword)"=
>=3D&gt;</span><span style=3D"color: var(--shiki-color-text)"> {</span></di=
v><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</spa=
n><span style=3D"color: var(--shiki-token-keyword)">return</span><span styl=
e=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(property) p=
ost: {&amp;#10;    title: string;&amp;#10;    content: string;&amp;#10;}">p=
ost</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</s=
pan><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"c=
olor: var(--shiki-token-keyword)">await</span><span style=3D"color: var(--s=
hiki-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)=
"><data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;=
import db">db</data-lsp></span><span style=3D"color: var(--shiki-token-func=
tion)">.<data-lsp lsp=3D"function getPost(slug: string): Promise&amp;lt;{&a=
mp;#10;    title: string;&amp;#10;    content: string;&amp;#10;}>">getPost<=
/data-lsp></span><span style=3D"color: var(--shiki-color-text)">(</span><sp=
an style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(parameter=
) params: {&amp;#10;    slug: string;&amp;#10;}">params</data-lsp></span><s=
pan style=3D"color: var(--shiki-color-text)">.<data-lsp lsp=3D"(property) s=
lug: string">slug</data-lsp>)</span><span style=3D"color: var(--shiki-token=
-punctuation)">,</span></div><div class=3D"line"><span style=3D"color: var(=
--shiki-color-text)">	};</span></div><div class=3D"line"><span style=3D"col=
or: var(--shiki-color-text)">};</span></div></code></div></pre><button id=
=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte=
-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use =
xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><=
p>Notice that the type changed from <code>PageLoad</code> to <code>PageServ=
erLoad</code>, because server <code>load</code> functions can access additi=
onal arguments. To understand when to use <code>+page.js</code> and when to=
 use <code>+page.server.js</code>, see <a href=3D"https://kit.svelte.dev/do=
cs/load#universal-vs-server">Universal vs server</a>.</p>
<h2 id=3D"layout-data">Layout data<a href=3D"https://kit.svelte.dev/docs/lo=
ad#layout-data" class=3D"permalink"><span class=3D"visually-hidden">permali=
nk</span></a></h2><p>Your <code>+layout.svelte</code> files can also load d=
ata, via <code>+layout.js</code> or <code>+layout.server.js</code>.</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/blog/[slug]/+layout.server.js</span><pre class=3D"shiki twosl=
ash lsp" style=3D"background-color: var(--shiki-color-background); color: v=
ar(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"co=
de-container"><code><div class=3D"line"><span style=3D"color: var(--shiki-t=
oken-keyword)">import</span><span style=3D"color: var(--shiki-color-text)">=
 </span><span style=3D"color: var(--shiki-token-constant)">*</span><span st=
yle=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--=
shiki-token-keyword)">as</span><span style=3D"color: var(--shiki-color-text=
)"> <data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#1=
0;import db">db</data-lsp> </span><span style=3D"color: var(--shiki-token-k=
eyword)">from</span><span style=3D"color: var(--shiki-color-text)"> </span>=
<span style=3D"color: var(--shiki-token-string-expression)">'$lib/server/da=
tabase'</span><span style=3D"color: var(--shiki-color-text)">;</span></div>=
<div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').LayoutServerLoad}</spa=
n><span style=3D"color: var(--shiki-token-comment)"> */</span></div><div cl=
ass=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-keyword)">async</span><span style=3D"color: var(--shik=
i-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">fu=
nction</span><span style=3D"color: var(--shiki-color-text)"> </span><span s=
tyle=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(=
event: ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record=
&amp;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Record&am=
p;lt;string, any>>">load</data-lsp></span><span style=3D"color: var(--shiki=
-color-text)">() {</span></div><div class=3D"line"><span style=3D"color: va=
r(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-keyw=
ord)">return</span><span style=3D"color: var(--shiki-color-text)"> {</span>=
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">		=
<data-lsp lsp=3D"(property) posts: {&amp;#10;    title: string;&amp;#10;   =
 slug: string;&amp;#10;}[]">posts</data-lsp></span><span style=3D"color: va=
r(--shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-t=
ext)"> </span><span style=3D"color: var(--shiki-token-keyword)">await</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-constant)"><data-lsp lsp=3D"(alias) module &quot;$lib/=
server/database&quot;&amp;#10;import db">db</data-lsp></span><span style=3D=
"color: var(--shiki-token-function)">.<data-lsp lsp=3D"function getPostSumm=
aries(): Promise&amp;lt;{&amp;#10;    title: string;&amp;#10;    slug: stri=
ng;&amp;#10;}[]>">getPostSummaries</data-lsp></span><span style=3D"color: v=
ar(--shiki-color-text)">()</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">	};</span></div><div class=3D"line"><span st=
yle=3D"color: var(--shiki-color-text)">}</span></div></code></div></pre><bu=
tton id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D=
"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20=
"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button>=
</div><div class=3D"ts-version copy-code-block code-block"><span class=3D"f=
ilename">src/routes/blog/[slug]/+layout.server.ts</span><pre class=3D"shiki=
 twoslash lsp" style=3D"background-color: var(--shiki-color-background); co=
lor: var(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=
=3D"code-container"><code><div class=3D"line"><span style=3D"color: var(--s=
hiki-token-keyword)">import</span><span style=3D"color: var(--shiki-color-t=
ext)"> </span><span style=3D"color: var(--shiki-token-constant)">*</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-keyword)">as</span><span style=3D"color: var(--shiki-colo=
r-text)"> <data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&=
amp;#10;import db">db</data-lsp> </span><span style=3D"color: var(--shiki-t=
oken-keyword)">from</span><span style=3D"color: var(--shiki-color-text)"> <=
/span><span style=3D"color: var(--shiki-token-string-expression)">'$lib/ser=
ver/database'</span><span style=3D"color: var(--shiki-color-text)">;</span>=
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>import</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">type</span><span style=3D"color=
: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type LayoutServerLoa=
d =3D (event: Kit.ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#1=
0;}, Record&amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp;=
lt;void | Record&amp;lt;string, any>>&amp;#10;import LayoutServerLoad">Layo=
utServerLoad</data-lsp> } </span><span style=3D"color: var(--shiki-token-ke=
yword)">from</span><span style=3D"color: var(--shiki-color-text)"> </span><=
span style=3D"color: var(--shiki-token-string-expression)">'./$types'</span=
><span style=3D"color: var(--shiki-color-text)">;</span></div><div class=3D=
"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: LayoutServerLoad">load</data-lsp><=
/span><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type LayoutServerLoad =3D (eve=
nt: Kit.ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Recor=
d&amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | =
Record&amp;lt;string, any>>&amp;#10;import LayoutServerLoad">LayoutServerLo=
ad</data-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span>=
<span style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"=
color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-t=
oken-keyword)">async</span><span style=3D"color: var(--shiki-color-text)"> =
() </span><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><=
span style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"=
line"><span style=3D"color: var(--shiki-color-text)">	</span><span style=3D=
"color: var(--shiki-token-keyword)">return</span><span style=3D"color: var(=
--shiki-color-text)"> {</span></div><div class=3D"line"><span style=3D"colo=
r: var(--shiki-color-text)">		<data-lsp lsp=3D"(property) posts: {&amp;#10;=
    title: string;&amp;#10;    slug: string;&amp;#10;}[]">posts</data-lsp><=
/span><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">await</span><span style=3D"color: var(--shiki-color-text=
)"> </span><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=
=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;import db">db</=
data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<data-l=
sp lsp=3D"function getPostSummaries(): Promise&amp;lt;{&amp;#10;    title: =
string;&amp;#10;    slug: string;&amp;#10;}[]>">getPostSummaries</data-lsp>=
</span><span style=3D"color: var(--shiki-color-text)">()</span><span style=
=3D"color: var(--shiki-token-punctuation)">,</span></div><div class=3D"line=
"><span style=3D"color: var(--shiki-color-text)">	};</span></div><div class=
=3D"line"><span style=3D"color: var(--shiki-color-text)">};</span></div></c=
ode></div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj=
3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=
=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></=
svg></span></button></div><div class=3D"js-version copy-code-block code-blo=
ck"><span class=3D"filename">src/routes/blog/[slug]/+layout.svelte</span><p=
re class=3D"shiki" style=3D"background-color: var(--shiki-color-background)=
"><code><span class=3D"line"><span style=3D"color: var(--shiki-color-text)"=
>&lt;</span><span style=3D"color: var(--shiki-token-string-expression)">scr=
ipt</span><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-comment)">/** </span><span style=
=3D"color: var(--shiki-token-keyword)">@type</span><span style=3D"color: va=
r(--shiki-token-comment)"> </span><span style=3D"color: var(--shiki-token-f=
unction)">{import('./$types').LayoutData}</span><span style=3D"color: var(-=
-shiki-token-comment)"> */</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">main</span>=
<span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-comment)">&lt;!-- +page.svelte is =
rendered in this &lt;slot&gt; --&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-keyword)">slot</span><span sty=
le=3D"color: var(--shiki-color-text)"> /&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">main</span=
><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">aside</span=
><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-string-expression)">h2</span><=
span style=3D"color: var(--shiki-color-text)">&gt;More posts&lt;/</span><sp=
an style=3D"color: var(--shiki-token-string-expression)">h2</span><span sty=
le=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-string-expression)">ul</span><=
span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		{#</s=
pan><span style=3D"color: var(--shiki-token-keyword)">each</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-constant)">data</span><span style=3D"color: var(--shiki-color-tex=
t)">.posts </span><span style=3D"color: var(--shiki-token-keyword)">as</spa=
n><span style=3D"color: var(--shiki-color-text)"> post}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">			&lt;=
</span><span style=3D"color: var(--shiki-token-string-expression)">li</span=
><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">				&lt=
;</span><span style=3D"color: var(--shiki-token-string-expression)">a</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-function)">href</span><span style=3D"color: var(--shik=
i-token-keyword)">=3D</span><span style=3D"color: var(--shiki-token-string-=
expression)">"/blog/{</span><span style=3D"color: var(--shiki-token-constan=
t)">post</span><span style=3D"color: var(--shiki-token-string-expression)">=
.slug</span><span style=3D"color: var(--shiki-token-string-expression)">}"<=
/span><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">					{<=
/span><span style=3D"color: var(--shiki-token-constant)">post</span><span s=
tyle=3D"color: var(--shiki-color-text)">.title}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">				&lt=
;/</span><span style=3D"color: var(--shiki-token-string-expression)">a</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">			&lt;=
/</span><span style=3D"color: var(--shiki-token-string-expression)">li</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		{/</s=
pan><span style=3D"color: var(--shiki-token-keyword)">each</span><span styl=
e=3D"color: var(--shiki-color-text)">}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;/<=
/span><span style=3D"color: var(--shiki-token-string-expression)">ul</span>=
<span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">aside</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;</span></span></code><=
/pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span =
class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" heig=
ht=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span><=
/button></div><div class=3D"ts-version copy-code-block code-block"><span cl=
ass=3D"filename">src/routes/blog/[slug]/+layout.svelte</span><pre class=3D"=
shiki" style=3D"background-color: var(--shiki-color-background)"><code><spa=
n class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</span>=
<span style=3D"color: var(--shiki-token-string-expression)">script</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-function)">lang</span><span style=3D"color: var(--shiki-t=
oken-keyword)">=3D</span><span style=3D"color: var(--shiki-token-string-exp=
ression)">"ts"</span><span style=3D"color: var(--shiki-color-text)">&gt;</s=
pan></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">type</span><span style=3D"color: var(--shiki-color-text)=
"> { LayoutData } </span><span style=3D"color: var(--shiki-token-keyword)">=
from</span><span style=3D"color: var(--shiki-color-text)"> </span><span sty=
le=3D"color: var(--shiki-token-string-expression)">'./$types'</span><span s=
tyle=3D"color: var(--shiki-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data</span><span style=3D"color: var(--shiki-token-keyword)">:</span><spa=
n style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: va=
r(--shiki-token-function)">LayoutData</span><span style=3D"color: var(--shi=
ki-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">main</span>=
<span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-comment)">&lt;!-- +page.svelte is =
rendered in this &lt;slot&gt; --&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-keyword)">slot</span><span sty=
le=3D"color: var(--shiki-color-text)"> /&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">main</span=
><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">aside</span=
><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-string-expression)">h2</span><=
span style=3D"color: var(--shiki-color-text)">&gt;More posts&lt;/</span><sp=
an style=3D"color: var(--shiki-token-string-expression)">h2</span><span sty=
le=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-string-expression)">ul</span><=
span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		{#</s=
pan><span style=3D"color: var(--shiki-token-keyword)">each</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-constant)">data</span><span style=3D"color: var(--shiki-color-tex=
t)">.posts </span><span style=3D"color: var(--shiki-token-keyword)">as</spa=
n><span style=3D"color: var(--shiki-color-text)"> post}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">			&lt;=
</span><span style=3D"color: var(--shiki-token-string-expression)">li</span=
><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">				&lt=
;</span><span style=3D"color: var(--shiki-token-string-expression)">a</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-function)">href</span><span style=3D"color: var(--shik=
i-token-keyword)">=3D</span><span style=3D"color: var(--shiki-token-string-=
expression)">"/blog/{</span><span style=3D"color: var(--shiki-token-constan=
t)">post</span><span style=3D"color: var(--shiki-token-string-expression)">=
.slug</span><span style=3D"color: var(--shiki-token-string-expression)">}"<=
/span><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">					{<=
/span><span style=3D"color: var(--shiki-token-constant)">post</span><span s=
tyle=3D"color: var(--shiki-color-text)">.title}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">				&lt=
;/</span><span style=3D"color: var(--shiki-token-string-expression)">a</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">			&lt;=
/</span><span style=3D"color: var(--shiki-token-string-expression)">li</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		{/</s=
pan><span style=3D"color: var(--shiki-token-keyword)">each</span><span styl=
e=3D"color: var(--shiki-color-text)">}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;/<=
/span><span style=3D"color: var(--shiki-token-string-expression)">ul</span>=
<span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">aside</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;</span></span></code><=
/pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span =
class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" heig=
ht=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span><=
/button></div><p>Data returned from layout <code>load</code> functions is a=
vailable to child <code>+layout.svelte</code> components and the <code>+pag=
e.svelte</code> component as well as the layout that it 'belongs' to.</p>
<div class=3D"copy-code-block code-block"><span class=3D"filename">src/rout=
es/blog/[slug]/+page.svelte</span><pre class=3D"language-diff" style=3D"bac=
kground-color: var(--shiki-color-background)"><code>&lt;script&gt;
<span class=3D"inserted">	import { page } from '$app/stores';
</span>
	/** @type {import('./$types').PageData} */
	export let data;

<span class=3D"inserted">	// we can access `data.posts` because it's return=
ed from
</span><span class=3D"inserted">	// the parent layout `load` function
</span><span class=3D"inserted">	$: index =3D data.posts.findIndex(post =3D=
&gt; post.slug =3D=3D=3D $page.params.slug);
</span><span class=3D"inserted">	$: next =3D data.posts[index - 1];
</span>&lt;/script&gt;

&lt;h1&gt;{data.post.title}&lt;/h1&gt;
&lt;div&gt;{@html data.post.content}&lt;/div&gt;

<span class=3D"inserted">{#if next}
</span><span class=3D"inserted">	&lt;p&gt;Next post: &lt;a href=3D"/blog/{n=
ext.slug}"&gt;{next.title}&lt;/a&gt;&lt;/p&gt;
</span><span class=3D"inserted">{/if}
</span></code></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte=
-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" wi=
dth=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use=
></svg></span></button></div><blockquote>
<p>If multiple <code>load</code> functions return data with the same key, t=
he last one 'wins' =E2=80=94 the result of a layout <code>load</code> retur=
ning <code>{ a: 1, b: 2 }</code> and a page <code>load</code> returning <co=
de>{ b: 3, c: 4 }</code> would be <code>{ a: 1, b: 3, c: 4 }</code>.</p>
</blockquote>
<h2 id=3D"$page-data">$page.data<a href=3D"https://kit.svelte.dev/docs/load=
#$page-data" class=3D"permalink"><span class=3D"visually-hidden">permalink<=
/span></a></h2><p>The <code>+page.svelte</code> component, and each <code>+=
layout.svelte</code> component above it, has access to its own data plus al=
l the data from its parents.</p>
<p>In some cases, we might need the opposite =E2=80=94 a parent layout migh=
t need to access page data or data from a child layout. For example, the ro=
ot layout might want to access a <code>title</code> property returned from =
a <code>load</code> function in <code>+page.js</code> or <code>+page.server=
.js</code>. This can be done with <code>$page.data</code>:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/+layout.svelte</span><pre class=3D"shiki" style=3D"background=
-color: var(--shiki-color-background)"><code><span class=3D"line"><span sty=
le=3D"color: var(--shiki-color-text)">&lt;</span><span style=3D"color: var(=
--shiki-token-string-expression)">script</span><span style=3D"color: var(--=
shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> { page } </span><span style=3D"color: =
var(--shiki-token-keyword)">from</span><span style=3D"color: var(--shiki-co=
lor-text)"> </span><span style=3D"color: var(--shiki-token-string-expressio=
n)">'$app/stores'</span><span style=3D"color: var(--shiki-color-text)">;</s=
pan></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-keyword)">svelte</span><span st=
yle=3D"color: var(--shiki-color-text)">:</span><span style=3D"color: var(--=
shiki-token-string-expression)">head</span><span style=3D"color: var(--shik=
i-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-string-expression)">title</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;{$</span><span style=
=3D"color: var(--shiki-token-constant)">page</span><span style=3D"color: va=
r(--shiki-color-text)">.</span><span style=3D"color: var(--shiki-token-cons=
tant)">data</span><span style=3D"color: var(--shiki-color-text)">.title}&lt=
;/</span><span style=3D"color: var(--shiki-token-string-expression)">title<=
/span><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-keyword)">svelte</span><span s=
tyle=3D"color: var(--shiki-color-text)">:</span><span style=3D"color: var(-=
-shiki-token-string-expression)">head</span><span style=3D"color: var(--shi=
ki-color-text)">&gt;</span></span></code></pre><button id=3D"copy-to-clipbo=
ard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg clas=
s=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#cop=
y-to-clipboard-empty"></use></svg></span></button></div><div class=3D"ts-ve=
rsion copy-code-block code-block"><span class=3D"filename">src/routes/+layo=
ut.svelte</span><pre class=3D"shiki" style=3D"background-color: var(--shiki=
-color-background)"><code><span class=3D"line"><span style=3D"color: var(--=
shiki-color-text)">&lt;</span><span style=3D"color: var(--shiki-token-strin=
g-expression)">script</span><span style=3D"color: var(--shiki-color-text)">=
 </span><span style=3D"color: var(--shiki-token-function)">lang</span><span=
 style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color=
: var(--shiki-token-string-expression)">"ts"</span><span style=3D"color: va=
r(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> { page } </span><span style=3D"color: =
var(--shiki-token-keyword)">from</span><span style=3D"color: var(--shiki-co=
lor-text)"> </span><span style=3D"color: var(--shiki-token-string-expressio=
n)">'$app/stores'</span><span style=3D"color: var(--shiki-color-text)">;</s=
pan></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-keyword)">svelte</span><span st=
yle=3D"color: var(--shiki-color-text)">:</span><span style=3D"color: var(--=
shiki-token-string-expression)">head</span><span style=3D"color: var(--shik=
i-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-string-expression)">title</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;{$</span><span style=
=3D"color: var(--shiki-token-constant)">page</span><span style=3D"color: va=
r(--shiki-color-text)">.</span><span style=3D"color: var(--shiki-token-cons=
tant)">data</span><span style=3D"color: var(--shiki-color-text)">.title}&lt=
;/</span><span style=3D"color: var(--shiki-token-string-expression)">title<=
/span><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-keyword)">svelte</span><span s=
tyle=3D"color: var(--shiki-color-text)">:</span><span style=3D"color: var(-=
-shiki-token-string-expression)">head</span><span style=3D"color: var(--shi=
ki-color-text)">&gt;</span></span></code></pre><button id=3D"copy-to-clipbo=
ard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg clas=
s=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#cop=
y-to-clipboard-empty"></use></svg></span></button></div><p>Type information=
 for <code>$page.data</code> is provided by <code>App.<a href=3D"https://ki=
t.svelte.dev/docs/types#app-pagedata">PageData</a></code>.</p>
<h2 id=3D"universal-vs-server">Universal vs server<a href=3D"https://kit.sv=
elte.dev/docs/load#universal-vs-server" class=3D"permalink"><span class=3D"=
visually-hidden">permalink</span></a></h2><p>As we've seen, there are two t=
ypes of <code>load</code> function:</p>
<ul>
<li><code>+page.js</code> and <code>+layout.js</code> files export <em>univ=
ersal</em> <code>load</code> functions that run both on the server and in t=
he browser</li>
<li><code>+page.server.js</code> and <code>+layout.server.js</code> files e=
xport <em>server</em> <code>load</code> functions that only run server-side=
</li>
</ul>
<p>Conceptually, they're the same thing, but there are some important diffe=
rences to be aware of.</p>
<h3 id=3D"universal-vs-server-when-does-which-load-function-run">When does =
which load function run?<a href=3D"https://kit.svelte.dev/docs/load#univers=
al-vs-server-when-does-which-load-function-run" class=3D"permalink"><span c=
lass=3D"visually-hidden">permalink</span></a></h3><p>Server <code>load</cod=
e> functions <em>always</em> run on the server.</p>
<p>By default, universal <code>load</code> functions run on the server duri=
ng SSR when the user first visits your page. They will then run again durin=
g hydration, reusing any responses from <a href=3D"https://kit.svelte.dev/d=
ocs/load#making-fetch-requests">fetch requests</a>. All subsequent invocati=
ons of universal <code>load</code> functions happen in the browser. You can=
 customize the behavior through <a href=3D"https://kit.svelte.dev/docs/page=
-options">page options</a>. If you disable <a href=3D"https://kit.svelte.de=
v/docs/page-options#ssr">server side rendering</a>, you'll get an SPA and u=
niversal <code>load</code> functions <em>always</em> run on the client.</p>
<p>If a route contains both universal and server <code>load</code> function=
s, the server <code>load</code> runs first.</p>
<p>A <code>load</code> function is invoked at runtime, unless you <a href=
=3D"https://kit.svelte.dev/docs/page-options#prerender">prerender</a> the p=
age =E2=80=94 in that case, it's invoked at build time.</p>
<h3 id=3D"universal-vs-server-input">Input<a href=3D"https://kit.svelte.dev=
/docs/load#universal-vs-server-input" class=3D"permalink"><span class=3D"vi=
sually-hidden">permalink</span></a></h3><p>Both universal and server <code>=
load</code> functions have access to properties describing the request (<co=
de>params</code>, <code>route</code> and <code>url</code>) and various func=
tions (<code>fetch</code>, <code>setHeaders</code>, <code>parent</code>, <c=
ode>depends</code> and <code>untrack</code>). These are described in the fo=
llowing sections.</p>
<p>Server <code>load</code> functions are called with a <code><a href=3D"ht=
tps://kit.svelte.dev/docs/types#public-types-serverloadevent">ServerLoadEve=
nt</a></code>, which inherits <code>clientAddress</code>, <code>cookies</co=
de>, <code>locals</code>, <code>platform</code> and <code>request</code> fr=
om <code><a href=3D"https://kit.svelte.dev/docs/types#public-types-requeste=
vent">RequestEvent</a></code>.</p>
<p>Universal <code>load</code> functions are called with a <code><a href=3D=
"https://kit.svelte.dev/docs/types#public-types-loadevent">LoadEvent</a></c=
ode>, which has a <code>data</code> property. If you have <code>load</code>=
 functions in both <code>+page.js</code> and <code>+page.server.js</code> (=
or <code>+layout.js</code> and <code>+layout.server.js</code>), the return =
value of the server <code>load</code> function is the <code>data</code> pro=
perty of the universal <code>load</code> function's argument.</p>
<h3 id=3D"universal-vs-server-output">Output<a href=3D"https://kit.svelte.d=
ev/docs/load#universal-vs-server-output" class=3D"permalink"><span class=3D=
"visually-hidden">permalink</span></a></h3><p>A universal <code>load</code>=
 function can return an object containing any values, including things like=
 custom classes and component constructors.</p>
<p>A server <code>load</code> function must return data that can be seriali=
zed with <a href=3D"https://github.com/rich-harris/devalue">devalue</a> =E2=
=80=94 anything that can be represented as JSON plus things like <code>BigI=
nt</code>, <code>Date</code>, <code>Map</code>, <code>Set</code> and <code>=
RegExp</code>, or repeated/cyclical references =E2=80=94 so that it can be =
transported over the network. Your data can include <a href=3D"https://kit.=
svelte.dev/docs/load#streaming-with-promises">promises</a>, in which case i=
t will be streamed to browsers.</p>
<h3 id=3D"universal-vs-server-when-to-use-which">When to use which<a href=
=3D"https://kit.svelte.dev/docs/load#universal-vs-server-when-to-use-which"=
 class=3D"permalink"><span class=3D"visually-hidden">permalink</span></a></=
h3><p>Server <code>load</code> functions are convenient when you need to ac=
cess data directly from a database or filesystem, or need to use private en=
vironment variables.</p>
<p>Universal <code>load</code> functions are useful when you need to <code>=
fetch</code> data from an external API and don't need private credentials, =
since SvelteKit can get the data directly from the API rather than going vi=
a your server. They are also useful when you need to return something that =
can't be serialized, such as a Svelte component constructor.</p>
<p>In rare cases, you might need to use both together =E2=80=94 for example=
, you might need to return an instance of a custom class that was initialis=
ed with data from your server. When using both, the server <code>load</code=
> return value is <em>not</em> passed directly to the page, but to the univ=
ersal <code>load</code> function (as the <code>data</code> property):</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/+page.server.js</span><pre class=3D"shiki twoslash lsp" style=
=3D"background-color: var(--shiki-color-background); color: var(--shiki-col=
or-text)"><div class=3D"language-id">ts</div><div class=3D"code-container">=
<code><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').PageServerLoad}</span>=
<span style=3D"color: var(--shiki-token-comment)"> */</span></div><div clas=
s=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span><=
span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color:=
 var(--shiki-token-keyword)">async</span><span style=3D"color: var(--shiki-=
color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">func=
tion</span><span style=3D"color: var(--shiki-color-text)"> </span><span sty=
le=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(ev=
ent: ServerLoadEvent&amp;lt;{}, Record&amp;lt;string, any>, string | null>)=
: MaybePromise&amp;lt;void | Record&amp;lt;string, any>>">load</data-lsp></=
span><span style=3D"color: var(--shiki-color-text)">() {</span></div><div c=
lass=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><span =
style=3D"color: var(--shiki-token-keyword)">return</span><span style=3D"col=
or: var(--shiki-color-text)"> {</span></div><div class=3D"line"><span style=
=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(property) serverMes=
sage: string">serverMessage</data-lsp></span><span style=3D"color: var(--sh=
iki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-text)">=
 </span><span style=3D"color: var(--shiki-token-string-expression)">'hello =
from server load function'</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">	};</span></div><div class=3D"line"><span st=
yle=3D"color: var(--shiki-color-text)">}</span></div></code></div></pre><bu=
tton id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D=
"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20=
"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button>=
</div><div class=3D"ts-version copy-code-block code-block"><span class=3D"f=
ilename">src/routes/+page.server.ts</span><pre class=3D"shiki twoslash lsp"=
 style=3D"background-color: var(--shiki-color-background); color: var(--shi=
ki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-conta=
iner"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-key=
word)">import</span><span style=3D"color: var(--shiki-color-text)"> </span>=
<span style=3D"color: var(--shiki-token-keyword)">type</span><span style=3D=
"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type PageServe=
rLoad =3D (event: Kit.ServerLoadEvent&amp;lt;{}, Record&amp;lt;string, any>=
, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string,=
 any>>&amp;#10;import PageServerLoad">PageServerLoad</data-lsp> } </span><s=
pan style=3D"color: var(--shiki-token-keyword)">from</span><span style=3D"c=
olor: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-to=
ken-string-expression)">'./$types'</span><span style=3D"color: var(--shiki-=
color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageServerLoad">load</data-lsp></s=
pan><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type PageServerLoad =3D (event=
: Kit.ServerLoadEvent&amp;lt;{}, Record&amp;lt;string, any>, string | null>=
) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;i=
mport PageServerLoad">PageServerLoad</data-lsp></span><span style=3D"color:=
 var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-k=
eyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> </span><=
span style=3D"color: var(--shiki-token-keyword)">async</span><span style=3D=
"color: var(--shiki-color-text)"> () </span><span style=3D"color: var(--shi=
ki-token-keyword)">=3D&gt;</span><span style=3D"color: var(--shiki-color-te=
xt)"> {</span></div><div class=3D"line"><span style=3D"color: var(--shiki-c=
olor-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">retur=
n</span><span style=3D"color: var(--shiki-color-text)"> {</span></div><div =
class=3D"line"><span style=3D"color: var(--shiki-color-text)">		<data-lsp l=
sp=3D"(property) serverMessage: string">serverMessage</data-lsp></span><spa=
n style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"color:=
 var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-s=
tring-expression)">'hello from server load function'</span><span style=3D"c=
olor: var(--shiki-token-punctuation)">,</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">	};</span></div><div class=3D"l=
ine"><span style=3D"color: var(--shiki-color-text)">};</span></div></code><=
/div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib">=
<span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20=
" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></=
span></button></div><div class=3D"js-version copy-code-block code-block"><s=
pan class=3D"filename">src/routes/+page.js</span><pre class=3D"shiki twosla=
sh lsp" style=3D"background-color: var(--shiki-color-background); color: va=
r(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"cod=
e-container"><code><div class=3D"line"><span style=3D"color: var(--shiki-to=
ken-comment)">/** </span><span style=3D"color: var(--shiki-token-keyword)">=
@type</span><span style=3D"color: var(--shiki-token-comment)"> </span><span=
 style=3D"color: var(--shiki-token-function)">{import('./$types').PageLoad}=
</span><span style=3D"color: var(--shiki-token-comment)"> */</span></div><d=
iv class=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export<=
/span><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D=
"color: var(--shiki-token-keyword)">async</span><span style=3D"color: var(-=
-shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword=
)">function</span><span style=3D"color: var(--shiki-color-text)"> </span><s=
pan style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function =
load(event: LoadEvent&amp;lt;{}, Record&amp;lt;string, any> | null, Record&=
amp;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Record&amp=
;lt;string, any>>">load</data-lsp></span><span style=3D"color: var(--shiki-=
color-text)">({ <data-lsp lsp=3D"(parameter) data: Record&amp;lt;string, an=
y> | null">data</data-lsp> }) {</span></div><div class=3D"line"><span style=
=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: var(--shi=
ki-token-keyword)">return</span><span style=3D"color: var(--shiki-color-tex=
t)"> {</span></div><div class=3D"line"><span style=3D"color: var(--shiki-co=
lor-text)">		<data-lsp lsp=3D"(property) serverMessage: any">serverMessage<=
/data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</span>=
<span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color=
: var(--shiki-token-constant)"><data-lsp lsp=3D"(parameter) data: Record&am=
p;lt;string, any> | null">data</data-lsp></span><span style=3D"color: var(-=
-shiki-color-text)">.<data-lsp lsp=3D"any">serverMessage</data-lsp></span><=
span style=3D"color: var(--shiki-token-punctuation)">,</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=
=3D"(property) universalMessage: string">universalMessage</data-lsp></span>=
<span style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"co=
lor: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-tok=
en-string-expression)">'hello from universal load function'</span></div><di=
v class=3D"line"><span style=3D"color: var(--shiki-color-text)">	};</span><=
/div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">}</=
span></div></code></div></pre><button id=3D"copy-to-clipboard-button" class=
=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-=
5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-em=
pty"></use></svg></span></button></div><div class=3D"ts-version copy-code-b=
lock code-block"><span class=3D"filename">src/routes/+page.ts</span><pre cl=
ass=3D"shiki twoslash lsp" style=3D"background-color: var(--shiki-color-bac=
kground); color: var(--shiki-color-text)"><div class=3D"language-id">ts</di=
v><div class=3D"code-container"><code><div class=3D"line"><span style=3D"co=
lor: var(--shiki-token-keyword)">import</span><span style=3D"color: var(--s=
hiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)"=
>type</span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=
=3D"(alias) type PageLoad =3D (event: Kit.LoadEvent&amp;lt;{}, Record&amp;l=
t;string, any> | null, Record&amp;lt;string, any>, string | null>) =3D> Kit=
.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import Page=
Load">PageLoad</data-lsp> } </span><span style=3D"color: var(--shiki-token-=
keyword)">from</span><span style=3D"color: var(--shiki-color-text)"> </span=
><span style=3D"color: var(--shiki-token-string-expression)">'./$types'</sp=
an><span style=3D"color: var(--shiki-color-text)">;</span></div><div class=
=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageLoad">load</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEven=
t&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, any>,=
 string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, =
any>>&amp;#10;import PageLoad">PageLoad</data-lsp></span><span style=3D"col=
or: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-toke=
n-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> </spa=
n><span style=3D"color: var(--shiki-token-keyword)">async</span><span style=
=3D"color: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(parameter) data: =
Record&amp;lt;string, any> | null">data</data-lsp> }) </span><span style=3D=
"color: var(--shiki-token-keyword)">=3D&gt;</span><span style=3D"color: var=
(--shiki-color-text)"> {</span></div><div class=3D"line"><span style=3D"col=
or: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-toke=
n-keyword)">return</span><span style=3D"color: var(--shiki-color-text)"> {<=
/span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-tex=
t)">		<data-lsp lsp=3D"(property) serverMessage: any">serverMessage</data-l=
sp></span><span style=3D"color: var(--shiki-token-keyword)">:</span><span s=
tyle=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(-=
-shiki-token-constant)"><data-lsp lsp=3D"(parameter) data: Record&amp;lt;st=
ring, any> | null">data</data-lsp></span><span style=3D"color: var(--shiki-=
color-text)">.<data-lsp lsp=3D"any">serverMessage</data-lsp></span><span st=
yle=3D"color: var(--shiki-token-punctuation)">,</span></div><div class=3D"l=
ine"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(pro=
perty) universalMessage: string">universalMessage</data-lsp></span><span st=
yle=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"color: var=
(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-strin=
g-expression)">'hello from universal load function'</span><span style=3D"co=
lor: var(--shiki-token-punctuation)">,</span></div><div class=3D"line"><spa=
n style=3D"color: var(--shiki-color-text)">	};</span></div><div class=3D"li=
ne"><span style=3D"color: var(--shiki-color-text)">};</span></div></code></=
div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><=
span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20"=
 height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></s=
pan></button></div><h2 id=3D"using-url-data">Using URL data<a href=3D"https=
://kit.svelte.dev/docs/load#using-url-data" class=3D"permalink"><span class=
=3D"visually-hidden">permalink</span></a></h2><p>Often the <code>load</code=
> function depends on the URL in one way or another. For this, the <code>lo=
ad</code> function provides you with <code>url</code>, <code>route</code> a=
nd <code>params</code>.</p>
<h3 id=3D"using-url-data-url">url<a href=3D"https://kit.svelte.dev/docs/loa=
d#using-url-data-url" class=3D"permalink"><span class=3D"visually-hidden">p=
ermalink</span></a></h3><p>An instance of <a href=3D"https://developer.mozi=
lla.org/en-US/docs/Web/API/URL"><code>URL</code></a>, containing properties=
 like the <code>origin</code>, <code>hostname</code>, <code>pathname</code>=
 and <code>searchParams</code> (which contains the parsed query string as a=
 <a href=3D"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParam=
s"><code>URLSearchParams</code></a> object). <code>url.hash</code> cannot b=
e accessed during <code>load</code>, since it is unavailable on the server.=
</p>
<blockquote>
<p>In some environments this is derived from request headers during server-=
side rendering. If you're using <a href=3D"https://kit.svelte.dev/docs/adap=
ter-node">adapter-node</a>, for example, you may need to configure the adap=
ter in order for the URL to be correct.</p>
</blockquote>
<h3 id=3D"using-url-data-route">route<a href=3D"https://kit.svelte.dev/docs=
/load#using-url-data-route" class=3D"permalink"><span class=3D"visually-hid=
den">permalink</span></a></h3><p>Contains the name of the current route dir=
ectory, relative to <code>src/routes</code>:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/a/[b]/[...c]/+page.js</span><pre class=3D"shiki twoslash lsp"=
 style=3D"background-color: var(--shiki-color-background); color: var(--shi=
ki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-conta=
iner"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-com=
ment)">/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</=
span><span style=3D"color: var(--shiki-token-comment)"> </span><span style=
=3D"color: var(--shiki-token-function)">{import('./$types').PageLoad}</span=
><span style=3D"color: var(--shiki-token-comment)"> */</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span>=
<span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color=
: var(--shiki-token-keyword)">function</span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-function)"=
><data-lsp lsp=3D"function load(event: LoadEvent&amp;lt;{&amp;#10;    b: st=
ring;&amp;#10;    c: string;&amp;#10;}, Record&amp;lt;string, any> | null, =
Record&amp;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Rec=
ord&amp;lt;string, any>>">load</data-lsp></span><span style=3D"color: var(-=
-shiki-color-text)">({ <data-lsp lsp=3D"(parameter) route: {&amp;#10;    id=
: string | null;&amp;#10;}">route</data-lsp> }) {</span></div><div class=3D=
"line"><span style=3D"color: var(--shiki-color-text)">	</span><span style=
=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"namespace console&=
amp;#10;var console: Console">console</data-lsp></span><span style=3D"color=
: var(--shiki-token-function)">.<data-lsp lsp=3D"(method) Console.log(messa=
ge?: any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp></sp=
an><span style=3D"color: var(--shiki-color-text)">(</span><span style=3D"co=
lor: var(--shiki-token-constant)"><data-lsp lsp=3D"(parameter) route: {&amp=
;#10;    id: string | null;&amp;#10;}">route</data-lsp></span><span style=
=3D"color: var(--shiki-color-text)">.<data-lsp lsp=3D"(property) id: string=
 | null">id</data-lsp>); </span><span style=3D"color: var(--shiki-token-com=
ment)">// '/a/[b]/[...c]'</span></div><div class=3D"line"><span style=3D"co=
lor: var(--shiki-color-text)">}</span></div></code></div></pre><button id=
=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte=
-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use =
xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><=
div class=3D"ts-version copy-code-block code-block"><span class=3D"filename=
">src/routes/a/[b]/[...c]/+page.ts</span><pre class=3D"shiki twoslash lsp" =
style=3D"background-color: var(--shiki-color-background); color: var(--shik=
i-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-contai=
ner"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-keyw=
ord)">import</span><span style=3D"color: var(--shiki-color-text)"> </span><=
span style=3D"color: var(--shiki-token-keyword)">type</span><span style=3D"=
color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type PageLoad =
=3D (event: Kit.LoadEvent&amp;lt;{&amp;#10;    b: string;&amp;#10;    c: st=
ring;&amp;#10;}, Record&amp;lt;string, any> | null, Record&amp;lt;string, a=
ny>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;stri=
ng, any>>&amp;#10;import PageLoad">PageLoad</data-lsp> } </span><span style=
=3D"color: var(--shiki-token-keyword)">from</span><span style=3D"color: var=
(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-strin=
g-expression)">'./$types'</span><span style=3D"color: var(--shiki-color-tex=
t)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageLoad">load</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEven=
t&amp;lt;{&amp;#10;    b: string;&amp;#10;    c: string;&amp;#10;}, Record&=
amp;lt;string, any> | null, Record&amp;lt;string, any>, string | null>) =3D=
> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import=
 PageLoad">PageLoad</data-lsp></span><span style=3D"color: var(--shiki-colo=
r-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=3D</spa=
n><span style=3D"color: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(para=
meter) route: {&amp;#10;    id: string | null;&amp;#10;}">route</data-lsp> =
}) </span><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><=
span style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"=
line"><span style=3D"color: var(--shiki-color-text)">	</span><span style=3D=
"color: var(--shiki-token-constant)"><data-lsp lsp=3D"namespace console&amp=
;#10;var console: Console">console</data-lsp></span><span style=3D"color: v=
ar(--shiki-token-function)">.<data-lsp lsp=3D"(method) Console.log(message?=
: any, ...optionalParams: any[]): void (+1 overload)">log</data-lsp></span>=
<span style=3D"color: var(--shiki-color-text)">(</span><span style=3D"color=
: var(--shiki-token-constant)"><data-lsp lsp=3D"(parameter) route: {&amp;#1=
0;    id: string | null;&amp;#10;}">route</data-lsp></span><span style=3D"c=
olor: var(--shiki-color-text)">.<data-lsp lsp=3D"(property) id: string | nu=
ll">id</data-lsp>); </span><span style=3D"color: var(--shiki-token-comment)=
">// '/a/[b]/[...c]'</span></div><div class=3D"line"><span style=3D"color: =
var(--shiki-color-text)">};</span></div></code></div></pre><button id=3D"co=
py-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3i=
b"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:=
href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><h3 id=
=3D"using-url-data-params">params<a href=3D"https://kit.svelte.dev/docs/loa=
d#using-url-data-params" class=3D"permalink"><span class=3D"visually-hidden=
">permalink</span></a></h3><p><code>params</code> is derived from <code>url=
.pathname</code> and <code>route.id</code>.</p>
<p>Given a <code>route.id</code> of <code>/a/[b]/[...c]</code> and a <code>=
url.pathname</code> of <code>/a/x/y/z</code>, the <code>params</code> objec=
t would look like this:</p>
<pre class=3D"copy-code-block shiki twoslash lsp" style=3D"background-color=
: var(--shiki-color-background); color: var(--shiki-color-text)"><div class=
=3D"language-id">ts</div><div class=3D"code-container"><code><div class=3D"=
line"><span style=3D"color: var(--shiki-color-text)">{</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><span st=
yle=3D"color: var(--shiki-token-string-expression)">"b"</span><span style=
=3D"color: var(--shiki-color-text)">: </span><span style=3D"color: var(--sh=
iki-token-string-expression)">"x"</span><span style=3D"color: var(--shiki-t=
oken-punctuation)">,</span></div><div class=3D"line"><span style=3D"color: =
var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-st=
ring-expression)">"c"</span><span style=3D"color: var(--shiki-color-text)">=
: </span><span style=3D"color: var(--shiki-token-string-expression)">"y/z"<=
/span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-tex=
t)">}</span></div></code></div><button id=3D"copy-to-clipboard-button" clas=
s=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte=
-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-e=
mpty"></use></svg></span></button></pre><h2 id=3D"making-fetch-requests">Ma=
king fetch requests<a href=3D"https://kit.svelte.dev/docs/load#making-fetch=
-requests" class=3D"permalink"><span class=3D"visually-hidden">permalink</s=
pan></a></h2><p>To get data from an external API or a <code>+server.js</cod=
e> handler, you can use the provided <code>fetch</code> function, which beh=
aves identically to the <a href=3D"https://developer.mozilla.org/en-US/docs=
/Web/API/fetch">native <code>fetch</code> web API</a> with a few additional=
 features:</p>
<ul>
<li>It can be used to make credentialed requests on the server, as it inher=
its the <code>cookie</code> and <code>authorization</code> headers for the =
page request.</li>
<li>It can make relative requests on the server (ordinarily, <code>fetch</c=
ode> requires a URL with an origin when used in a server context).</li>
<li>Internal requests (e.g. for <code>+server.js</code> routes) go directly=
 to the handler function when running on the server, without the overhead o=
f an HTTP call.</li>
<li>During server-side rendering, the response will be captured and inlined=
 into the rendered HTML by hooking into the <code>text</code>, <code>json</=
code> and <code>arrayBuffer</code> methods of the <code>Response</code> obj=
ect. Note that headers will <em>not</em> be serialized, unless explicitly i=
ncluded via <a href=3D"https://kit.svelte.dev/docs/hooks#server-hooks-handl=
e"><code>filterSerializedResponseHeaders</code></a>.</li>
<li>During hydration, the response will be read from the HTML, guaranteeing=
 consistency and preventing an additional network request - if you received=
 a warning in your browser console when using the browser <code>fetch</code=
> instead of the <code>load</code> <code>fetch</code>, this is why.</li>
</ul>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/items/[id]/+page.js</span><pre class=3D"shiki twoslash lsp" s=
tyle=3D"background-color: var(--shiki-color-background); color: var(--shiki=
-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-contain=
er"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-comme=
nt)">/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</sp=
an><span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D=
"color: var(--shiki-token-function)">{import('./$types').PageLoad}</span><s=
pan style=3D"color: var(--shiki-token-comment)"> */</span></div><div class=
=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-keyword)">async</span><span style=3D"color: var(--shiki-c=
olor-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">funct=
ion</span><span style=3D"color: var(--shiki-color-text)"> </span><span styl=
e=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(eve=
nt: LoadEvent&amp;lt;{&amp;#10;    id: string;&amp;#10;}, Record&amp;lt;str=
ing, any> | null, Record&amp;lt;string, any>, string | null>): MaybePromise=
&amp;lt;void | Record&amp;lt;string, any>>">load</data-lsp></span><span sty=
le=3D"color: var(--shiki-color-text)">({ <data-lsp lsp=3D"(parameter) fetch=
: (input: RequestInfo | URL, init?: RequestInit | undefined) =3D> Promise&a=
mp;lt;Response>">fetch</data-lsp></span><span style=3D"color: var(--shiki-t=
oken-punctuation)">,</span><span style=3D"color: var(--shiki-color-text)"> =
<data-lsp lsp=3D"(parameter) params: {&amp;#10;    id: string;&amp;#10;}">p=
arams</data-lsp> }) {</span></div><div class=3D"line"><span style=3D"color:=
 var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-k=
eyword)">const</span><span style=3D"color: var(--shiki-color-text)"> </span=
><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"const =
res: Response">res</data-lsp></span><span style=3D"color: var(--shiki-color=
-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=3D</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-keyword)">await</span><span style=3D"color: var(--shik=
i-color-text)"> </span><span style=3D"color: var(--shiki-token-function)"><=
data-lsp lsp=3D"(parameter) fetch: (input: RequestInfo | URL, init?: Reques=
tInit | undefined) =3D> Promise&amp;lt;Response>">fetch</data-lsp></span><s=
pan style=3D"color: var(--shiki-color-text)">(</span><span style=3D"color: =
var(--shiki-token-string-expression)">`/api/items/</span><span style=3D"col=
or: var(--shiki-token-keyword)">${</span><span style=3D"color: var(--shiki-=
token-constant)"><data-lsp lsp=3D"(parameter) params: {&amp;#10;    id: str=
ing;&amp;#10;}">params</data-lsp></span><span style=3D"color: var(--shiki-c=
olor-text)">.<data-lsp lsp=3D"(property) id: string">id</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">}</span><span style=3D"colo=
r: var(--shiki-token-string-expression)">`</span><span style=3D"color: var(=
--shiki-color-text)">);</span></div><div class=3D"line"><span style=3D"colo=
r: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token=
-keyword)">const</span><span style=3D"color: var(--shiki-color-text)"> </sp=
an><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"cons=
t item: any">item</data-lsp></span><span style=3D"color: var(--shiki-color-=
text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=3D</span>=
<span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color=
: var(--shiki-token-keyword)">await</span><span style=3D"color: var(--shiki=
-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)"><d=
ata-lsp lsp=3D"const res: Response">res</data-lsp></span><span style=3D"col=
or: var(--shiki-token-function)">.<data-lsp lsp=3D"(method) Body.json(): Pr=
omise&amp;lt;any>">json</data-lsp></span><span style=3D"color: var(--shiki-=
color-text)">();</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(property) ite=
m: any">item</data-lsp> };</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">}</span></div></code></div></pre><button id=
=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte=
-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use =
xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><=
div class=3D"ts-version copy-code-block code-block"><span class=3D"filename=
">src/routes/items/[id]/+page.ts</span><pre class=3D"shiki twoslash lsp" st=
yle=3D"background-color: var(--shiki-color-background); color: var(--shiki-=
color-text)"><div class=3D"language-id">ts</div><div class=3D"code-containe=
r"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-keywor=
d)">import</span><span style=3D"color: var(--shiki-color-text)"> </span><sp=
an style=3D"color: var(--shiki-token-keyword)">type</span><span style=3D"co=
lor: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type PageLoad =3D=
 (event: Kit.LoadEvent&amp;lt;{&amp;#10;    id: string;&amp;#10;}, Record&a=
mp;lt;string, any> | null, Record&amp;lt;string, any>, string | null>) =3D>=
 Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import =
PageLoad">PageLoad</data-lsp> } </span><span style=3D"color: var(--shiki-to=
ken-keyword)">from</span><span style=3D"color: var(--shiki-color-text)"> </=
span><span style=3D"color: var(--shiki-token-string-expression)">'./$types'=
</span><span style=3D"color: var(--shiki-color-text)">;</span></div><div cl=
ass=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageLoad">load</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEven=
t&amp;lt;{&amp;#10;    id: string;&amp;#10;}, Record&amp;lt;string, any> | =
null, Record&amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp=
;lt;void | Record&amp;lt;string, any>>&amp;#10;import PageLoad">PageLoad</d=
ata-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span><span=
 style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color=
: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-=
keyword)">async</span><span style=3D"color: var(--shiki-color-text)"> ({ <d=
ata-lsp lsp=3D"(parameter) fetch: (input: RequestInfo | URL, init?: Request=
Init | undefined) =3D> Promise&amp;lt;Response>">fetch</data-lsp></span><sp=
an style=3D"color: var(--shiki-token-punctuation)">,</span><span style=3D"c=
olor: var(--shiki-color-text)"> <data-lsp lsp=3D"(parameter) params: {&amp;=
#10;    id: string;&amp;#10;}">params</data-lsp> }) </span><span style=3D"c=
olor: var(--shiki-token-keyword)">=3D&gt;</span><span style=3D"color: var(-=
-shiki-color-text)"> {</span></div><div class=3D"line"><span style=3D"color=
: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-=
keyword)">const</span><span style=3D"color: var(--shiki-color-text)"> </spa=
n><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"const=
 res: Response">res</data-lsp></span><span style=3D"color: var(--shiki-colo=
r-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=3D</spa=
n><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"col=
or: var(--shiki-token-keyword)">await</span><span style=3D"color: var(--shi=
ki-color-text)"> </span><span style=3D"color: var(--shiki-token-function)">=
<data-lsp lsp=3D"(parameter) fetch: (input: RequestInfo | URL, init?: Reque=
stInit | undefined) =3D> Promise&amp;lt;Response>">fetch</data-lsp></span><=
span style=3D"color: var(--shiki-color-text)">(</span><span style=3D"color:=
 var(--shiki-token-string-expression)">`/api/items/</span><span style=3D"co=
lor: var(--shiki-token-keyword)">${</span><span style=3D"color: var(--shiki=
-token-constant)"><data-lsp lsp=3D"(parameter) params: {&amp;#10;    id: st=
ring;&amp;#10;}">params</data-lsp></span><span style=3D"color: var(--shiki-=
color-text)">.<data-lsp lsp=3D"(property) id: string">id</data-lsp></span><=
span style=3D"color: var(--shiki-token-keyword)">}</span><span style=3D"col=
or: var(--shiki-token-string-expression)">`</span><span style=3D"color: var=
(--shiki-color-text)">);</span></div><div class=3D"line"><span style=3D"col=
or: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-toke=
n-keyword)">const</span><span style=3D"color: var(--shiki-color-text)"> </s=
pan><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"con=
st item: any">item</data-lsp></span><span style=3D"color: var(--shiki-color=
-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=3D</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-keyword)">await</span><span style=3D"color: var(--shik=
i-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)"><=
data-lsp lsp=3D"const res: Response">res</data-lsp></span><span style=3D"co=
lor: var(--shiki-token-function)">.<data-lsp lsp=3D"(method) Body.json(): P=
romise&amp;lt;any>">json</data-lsp></span><span style=3D"color: var(--shiki=
-color-text)">();</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(property) ite=
m: any">item</data-lsp> };</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">};</span></div></code></div></pre><button id=
=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte=
-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use =
xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><=
h2 id=3D"cookies">Cookies<a href=3D"https://kit.svelte.dev/docs/load#cookie=
s" class=3D"permalink"><span class=3D"visually-hidden">permalink</span></a>=
</h2><p>A server <code>load</code> function can get and set <a href=3D"http=
s://kit.svelte.dev/docs/types#public-types-cookies"><code>cookies</code></a=
>.</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/+layout.server.js</span><pre class=3D"shiki twoslash lsp" sty=
le=3D"background-color: var(--shiki-color-background); color: var(--shiki-c=
olor-text)"><div class=3D"language-id">ts</div><div class=3D"code-container=
"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword=
)">import</span><span style=3D"color: var(--shiki-color-text)"> </span><spa=
n style=3D"color: var(--shiki-token-constant)">*</span><span style=3D"color=
: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-=
keyword)">as</span><span style=3D"color: var(--shiki-color-text)"> <data-ls=
p lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;import db"=
>db</data-lsp> </span><span style=3D"color: var(--shiki-token-keyword)">fro=
m</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-string-expression)">'$lib/server/database'</sp=
an><span style=3D"color: var(--shiki-color-text)">;</span></div><div class=
=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').LayoutServerLoad}</spa=
n><span style=3D"color: var(--shiki-token-comment)"> */</span></div><div cl=
ass=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-keyword)">async</span><span style=3D"color: var(--shik=
i-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">fu=
nction</span><span style=3D"color: var(--shiki-color-text)"> </span><span s=
tyle=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(=
event: ServerLoadEvent&amp;lt;{}, Record&amp;lt;string, any>, string | null=
>): MaybePromise&amp;lt;void | Record&amp;lt;string, any>>">load</data-lsp>=
</span><span style=3D"color: var(--shiki-color-text)">({ <data-lsp lsp=3D"(=
parameter) cookies: Cookies">cookies</data-lsp> }) {</span></div><div class=
=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><span styl=
e=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"color: v=
ar(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-con=
stant)"><data-lsp lsp=3D"const sessionid: string | undefined">sessionid</da=
ta-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color:=
 var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-c=
onstant)"><data-lsp lsp=3D"(parameter) cookies: Cookies">cookies</data-lsp>=
</span><span style=3D"color: var(--shiki-token-function)">.<data-lsp lsp=3D=
"(method) Cookies.get(name: string, opts?: CookieParseOptions | undefined):=
 string | undefined">get</data-lsp></span><span style=3D"color: var(--shiki=
-color-text)">(</span><span style=3D"color: var(--shiki-token-string-expres=
sion)">'sessionid'</span><span style=3D"color: var(--shiki-color-text)">);<=
/span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"=
><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(propert=
y) user: {&amp;#10;    name: string;&amp;#10;    avatar: string;&amp;#10;}"=
>user</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:<=
/span><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D=
"color: var(--shiki-token-keyword)">await</span><span style=3D"color: var(-=
-shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-constan=
t)"><data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#1=
0;import db">db</data-lsp></span><span style=3D"color: var(--shiki-token-fu=
nction)">.<data-lsp lsp=3D"function getUser(sessionid: string | undefined):=
 Promise&amp;lt;{&amp;#10;    name: string;&amp;#10;    avatar: string;&amp=
;#10;}>">getUser</data-lsp></span><span style=3D"color: var(--shiki-color-t=
ext)">(<data-lsp lsp=3D"const sessionid: string | undefined">sessionid</dat=
a-lsp>)</span></div><div class=3D"line"><span style=3D"color: var(--shiki-c=
olor-text)">	};</span></div><div class=3D"line"><span style=3D"color: var(-=
-shiki-color-text)">}</span></div></code></div></pre><button id=3D"copy-to-=
clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><sv=
g class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=
=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><div class=
=3D"ts-version copy-code-block code-block"><span class=3D"filename">src/rou=
tes/+layout.server.ts</span><pre class=3D"shiki twoslash lsp" style=3D"back=
ground-color: var(--shiki-color-background); color: var(--shiki-color-text)=
"><div class=3D"language-id">ts</div><div class=3D"code-container"><code><d=
iv class=3D"line"><span style=3D"color: var(--shiki-token-keyword)">import<=
/span><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D=
"color: var(--shiki-token-constant)">*</span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=
as</span><span style=3D"color: var(--shiki-color-text)"> <data-lsp lsp=3D"(=
alias) module &quot;$lib/server/database&quot;&amp;#10;import db">db</data-=
lsp> </span><span style=3D"color: var(--shiki-token-keyword)">from</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-string-expression)">'$lib/server/database'</span><span st=
yle=3D"color: var(--shiki-color-text)">;</span></div><div class=3D"line"><s=
pan style=3D"color: var(--shiki-token-keyword)">import</span><span style=3D=
"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-=
token-keyword)">type</span><span style=3D"color: var(--shiki-color-text)"> =
{ <data-lsp lsp=3D"(alias) type LayoutServerLoad =3D (event: Kit.ServerLoad=
Event&amp;lt;{}, Record&amp;lt;string, any>, string | null>) =3D> Kit.Maybe=
Promise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import LayoutServ=
erLoad">LayoutServerLoad</data-lsp> } </span><span style=3D"color: var(--sh=
iki-token-keyword)">from</span><span style=3D"color: var(--shiki-color-text=
)"> </span><span style=3D"color: var(--shiki-token-string-expression)">'./$=
types'</span><span style=3D"color: var(--shiki-color-text)">;</span></div><=
div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: LayoutServerLoad">load</data-lsp><=
/span><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type LayoutServerLoad =3D (eve=
nt: Kit.ServerLoadEvent&amp;lt;{}, Record&amp;lt;string, any>, string | nul=
l>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10=
;import LayoutServerLoad">LayoutServerLoad</data-lsp></span><span style=3D"=
color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-t=
oken-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> </=
span><span style=3D"color: var(--shiki-token-keyword)">async</span><span st=
yle=3D"color: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(parameter) coo=
kies: Cookies">cookies</data-lsp> }) </span><span style=3D"color: var(--shi=
ki-token-keyword)">=3D&gt;</span><span style=3D"color: var(--shiki-color-te=
xt)"> {</span></div><div class=3D"line"><span style=3D"color: var(--shiki-c=
olor-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">const=
</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"const sessionid: s=
tring | undefined">sessionid</data-lsp></span><span style=3D"color: var(--s=
hiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)"=
>=3D</span><span style=3D"color: var(--shiki-color-text)"> </span><span sty=
le=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(parameter) cook=
ies: Cookies">cookies</data-lsp></span><span style=3D"color: var(--shiki-to=
ken-function)">.<data-lsp lsp=3D"(method) Cookies.get(name: string, opts?: =
CookieParseOptions | undefined): string | undefined">get</data-lsp></span><=
span style=3D"color: var(--shiki-color-text)">(</span><span style=3D"color:=
 var(--shiki-token-string-expression)">'sessionid'</span><span style=3D"col=
or: var(--shiki-color-text)">);</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"=
><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(propert=
y) user: {&amp;#10;    name: string;&amp;#10;    avatar: string;&amp;#10;}"=
>user</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:<=
/span><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D=
"color: var(--shiki-token-keyword)">await</span><span style=3D"color: var(-=
-shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-constan=
t)"><data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#1=
0;import db">db</data-lsp></span><span style=3D"color: var(--shiki-token-fu=
nction)">.<data-lsp lsp=3D"function getUser(sessionid: string | undefined):=
 Promise&amp;lt;{&amp;#10;    name: string;&amp;#10;    avatar: string;&amp=
;#10;}>">getUser</data-lsp></span><span style=3D"color: var(--shiki-color-t=
ext)">(<data-lsp lsp=3D"const sessionid: string | undefined">sessionid</dat=
a-lsp>)</span><span style=3D"color: var(--shiki-token-punctuation)">,</span=
></div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	=
};</span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-=
text)">};</span></div></code></div></pre><button id=3D"copy-to-clipboard-bu=
tton" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"i=
con svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-c=
lipboard-empty"></use></svg></span></button></div><p>Cookies will only be p=
assed through the provided <code>fetch</code> function if the target host i=
s the same as the SvelteKit application or a more specific subdomain of it.=
</p>
<p>For example, if SvelteKit is serving my.domain.com:</p>
<ul>
<li>domain.com WILL NOT receive cookies</li>
<li>my.domain.com WILL receive cookies</li>
<li>api.domain.com WILL NOT receive cookies</li>
<li>sub.my.domain.com WILL receive cookies</li>
</ul>
<p>Other cookies will not be passed when <code>credentials: 'include'</code=
> is set, because SvelteKit does not know which domain which cookie belongs=
 to (the browser does not pass this information along), so it's not safe to=
 forward any of them. Use the <a href=3D"https://kit.svelte.dev/docs/hooks#=
server-hooks-handlefetch">handleFetch hook</a> to work around it.</p>
<h2 id=3D"headers">Headers<a href=3D"https://kit.svelte.dev/docs/load#heade=
rs" class=3D"permalink"><span class=3D"visually-hidden">permalink</span></a=
></h2><p>Both server and universal <code>load</code> functions have access =
to a <code>setHeaders</code> function that, when running on the server, can=
 set headers for the response. (When running in the browser, <code>setHeade=
rs</code> has no effect.) This is useful if you want the page to be cached,=
 for example:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/products/+page.js</span><pre class=3D"shiki twoslash lsp" sty=
le=3D"background-color: var(--shiki-color-background); color: var(--shiki-c=
olor-text)"><div class=3D"language-id">ts</div><div class=3D"code-container=
"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-comment=
)">/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span=
><span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"c=
olor: var(--shiki-token-function)">{import('./$types').PageLoad}</span><spa=
n style=3D"color: var(--shiki-token-comment)"> */</span></div><div class=3D=
"line"><span style=3D"color: var(--shiki-token-keyword)">export</span><span=
 style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var=
(--shiki-token-keyword)">async</span><span style=3D"color: var(--shiki-colo=
r-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">function=
</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(even=
t: LoadEvent&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;st=
ring, any>, string | null>): MaybePromise&amp;lt;void | Record&amp;lt;strin=
g, any>>">load</data-lsp></span><span style=3D"color: var(--shiki-color-tex=
t)">({ <data-lsp lsp=3D"(parameter) fetch: (input: RequestInfo | URL, init?=
: RequestInit | undefined) =3D> Promise&amp;lt;Response>">fetch</data-lsp><=
/span><span style=3D"color: var(--shiki-token-punctuation)">,</span><span s=
tyle=3D"color: var(--shiki-color-text)"> <data-lsp lsp=3D"(parameter) setHe=
aders: (headers: Record&amp;lt;string, string>) =3D> void">setHeaders</data=
-lsp> }) {</span></div><div class=3D"line"><span style=3D"color: var(--shik=
i-color-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">co=
nst</span><span style=3D"color: var(--shiki-color-text)"> </span><span styl=
e=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"const url: &quot;=
https://cms.example.com/products.json&quot;">url</data-lsp></span><span sty=
le=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--s=
hiki-token-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text=
)"> </span><span style=3D"color: var(--shiki-token-string-expression)">`htt=
ps://cms.example.com/products.json`</span><span style=3D"color: var(--shiki=
-color-text)">;</span></div><div class=3D"line"><span style=3D"color: var(-=
-shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-keyword=
)">const</span><span style=3D"color: var(--shiki-color-text)"> </span><span=
 style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"const respon=
se: Response">response</data-lsp></span><span style=3D"color: var(--shiki-c=
olor-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=3D</=
span><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"=
color: var(--shiki-token-keyword)">await</span><span style=3D"color: var(--=
shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-function=
)"><data-lsp lsp=3D"(parameter) fetch: (input: RequestInfo | URL, init?: Re=
questInit | undefined) =3D> Promise&amp;lt;Response>">fetch</data-lsp></spa=
n><span style=3D"color: var(--shiki-color-text)">(<data-lsp lsp=3D"const ur=
l: &quot;https://cms.example.com/products.json&quot;">url</data-lsp>);</spa=
n></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-comment)">// cache the page f=
or the same length of time</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-to=
ken-comment)">// as the underlying data</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: v=
ar(--shiki-token-function)"><data-lsp lsp=3D"(parameter) setHeaders: (heade=
rs: Record&amp;lt;string, string>) =3D> void">setHeaders</data-lsp></span><=
span style=3D"color: var(--shiki-color-text)">({</span></div><div class=3D"=
line"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(pr=
operty) age: string | null">age</data-lsp></span><span style=3D"color: var(=
--shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-tex=
t)"> </span><span style=3D"color: var(--shiki-token-constant)"><data-lsp ls=
p=3D"const response: Response">response</data-lsp></span><span style=3D"col=
or: var(--shiki-token-function)">.</span><span style=3D"color: var(--shiki-=
token-constant)"><data-lsp lsp=3D"(property) Response.headers: Headers">hea=
ders</data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<=
data-lsp lsp=3D"(method) Headers.get(name: string): string | null">get</dat=
a-lsp></span><span style=3D"color: var(--shiki-color-text)">(</span><span s=
tyle=3D"color: var(--shiki-token-string-expression)">'age'</span><span styl=
e=3D"color: var(--shiki-color-text)">)</span><span style=3D"color: var(--sh=
iki-token-punctuation)">,</span></div><div class=3D"line"><span style=3D"co=
lor: var(--shiki-color-text)">		</span><span style=3D"color: var(--shiki-to=
ken-string-expression)">'cache-control'</span><span style=3D"color: var(--s=
hiki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-text)"=
> </span><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=
=3D"const response: Response">response</data-lsp></span><span style=3D"colo=
r: var(--shiki-token-function)">.</span><span style=3D"color: var(--shiki-t=
oken-constant)"><data-lsp lsp=3D"(property) Response.headers: Headers">head=
ers</data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<d=
ata-lsp lsp=3D"(method) Headers.get(name: string): string | null">get</data=
-lsp></span><span style=3D"color: var(--shiki-color-text)">(</span><span st=
yle=3D"color: var(--shiki-token-string-expression)">'cache-control'</span><=
span style=3D"color: var(--shiki-color-text)">)</span></div><div class=3D"l=
ine"><span style=3D"color: var(--shiki-color-text)">	});</span></div><div c=
lass=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(=
--shiki-token-constant)"><data-lsp lsp=3D"const response: Response">respons=
e</data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<dat=
a-lsp lsp=3D"(method) Body.json(): Promise&amp;lt;any>">json</data-lsp></sp=
an><span style=3D"color: var(--shiki-color-text)">();</span></div><div clas=
s=3D"line"><span style=3D"color: var(--shiki-color-text)">}</span></div></c=
ode></div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj=
3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=
=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></=
svg></span></button></div><div class=3D"ts-version copy-code-block code-blo=
ck"><span class=3D"filename">src/routes/products/+page.ts</span><pre class=
=3D"shiki twoslash lsp" style=3D"background-color: var(--shiki-color-backgr=
ound); color: var(--shiki-color-text)"><div class=3D"language-id">ts</div><=
div class=3D"code-container"><code><div class=3D"line"><span style=3D"color=
: var(--shiki-token-keyword)">import</span><span style=3D"color: var(--shik=
i-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">ty=
pe</span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D=
"(alias) type PageLoad =3D (event: Kit.LoadEvent&amp;lt;{}, Record&amp;lt;s=
tring, any> | null, Record&amp;lt;string, any>, string | null>) =3D> Kit.Ma=
ybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import PageLoa=
d">PageLoad</data-lsp> } </span><span style=3D"color: var(--shiki-token-key=
word)">from</span><span style=3D"color: var(--shiki-color-text)"> </span><s=
pan style=3D"color: var(--shiki-token-string-expression)">'./$types'</span>=
<span style=3D"color: var(--shiki-color-text)">;</span></div><div class=3D"=
line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageLoad">load</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEven=
t&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, any>,=
 string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, =
any>>&amp;#10;import PageLoad">PageLoad</data-lsp></span><span style=3D"col=
or: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-toke=
n-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> </spa=
n><span style=3D"color: var(--shiki-token-keyword)">async</span><span style=
=3D"color: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(parameter) fetch:=
 (input: RequestInfo | URL, init?: RequestInit | undefined) =3D> Promise&am=
p;lt;Response>">fetch</data-lsp></span><span style=3D"color: var(--shiki-to=
ken-punctuation)">,</span><span style=3D"color: var(--shiki-color-text)"> <=
data-lsp lsp=3D"(parameter) setHeaders: (headers: Record&amp;lt;string, str=
ing>) =3D> void">setHeaders</data-lsp> }) </span><span style=3D"color: var(=
--shiki-token-keyword)">=3D&gt;</span><span style=3D"color: var(--shiki-col=
or-text)"> {</span></div><div class=3D"line"><span style=3D"color: var(--sh=
iki-color-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">=
const</span><span style=3D"color: var(--shiki-color-text)"> </span><span st=
yle=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"const url: &quo=
t;https://cms.example.com/products.json&quot;">url</data-lsp></span><span s=
tyle=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(-=
-shiki-token-keyword)">=3D</span><span style=3D"color: var(--shiki-color-te=
xt)"> </span><span style=3D"color: var(--shiki-token-string-expression)">`h=
ttps://cms.example.com/products.json`</span><span style=3D"color: var(--shi=
ki-color-text)">;</span></div><div class=3D"line"><span style=3D"color: var=
(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-keywo=
rd)">const</span><span style=3D"color: var(--shiki-color-text)"> </span><sp=
an style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"const resp=
onse: Response">response</data-lsp></span><span style=3D"color: var(--shiki=
-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=3D=
</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-keyword)">await</span><span style=3D"color: va=
r(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-func=
tion)"><data-lsp lsp=3D"(parameter) fetch: (input: RequestInfo | URL, init?=
: RequestInit | undefined) =3D> Promise&amp;lt;Response>">fetch</data-lsp><=
/span><span style=3D"color: var(--shiki-color-text)">(<data-lsp lsp=3D"cons=
t url: &quot;https://cms.example.com/products.json&quot;">url</data-lsp>);<=
/span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-comment)">// cache the page f=
or the same length of time</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-to=
ken-comment)">// as the underlying data</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: v=
ar(--shiki-token-function)"><data-lsp lsp=3D"(parameter) setHeaders: (heade=
rs: Record&amp;lt;string, string>) =3D> void">setHeaders</data-lsp></span><=
span style=3D"color: var(--shiki-color-text)">({</span></div><div class=3D"=
line"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(pr=
operty) age: string | null">age</data-lsp></span><span style=3D"color: var(=
--shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-tex=
t)"> </span><span style=3D"color: var(--shiki-token-constant)"><data-lsp ls=
p=3D"const response: Response">response</data-lsp></span><span style=3D"col=
or: var(--shiki-token-function)">.</span><span style=3D"color: var(--shiki-=
token-constant)"><data-lsp lsp=3D"(property) Response.headers: Headers">hea=
ders</data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<=
data-lsp lsp=3D"(method) Headers.get(name: string): string | null">get</dat=
a-lsp></span><span style=3D"color: var(--shiki-color-text)">(</span><span s=
tyle=3D"color: var(--shiki-token-string-expression)">'age'</span><span styl=
e=3D"color: var(--shiki-color-text)">)</span><span style=3D"color: var(--sh=
iki-token-punctuation)">,</span></div><div class=3D"line"><span style=3D"co=
lor: var(--shiki-color-text)">		</span><span style=3D"color: var(--shiki-to=
ken-string-expression)">'cache-control'</span><span style=3D"color: var(--s=
hiki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-text)"=
> </span><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=
=3D"const response: Response">response</data-lsp></span><span style=3D"colo=
r: var(--shiki-token-function)">.</span><span style=3D"color: var(--shiki-t=
oken-constant)"><data-lsp lsp=3D"(property) Response.headers: Headers">head=
ers</data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<d=
ata-lsp lsp=3D"(method) Headers.get(name: string): string | null">get</data=
-lsp></span><span style=3D"color: var(--shiki-color-text)">(</span><span st=
yle=3D"color: var(--shiki-token-string-expression)">'cache-control'</span><=
span style=3D"color: var(--shiki-color-text)">)</span><span style=3D"color:=
 var(--shiki-token-punctuation)">,</span></div><div class=3D"line"><span st=
yle=3D"color: var(--shiki-color-text)">	});</span></div><div class=3D"line"=
>
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(=
--shiki-token-constant)"><data-lsp lsp=3D"const response: Response">respons=
e</data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<dat=
a-lsp lsp=3D"(method) Body.json(): Promise&amp;lt;any>">json</data-lsp></sp=
an><span style=3D"color: var(--shiki-color-text)">();</span></div><div clas=
s=3D"line"><span style=3D"color: var(--shiki-color-text)">};</span></div></=
code></div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4c=
j3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=
=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></=
svg></span></button></div><p>Setting the same header multiple times (even i=
n separate <code>load</code> functions) is an error =E2=80=94 you can only =
set a given header once. You cannot add a <code>set-cookie</code> header wi=
th <code>setHeaders</code> =E2=80=94&nbsp;use <code>cookies.set(name, value=
, options)</code> instead.</p>
<h2 id=3D"using-parent-data">Using parent data<a href=3D"https://kit.svelte=
.dev/docs/load#using-parent-data" class=3D"permalink"><span class=3D"visual=
ly-hidden">permalink</span></a></h2><p>Occasionally it's useful for a <code=
>load</code> function to access data from a parent <code>load</code> functi=
on, which can be done with <code>await parent()</code>:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/+layout.js</span><pre class=3D"shiki twoslash lsp" style=3D"b=
ackground-color: var(--shiki-color-background); color: var(--shiki-color-te=
xt)"><div class=3D"language-id">ts</div><div class=3D"code-container"><code=
><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)">/** =
</span><span style=3D"color: var(--shiki-token-keyword)">@type</span><span =
style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"color: v=
ar(--shiki-token-function)">{import('./$types').LayoutLoad}</span><span sty=
le=3D"color: var(--shiki-token-comment)"> */</span></div><div class=3D"line=
"><span style=3D"color: var(--shiki-token-keyword)">export</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-keyword)">function</span><span style=3D"color: var(--shiki-color-=
text)"> </span><span style=3D"color: var(--shiki-token-function)"><data-lsp=
 lsp=3D"function load(event: LoadEvent&amp;lt;{}, Record&amp;lt;string, any=
> | null, Record&amp;lt;string, any>, string | null>): MaybePromise&amp;lt;=
void | Record&amp;lt;string, any>>">load</data-lsp></span><span style=3D"co=
lor: var(--shiki-color-text)">() {</span></div><div class=3D"line"><span st=
yle=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: var(--=
shiki-token-keyword)">return</span><span style=3D"color: var(--shiki-color-=
text)"> { <data-lsp lsp=3D"(property) a: number">a</data-lsp></span><span s=
tyle=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"color: va=
r(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-cons=
tant)">1</span><span style=3D"color: var(--shiki-color-text)"> };</span></d=
iv><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">}</sp=
an></div></code></div></pre><button id=3D"copy-to-clipboard-button" class=
=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-=
5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-em=
pty"></use></svg></span></button></div><div class=3D"ts-version copy-code-b=
lock code-block"><span class=3D"filename">src/routes/+layout.ts</span><pre =
class=3D"shiki twoslash lsp" style=3D"background-color: var(--shiki-color-b=
ackground); color: var(--shiki-color-text)"><div class=3D"language-id">ts</=
div><div class=3D"code-container"><code><div class=3D"line"><span style=3D"=
color: var(--shiki-token-keyword)">import</span><span style=3D"color: var(-=
-shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword=
)">type</span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp l=
sp=3D"(alias) type LayoutLoad =3D (event: Kit.LoadEvent&amp;lt;{}, Record&a=
mp;lt;string, any> | null, Record&amp;lt;string, any>, string | null>) =3D>=
 Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import =
LayoutLoad">LayoutLoad</data-lsp> } </span><span style=3D"color: var(--shik=
i-token-keyword)">from</span><span style=3D"color: var(--shiki-color-text)"=
> </span><span style=3D"color: var(--shiki-token-string-expression)">'./$ty=
pes'</span><span style=3D"color: var(--shiki-color-text)">;</span></div><di=
v class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: LayoutLoad">load</data-lsp></span>=
<span style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"co=
lor: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-tok=
en-function)"><data-lsp lsp=3D"(alias) type LayoutLoad =3D (event: Kit.Load=
Event&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, a=
ny>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;stri=
ng, any>>&amp;#10;import LayoutLoad">LayoutLoad</data-lsp></span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)=
"> () </span><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</spa=
n><span style=3D"color: var(--shiki-color-text)"> {</span></div><div class=
=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><span styl=
e=3D"color: var(--shiki-token-keyword)">return</span><span style=3D"color: =
var(--shiki-color-text)"> { <data-lsp lsp=3D"(property) a: number">a</data-=
lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</span><span =
style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(=
--shiki-token-constant)">1</span><span style=3D"color: var(--shiki-color-te=
xt)"> };</span></div><div class=3D"line"><span style=3D"color: var(--shiki-=
color-text)">};</span></div></code></div></pre><button id=3D"copy-to-clipbo=
ard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg clas=
s=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#cop=
y-to-clipboard-empty"></use></svg></span></button></div><div class=3D"js-ve=
rsion copy-code-block code-block"><span class=3D"filename">src/routes/abc/+=
layout.js</span><pre class=3D"shiki twoslash lsp" style=3D"background-color=
: var(--shiki-color-background); color: var(--shiki-color-text)"><div class=
=3D"language-id">ts</div><div class=3D"code-container"><code><div class=3D"=
line"><span style=3D"color: var(--shiki-token-comment)">/** </span><span st=
yle=3D"color: var(--shiki-token-keyword)">@type</span><span style=3D"color:=
 var(--shiki-token-comment)"> </span><span style=3D"color: var(--shiki-toke=
n-function)">{import('./$types').LayoutLoad}</span><span style=3D"color: va=
r(--shiki-token-comment)"> */</span></div><div class=3D"line"><span style=
=3D"color: var(--shiki-token-keyword)">export</span><span style=3D"color: v=
ar(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-key=
word)">async</span><span style=3D"color: var(--shiki-color-text)"> </span><=
span style=3D"color: var(--shiki-token-keyword)">function</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"function load(event: LoadEvent&amp;lt;=
{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, any>, string |=
 null>): MaybePromise&amp;lt;void | Record&amp;lt;string, any>>">load</data=
-lsp></span><span style=3D"color: var(--shiki-color-text)">({ <data-lsp lsp=
=3D"(parameter) parent: () =3D> Promise&amp;lt;Record&amp;lt;string, any>>"=
>parent</data-lsp> }) {</span></div><div class=3D"line"><span style=3D"colo=
r: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token=
-keyword)">const</span><span style=3D"color: var(--shiki-color-text)"> { </=
span><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"co=
nst a: any">a</data-lsp></span><span style=3D"color: var(--shiki-color-text=
)"> } </span><span style=3D"color: var(--shiki-token-keyword)">=3D</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-keyword)">await</span><span style=3D"color: var(--shiki-c=
olor-text)"> </span><span style=3D"color: var(--shiki-token-function)"><dat=
a-lsp lsp=3D"(parameter) parent: () =3D> Promise&amp;lt;Record&amp;lt;strin=
g, any>>">parent</data-lsp></span><span style=3D"color: var(--shiki-color-t=
ext)">();</span></div><div class=3D"line"><span style=3D"color: var(--shiki=
-color-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">ret=
urn</span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=
=3D"(property) b: any">b</data-lsp></span><span style=3D"color: var(--shiki=
-token-keyword)">:</span><span style=3D"color: var(--shiki-color-text)"> <d=
ata-lsp lsp=3D"const a: any">a</data-lsp> </span><span style=3D"color: var(=
--shiki-token-keyword)">+</span><span style=3D"color: var(--shiki-color-tex=
t)"> </span><span style=3D"color: var(--shiki-token-constant)">1</span><spa=
n style=3D"color: var(--shiki-color-text)"> };</span></div><div class=3D"li=
ne"><span style=3D"color: var(--shiki-color-text)">}</span></div></code></d=
iv></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><s=
pan class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" =
height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></sp=
an></button></div><div class=3D"ts-version copy-code-block code-block"><spa=
n class=3D"filename">src/routes/abc/+layout.ts</span><pre class=3D"shiki tw=
oslash lsp" style=3D"background-color: var(--shiki-color-background); color=
: var(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D=
"code-container"><code><div class=3D"line"><span style=3D"color: var(--shik=
i-token-keyword)">import</span><span style=3D"color: var(--shiki-color-text=
)"> </span><span style=3D"color: var(--shiki-token-keyword)">type</span><sp=
an style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) typ=
e LayoutLoad =3D (event: Kit.LoadEvent&amp;lt;{}, Record&amp;lt;string, any=
> | null, Record&amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise=
&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import LayoutLoad">Layou=
tLoad</data-lsp> } </span><span style=3D"color: var(--shiki-token-keyword)"=
>from</span><span style=3D"color: var(--shiki-color-text)"> </span><span st=
yle=3D"color: var(--shiki-token-string-expression)">'./$types'</span><span =
style=3D"color: var(--shiki-color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: LayoutLoad">load</data-lsp></span>=
<span style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"co=
lor: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-tok=
en-function)"><data-lsp lsp=3D"(alias) type LayoutLoad =3D (event: Kit.Load=
Event&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, a=
ny>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;stri=
ng, any>>&amp;#10;import LayoutLoad">LayoutLoad</data-lsp></span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)=
"> </span><span style=3D"color: var(--shiki-token-keyword)">async</span><sp=
an style=3D"color: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(parameter=
) parent: () =3D> Promise&amp;lt;Record&amp;lt;string, any>>">parent</data-=
lsp> }) </span><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</s=
pan><span style=3D"color: var(--shiki-color-text)"> {</span></div><div clas=
s=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><span sty=
le=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"color: =
var(--shiki-color-text)"> { </span><span style=3D"color: var(--shiki-token-=
constant)"><data-lsp lsp=3D"const a: any">a</data-lsp></span><span style=3D=
"color: var(--shiki-color-text)"> } </span><span style=3D"color: var(--shik=
i-token-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)">=
 </span><span style=3D"color: var(--shiki-token-keyword)">await</span><span=
 style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var=
(--shiki-token-function)"><data-lsp lsp=3D"(parameter) parent: () =3D> Prom=
ise&amp;lt;Record&amp;lt;string, any>>">parent</data-lsp></span><span style=
=3D"color: var(--shiki-color-text)">();</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: v=
ar(--shiki-token-keyword)">return</span><span style=3D"color: var(--shiki-c=
olor-text)"> { <data-lsp lsp=3D"(property) b: any">b</data-lsp></span><span=
 style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"color: =
var(--shiki-color-text)"> <data-lsp lsp=3D"const a: any">a</data-lsp> </spa=
n><span style=3D"color: var(--shiki-token-keyword)">+</span><span style=3D"=
color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-t=
oken-constant)">1</span><span style=3D"color: var(--shiki-color-text)"> };<=
/span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-tex=
t)">};</span></div></code></div></pre><button id=3D"copy-to-clipboard-butto=
n" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon=
 svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clip=
board-empty"></use></svg></span></button></div><div class=3D"js-version cop=
y-code-block code-block"><span class=3D"filename">src/routes/abc/+page.js</=
span><pre class=3D"shiki twoslash lsp" style=3D"background-color: var(--shi=
ki-color-background); color: var(--shiki-color-text)"><div class=3D"languag=
e-id">ts</div><div class=3D"code-container"><code><div class=3D"line"><span=
 style=3D"color: var(--shiki-token-comment)">/** </span><span style=3D"colo=
r: var(--shiki-token-keyword)">@type</span><span style=3D"color: var(--shik=
i-token-comment)"> </span><span style=3D"color: var(--shiki-token-function)=
">{import('./$types').PageLoad}</span><span style=3D"color: var(--shiki-tok=
en-comment)"> */</span></div><div class=3D"line"><span style=3D"color: var(=
--shiki-token-keyword)">export</span><span style=3D"color: var(--shiki-colo=
r-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">async</s=
pan><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"c=
olor: var(--shiki-token-keyword)">function</span><span style=3D"color: var(=
--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-functi=
on)"><data-lsp lsp=3D"function load(event: LoadEvent&amp;lt;{}, Record&amp;=
lt;string, any> | null, Record&amp;lt;string, any>, string | null>): MaybeP=
romise&amp;lt;void | Record&amp;lt;string, any>>">load</data-lsp></span><sp=
an style=3D"color: var(--shiki-color-text)">({ <data-lsp lsp=3D"(parameter)=
 parent: () =3D> Promise&amp;lt;Record&amp;lt;string, any>>">parent</data-l=
sp> }) {</span></div><div class=3D"line"><span style=3D"color: var(--shiki-=
color-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">cons=
t</span><span style=3D"color: var(--shiki-color-text)"> { </span><span styl=
e=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"const a: any">a</=
data-lsp></span><span style=3D"color: var(--shiki-token-punctuation)">,</sp=
an><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"co=
lor: var(--shiki-token-constant)"><data-lsp lsp=3D"const b: any">b</data-ls=
p></span><span style=3D"color: var(--shiki-color-text)"> } </span><span sty=
le=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color: va=
r(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyw=
ord)">await</span><span style=3D"color: var(--shiki-color-text)"> </span><s=
pan style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"(paramete=
r) parent: () =3D> Promise&amp;lt;Record&amp;lt;string, any>>">parent</data=
-lsp></span><span style=3D"color: var(--shiki-color-text)">();</span></div>=
<div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span>=
<span style=3D"color: var(--shiki-token-keyword)">return</span><span style=
=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(property) c: any">=
c</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</spa=
n><span style=3D"color: var(--shiki-color-text)"> <data-lsp lsp=3D"const a:=
 any">a</data-lsp> </span><span style=3D"color: var(--shiki-token-keyword)"=
>+</span><span style=3D"color: var(--shiki-color-text)"> <data-lsp lsp=3D"c=
onst b: any">b</data-lsp> };</span></div><div class=3D"line"><span style=3D=
"color: var(--shiki-color-text)">}</span></div></code></div></pre><button i=
d=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelt=
e-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use=
 xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div>=
<div class=3D"ts-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/abc/+page.ts</span><pre class=3D"shiki twoslash lsp" style=3D=
"background-color: var(--shiki-color-background); color: var(--shiki-color-=
text)"><div class=3D"language-id">ts</div><div class=3D"code-container"><co=
de><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)">im=
port</span><span style=3D"color: var(--shiki-color-text)"> </span><span sty=
le=3D"color: var(--shiki-token-keyword)">type</span><span style=3D"color: v=
ar(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type PageLoad =3D (even=
t: Kit.LoadEvent&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;l=
t;string, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&=
amp;lt;string, any>>&amp;#10;import PageLoad">PageLoad</data-lsp> } </span>=
<span style=3D"color: var(--shiki-token-keyword)">from</span><span style=3D=
"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-=
token-string-expression)">'./$types'</span><span style=3D"color: var(--shik=
i-color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageLoad">load</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEven=
t&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, any>,=
 string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, =
any>>&amp;#10;import PageLoad">PageLoad</data-lsp></span><span style=3D"col=
or: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-toke=
n-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> </spa=
n><span style=3D"color: var(--shiki-token-keyword)">async</span><span style=
=3D"color: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(parameter) parent=
: () =3D> Promise&amp;lt;Record&amp;lt;string, any>>">parent</data-lsp> }) =
</span><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><spa=
n style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"lin=
e"><span style=3D"color: var(--shiki-color-text)">	</span><span style=3D"co=
lor: var(--shiki-token-keyword)">const</span><span style=3D"color: var(--sh=
iki-color-text)"> { </span><span style=3D"color: var(--shiki-token-constant=
)"><data-lsp lsp=3D"const a: any">a</data-lsp></span><span style=3D"color: =
var(--shiki-token-punctuation)">,</span><span style=3D"color: var(--shiki-c=
olor-text)"> </span><span style=3D"color: var(--shiki-token-constant)"><dat=
a-lsp lsp=3D"const b: any">b</data-lsp></span><span style=3D"color: var(--s=
hiki-color-text)"> } </span><span style=3D"color: var(--shiki-token-keyword=
)">=3D</span><span style=3D"color: var(--shiki-color-text)"> </span><span s=
tyle=3D"color: var(--shiki-token-keyword)">await</span><span style=3D"color=
: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-=
function)"><data-lsp lsp=3D"(parameter) parent: () =3D> Promise&amp;lt;Reco=
rd&amp;lt;string, any>>">parent</data-lsp></span><span style=3D"color: var(=
--shiki-color-text)">();</span></div><div class=3D"line"><span style=3D"col=
or: var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-toke=
n-keyword)">return</span><span style=3D"color: var(--shiki-color-text)"> { =
<data-lsp lsp=3D"(property) c: any">c</data-lsp></span><span style=3D"color=
: var(--shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-col=
or-text)"> <data-lsp lsp=3D"const a: any">a</data-lsp> </span><span style=
=3D"color: var(--shiki-token-keyword)">+</span><span style=3D"color: var(--=
shiki-color-text)"> <data-lsp lsp=3D"const b: any">b</data-lsp> };</span></=
div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">};</=
span></div></code></div></pre><button id=3D"copy-to-clipboard-button" class=
=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-=
5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-em=
pty"></use></svg></span></button></div><div class=3D"js-version copy-code-b=
lock code-block"><span class=3D"filename">src/routes/abc/+page.svelte</span=
><pre class=3D"shiki" style=3D"background-color: var(--shiki-color-backgrou=
nd)"><code><span class=3D"line"><span style=3D"color: var(--shiki-color-tex=
t)">&lt;</span><span style=3D"color: var(--shiki-token-string-expression)">=
script</span><span style=3D"color: var(--shiki-color-text)">&gt;</span></sp=
an>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-comment)">/** </span><span style=
=3D"color: var(--shiki-token-keyword)">@type</span><span style=3D"color: va=
r(--shiki-token-comment)"> </span><span style=3D"color: var(--shiki-token-f=
unction)">{import('./$types').PageData}</span><span style=3D"color: var(--s=
hiki-token-comment)"> */</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-token-comment)">&lt;=
!-- renders `1 + 2 =3D 3` --&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">p</span><sp=
an style=3D"color: var(--shiki-color-text)">&gt;{</span><span style=3D"colo=
r: var(--shiki-token-constant)">data</span><span style=3D"color: var(--shik=
i-color-text)">.a} + {</span><span style=3D"color: var(--shiki-token-consta=
nt)">data</span><span style=3D"color: var(--shiki-color-text)">.b} =3D {</s=
pan><span style=3D"color: var(--shiki-token-constant)">data</span><span sty=
le=3D"color: var(--shiki-color-text)">.c}&lt;/</span><span style=3D"color: =
var(--shiki-token-string-expression)">p</span><span style=3D"color: var(--s=
hiki-color-text)">&gt;</span></span></code></pre><button id=3D"copy-to-clip=
board-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg cl=
ass=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#c=
opy-to-clipboard-empty"></use></svg></span></button></div><div class=3D"ts-=
version copy-code-block code-block"><span class=3D"filename">src/routes/abc=
/+page.svelte</span><pre class=3D"shiki" style=3D"background-color: var(--s=
hiki-color-background)"><code><span class=3D"line"><span style=3D"color: va=
r(--shiki-color-text)">&lt;</span><span style=3D"color: var(--shiki-token-s=
tring-expression)">script</span><span style=3D"color: var(--shiki-color-tex=
t)"> </span><span style=3D"color: var(--shiki-token-function)">lang</span><=
span style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"c=
olor: var(--shiki-token-string-expression)">"ts"</span><span style=3D"color=
: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">type</span><span style=3D"color: var(--shiki-color-text)=
"> { PageData } </span><span style=3D"color: var(--shiki-token-keyword)">fr=
om</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-string-expression)">'./$types'</span><span sty=
le=3D"color: var(--shiki-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data</span><span style=3D"color: var(--shiki-token-keyword)">:</span><spa=
n style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: va=
r(--shiki-token-function)">PageData</span><span style=3D"color: var(--shiki=
-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-token-comment)">&lt;=
!-- renders `1 + 2 =3D 3` --&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">p</span><sp=
an style=3D"color: var(--shiki-color-text)">&gt;{</span><span style=3D"colo=
r: var(--shiki-token-constant)">data</span><span style=3D"color: var(--shik=
i-color-text)">.a} + {</span><span style=3D"color: var(--shiki-token-consta=
nt)">data</span><span style=3D"color: var(--shiki-color-text)">.b} =3D {</s=
pan><span style=3D"color: var(--shiki-token-constant)">data</span><span sty=
le=3D"color: var(--shiki-color-text)">.c}&lt;/</span><span style=3D"color: =
var(--shiki-token-string-expression)">p</span><span style=3D"color: var(--s=
hiki-color-text)">&gt;</span></span></code></pre><button id=3D"copy-to-clip=
board-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg cl=
ass=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#c=
opy-to-clipboard-empty"></use></svg></span></button></div><blockquote>
<p>Notice that the <code>load</code> function in <code>+page.js</code> rece=
ives the merged data from both layout <code>load</code> functions, not just=
 the immediate parent.</p>
</blockquote>
<p>Inside <code>+page.server.js</code> and <code>+layout.server.js</code>, =
<code>parent</code> returns data from parent <code>+layout.server.js</code>=
 files.</p>
<p>In <code>+page.js</code> or <code>+layout.js</code> it will return data =
from parent <code>+layout.js</code> files. However, a missing <code>+layout=
.js</code> is treated as a <code>({ data }) =3D&gt; data</code> function, m=
eaning that it will also return data from parent <code>+layout.server.js</c=
ode> files that are not 'shadowed' by a <code>+layout.js</code> file</p>
<p>Take care not to introduce waterfalls when using <code>await parent()</c=
ode>. Here, for example, <code>getData(params)</code> does not depend on th=
e result of calling <code>parent()</code>, so we should call it first to av=
oid a delayed render.</p>
<div class=3D"copy-code-block code-block"><span class=3D"filename">+page.js=
</span><pre class=3D"language-diff" style=3D"background-color: var(--shiki-=
color-background)"><code>/** @type {import('./$types').PageLoad} */
export async function load({ params, parent }) {
<span class=3D"deleted">	const parentData =3D await parent();
</span>	const data =3D await getData(params);
<span class=3D"inserted">	const parentData =3D await parent();
</span>
	return {
		...data
		meta: { ...parentData.meta, ...data.meta }
	};
}
</code></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib=
"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"=
20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg>=
</span></button></div><h2 id=3D"errors">Errors<a href=3D"https://kit.svelte=
.dev/docs/load#errors" class=3D"permalink"><span class=3D"visually-hidden">=
permalink</span></a></h2><p>If an error is thrown during <code>load</code>,=
 the nearest <a href=3D"https://kit.svelte.dev/docs/routing#error"><code>+e=
rror.svelte</code></a> will be rendered. For <a href=3D"https://kit.svelte.=
dev/docs/errors#expected-errors"><em>expected</em></a> errors, use the <cod=
e>error</code> helper from <code>@sveltejs/kit</code> to specify the HTTP s=
tatus code and an optional message:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/admin/+layout.server.js</span><pre class=3D"shiki twoslash ls=
p" style=3D"background-color: var(--shiki-color-background); color: var(--s=
hiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-con=
tainer"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-k=
eyword)">import</span><span style=3D"color: var(--shiki-color-text)"> { <da=
ta-lsp lsp=3D"(alias) function error(status: NumericRange&amp;lt;400, 599>,=
 body: App.Error): never (+1 overload)&amp;#10;import error">error</data-ls=
p> } </span><span style=3D"color: var(--shiki-token-keyword)">from</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-string-expression)">'@sveltejs/kit'</span><span style=3D"=
color: var(--shiki-color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').LayoutServerLoad}</spa=
n><span style=3D"color: var(--shiki-token-comment)"> */</span></div><div cl=
ass=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-keyword)">function</span><span style=3D"color: var(--s=
hiki-color-text)"> </span><span style=3D"color: var(--shiki-token-function)=
"><data-lsp lsp=3D"function load(event: ServerLoadEvent&amp;lt;{}, Record&a=
mp;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Record&amp;=
lt;string, any>>">load</data-lsp></span><span style=3D"color: var(--shiki-c=
olor-text)">({ <data-lsp lsp=3D"(parameter) locals: App.Locals">locals</dat=
a-lsp> }) {</span></div><div class=3D"line"><span style=3D"color: var(--shi=
ki-color-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">i=
f</span><span style=3D"color: var(--shiki-color-text)"> (</span><span style=
=3D"color: var(--shiki-token-keyword)">!</span><span style=3D"color: var(--=
shiki-token-constant)"><data-lsp lsp=3D"(parameter) locals: App.Locals">loc=
als</data-lsp></span><span style=3D"color: var(--shiki-color-text)">.<data-=
lsp lsp=3D"(property) App.Locals.user?: {&amp;#10;    name: string;&amp;#10=
;    isAdmin: boolean;&amp;#10;} | undefined">user</data-lsp>) {</span></di=
v><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</sp=
an><span style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"(ali=
as) error(status: NumericRange&amp;lt;400, 599>, body?: string | App.Error =
| undefined): never (+1 overload)&amp;#10;import error">error</data-lsp></s=
pan><span style=3D"color: var(--shiki-color-text)">(</span><span style=3D"c=
olor: var(--shiki-token-constant)">401</span><span style=3D"color: var(--sh=
iki-token-punctuation)">,</span><span style=3D"color: var(--shiki-color-tex=
t)"> </span><span style=3D"color: var(--shiki-token-string-expression)">'no=
t logged in'</span><span style=3D"color: var(--shiki-color-text)">);</span>=
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	}=
</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">if</span><span styl=
e=3D"color: var(--shiki-color-text)"> (</span><span style=3D"color: var(--s=
hiki-token-keyword)">!</span><span style=3D"color: var(--shiki-token-consta=
nt)"><data-lsp lsp=3D"(parameter) locals: App.Locals">locals</data-lsp></sp=
an><span style=3D"color: var(--shiki-color-text)">.</span><span style=3D"co=
lor: var(--shiki-token-constant)"><data-lsp lsp=3D"(property) App.Locals.us=
er?: {&amp;#10;    name: string;&amp;#10;    isAdmin: boolean;&amp;#10;}">u=
ser</data-lsp></span><span style=3D"color: var(--shiki-color-text)">.<data-=
lsp lsp=3D"(property) isAdmin: boolean">isAdmin</data-lsp>) {</span></div><=
div class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</span>=
<span style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"(alias)=
 error(status: NumericRange&amp;lt;400, 599>, body?: string | App.Error | u=
ndefined): never (+1 overload)&amp;#10;import error">error</data-lsp></span=
><span style=3D"color: var(--shiki-color-text)">(</span><span style=3D"colo=
r: var(--shiki-token-constant)">403</span><span style=3D"color: var(--shiki=
-token-punctuation)">,</span><span style=3D"color: var(--shiki-color-text)"=
> </span><span style=3D"color: var(--shiki-token-string-expression)">'not a=
n admin'</span><span style=3D"color: var(--shiki-color-text)">);</span></di=
v><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	}</sp=
an></div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)"=
>}</span></div></code></div></pre><button id=3D"copy-to-clipboard-button" c=
lass=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon sve=
lte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboar=
d-empty"></use></svg></span></button></div><div class=3D"ts-version copy-co=
de-block code-block"><span class=3D"filename">src/routes/admin/+layout.serv=
er.ts</span><pre class=3D"shiki twoslash lsp" style=3D"background-color: va=
r(--shiki-color-background); color: var(--shiki-color-text)"><div class=3D"=
language-id">ts</div><div class=3D"code-container"><code><div class=3D"line=
"><span style=3D"color: var(--shiki-token-keyword)">import</span><span styl=
e=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) function e=
rror(status: NumericRange&amp;lt;400, 599>, body: App.Error): never (+1 ove=
rload)&amp;#10;import error">error</data-lsp> } </span><span style=3D"color=
: var(--shiki-token-keyword)">from</span><span style=3D"color: var(--shiki-=
color-text)"> </span><span style=3D"color: var(--shiki-token-string-express=
ion)">'@sveltejs/kit'</span><span style=3D"color: var(--shiki-color-text)">=
;</span></div><div class=3D"line"><span style=3D"color: var(--shiki-token-k=
eyword)">import</span><span style=3D"color: var(--shiki-color-text)"> </spa=
n><span style=3D"color: var(--shiki-token-keyword)">type</span><span style=
=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type Layout=
ServerLoad =3D (event: Kit.ServerLoadEvent&amp;lt;{}, Record&amp;lt;string,=
 any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;st=
ring, any>>&amp;#10;import LayoutServerLoad">LayoutServerLoad</data-lsp> } =
</span><span style=3D"color: var(--shiki-token-keyword)">from</span><span s=
tyle=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(-=
-shiki-token-string-expression)">'./$types'</span><span style=3D"color: var=
(--shiki-color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: LayoutServerLoad">load</data-lsp><=
/span><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type LayoutServerLoad =3D (eve=
nt: Kit.ServerLoadEvent&amp;lt;{}, Record&amp;lt;string, any>, string | nul=
l>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10=
;import LayoutServerLoad">LayoutServerLoad</data-lsp></span><span style=3D"=
color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-t=
oken-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> ({=
 <data-lsp lsp=3D"(parameter) locals: App.Locals">locals</data-lsp> }) </sp=
an><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><span st=
yle=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"><=
span style=3D"color: var(--shiki-color-text)">	</span><span style=3D"color:=
 var(--shiki-token-keyword)">if</span><span style=3D"color: var(--shiki-col=
or-text)"> (</span><span style=3D"color: var(--shiki-token-keyword)">!</spa=
n><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(para=
meter) locals: App.Locals">locals</data-lsp></span><span style=3D"color: va=
r(--shiki-color-text)">.<data-lsp lsp=3D"(property) App.Locals.user?: {&amp=
;#10;    name: string;&amp;#10;    isAdmin: boolean;&amp;#10;} | undefined"=
>user</data-lsp>) {</span></div><div class=3D"line"><span style=3D"color: v=
ar(--shiki-color-text)">		</span><span style=3D"color: var(--shiki-token-fu=
nction)"><data-lsp lsp=3D"(alias) error(status: NumericRange&amp;lt;400, 59=
9>, body?: string | App.Error | undefined): never (+1 overload)&amp;#10;imp=
ort error">error</data-lsp></span><span style=3D"color: var(--shiki-color-t=
ext)">(</span><span style=3D"color: var(--shiki-token-constant)">401</span>=
<span style=3D"color: var(--shiki-token-punctuation)">,</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-string-expression)">'not logged in'</span><span style=3D"color: va=
r(--shiki-color-text)">);</span></div><div class=3D"line"><span style=3D"co=
lor: var(--shiki-color-text)">	}</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">if</span><span styl=
e=3D"color: var(--shiki-color-text)"> (</span><span style=3D"color: var(--s=
hiki-token-keyword)">!</span><span style=3D"color: var(--shiki-token-consta=
nt)"><data-lsp lsp=3D"(parameter) locals: App.Locals">locals</data-lsp></sp=
an><span style=3D"color: var(--shiki-color-text)">.</span><span style=3D"co=
lor: var(--shiki-token-constant)"><data-lsp lsp=3D"(property) App.Locals.us=
er?: {&amp;#10;    name: string;&amp;#10;    isAdmin: boolean;&amp;#10;}">u=
ser</data-lsp></span><span style=3D"color: var(--shiki-color-text)">.<data-=
lsp lsp=3D"(property) isAdmin: boolean">isAdmin</data-lsp>) {</span></div><=
div class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</span>=
<span style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"(alias)=
 error(status: NumericRange&amp;lt;400, 599>, body?: string | App.Error | u=
ndefined): never (+1 overload)&amp;#10;import error">error</data-lsp></span=
><span style=3D"color: var(--shiki-color-text)">(</span><span style=3D"colo=
r: var(--shiki-token-constant)">403</span><span style=3D"color: var(--shiki=
-token-punctuation)">,</span><span style=3D"color: var(--shiki-color-text)"=
> </span><span style=3D"color: var(--shiki-token-string-expression)">'not a=
n admin'</span><span style=3D"color: var(--shiki-color-text)">);</span></di=
v><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	}</sp=
an></div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)"=
>};</span></div></code></div></pre><button id=3D"copy-to-clipboard-button" =
class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon sv=
elte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboa=
rd-empty"></use></svg></span></button></div><p>Calling <code>error(...)</co=
de> will throw an exception, making it easy to stop execution from inside h=
elper functions.</p>
<p>If an <a href=3D"https://kit.svelte.dev/docs/errors#unexpected-errors"><=
em>unexpected</em></a> error is thrown, SvelteKit will invoke <a href=3D"ht=
tps://kit.svelte.dev/docs/hooks#shared-hooks-handleerror"><code>handleError=
</code></a> and treat it as a 500 Internal Error.</p>
<blockquote>
<p><a href=3D"https://kit.svelte.dev/docs/migrating-to-sveltekit-2#redirect=
-and-error-are-no-longer-thrown-by-you">In SvelteKit 1.x</a> you had to <co=
de>throw</code> the error yourself</p>
</blockquote>
<h2 id=3D"redirects">Redirects<a href=3D"https://kit.svelte.dev/docs/load#r=
edirects" class=3D"permalink"><span class=3D"visually-hidden">permalink</sp=
an></a></h2><p>To redirect users, use the <code>redirect</code> helper from=
 <code>@sveltejs/kit</code> to specify the location to which they should be=
 redirected alongside a <code>3xx</code> status code. Like <code>error(...)=
</code>, calling <code>redirect(...)</code> will throw an exception, making=
 it easy to stop execution from inside helper functions.</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/user/+layout.server.js</span><pre class=3D"shiki twoslash lsp=
" style=3D"background-color: var(--shiki-color-background); color: var(--sh=
iki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-cont=
ainer"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-ke=
yword)">import</span><span style=3D"color: var(--shiki-color-text)"> { <dat=
a-lsp lsp=3D"(alias) function redirect(status: NumericRange&amp;lt;300, 308=
>, location: string | URL): never&amp;#10;import redirect">redirect</data-l=
sp> } </span><span style=3D"color: var(--shiki-token-keyword)">from</span><=
span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color:=
 var(--shiki-token-string-expression)">'@sveltejs/kit'</span><span style=3D=
"color: var(--shiki-color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').LayoutServerLoad}</spa=
n><span style=3D"color: var(--shiki-token-comment)"> */</span></div><div cl=
ass=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-keyword)">function</span><span style=3D"color: var(--s=
hiki-color-text)"> </span><span style=3D"color: var(--shiki-token-function)=
"><data-lsp lsp=3D"function load(event: ServerLoadEvent&amp;lt;{}, Record&a=
mp;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Record&amp;=
lt;string, any>>">load</data-lsp></span><span style=3D"color: var(--shiki-c=
olor-text)">({ <data-lsp lsp=3D"(parameter) locals: App.Locals">locals</dat=
a-lsp> }) {</span></div><div class=3D"line"><span style=3D"color: var(--shi=
ki-color-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">i=
f</span><span style=3D"color: var(--shiki-color-text)"> (</span><span style=
=3D"color: var(--shiki-token-keyword)">!</span><span style=3D"color: var(--=
shiki-token-constant)"><data-lsp lsp=3D"(parameter) locals: App.Locals">loc=
als</data-lsp></span><span style=3D"color: var(--shiki-color-text)">.<data-=
lsp lsp=3D"(property) App.Locals.user?: {&amp;#10;    name: string;&amp;#10=
;} | undefined">user</data-lsp>) {</span></div><div class=3D"line"><span st=
yle=3D"color: var(--shiki-color-text)">		</span><span style=3D"color: var(-=
-shiki-token-function)"><data-lsp lsp=3D"(alias) redirect(status: NumericRa=
nge&amp;lt;300, 308>, location: string | URL): never&amp;#10;import redirec=
t">redirect</data-lsp></span><span style=3D"color: var(--shiki-color-text)"=
>(</span><span style=3D"color: var(--shiki-token-constant)">307</span><span=
 style=3D"color: var(--shiki-token-punctuation)">,</span><span style=3D"col=
or: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-toke=
n-string-expression)">'/login'</span><span style=3D"color: var(--shiki-colo=
r-text)">);</span></div><div class=3D"line"><span style=3D"color: var(--shi=
ki-color-text)">	}</span></div><div class=3D"line"><span style=3D"color: va=
r(--shiki-color-text)">}</span></div></code></div></pre><button id=3D"copy-=
to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib">=
<svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:hre=
f=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><div class=
=3D"ts-version copy-code-block code-block"><span class=3D"filename">src/rou=
tes/user/+layout.server.ts</span><pre class=3D"shiki twoslash lsp" style=3D=
"background-color: var(--shiki-color-background); color: var(--shiki-color-=
text)"><div class=3D"language-id">ts</div><div class=3D"code-container"><co=
de><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)">im=
port</span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=
=3D"(alias) function redirect(status: NumericRange&amp;lt;300, 308>, locati=
on: string | URL): never&amp;#10;import redirect">redirect</data-lsp> } </s=
pan><span style=3D"color: var(--shiki-token-keyword)">from</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-string-expression)">'@sveltejs/kit'</span><span style=3D"color: v=
ar(--shiki-color-text)">;</span></div><div class=3D"line"><span style=3D"co=
lor: var(--shiki-token-keyword)">import</span><span style=3D"color: var(--s=
hiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)"=
>type</span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=
=3D"(alias) type LayoutServerLoad =3D (event: Kit.ServerLoadEvent&amp;lt;{}=
, Record&amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;=
void | Record&amp;lt;string, any>>&amp;#10;import LayoutServerLoad">LayoutS=
erverLoad</data-lsp> } </span><span style=3D"color: var(--shiki-token-keywo=
rd)">from</span><span style=3D"color: var(--shiki-color-text)"> </span><spa=
n style=3D"color: var(--shiki-token-string-expression)">'./$types'</span><s=
pan style=3D"color: var(--shiki-color-text)">;</span></div><div class=3D"li=
ne">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: LayoutServerLoad">load</data-lsp><=
/span><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type LayoutServerLoad =3D (eve=
nt: Kit.ServerLoadEvent&amp;lt;{}, Record&amp;lt;string, any>, string | nul=
l>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10=
;import LayoutServerLoad">LayoutServerLoad</data-lsp></span><span style=3D"=
color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-t=
oken-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> ({=
 <data-lsp lsp=3D"(parameter) locals: App.Locals">locals</data-lsp> }) </sp=
an><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><span st=
yle=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"><=
span style=3D"color: var(--shiki-color-text)">	</span><span style=3D"color:=
 var(--shiki-token-keyword)">if</span><span style=3D"color: var(--shiki-col=
or-text)"> (</span><span style=3D"color: var(--shiki-token-keyword)">!</spa=
n><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(para=
meter) locals: App.Locals">locals</data-lsp></span><span style=3D"color: va=
r(--shiki-color-text)">.<data-lsp lsp=3D"(property) App.Locals.user?: {&amp=
;#10;    name: string;&amp;#10;} | undefined">user</data-lsp>) {</span></di=
v><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</sp=
an><span style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"(ali=
as) redirect(status: NumericRange&amp;lt;300, 308>, location: string | URL)=
: never&amp;#10;import redirect">redirect</data-lsp></span><span style=3D"c=
olor: var(--shiki-color-text)">(</span><span style=3D"color: var(--shiki-to=
ken-constant)">307</span><span style=3D"color: var(--shiki-token-punctuatio=
n)">,</span><span style=3D"color: var(--shiki-color-text)"> </span><span st=
yle=3D"color: var(--shiki-token-string-expression)">'/login'</span><span st=
yle=3D"color: var(--shiki-color-text)">);</span></div><div class=3D"line"><=
span style=3D"color: var(--shiki-color-text)">	}</span></div><div class=3D"=
line"><span style=3D"color: var(--shiki-color-text)">};</span></div></code>=
</div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"=
><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"2=
0" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg><=
/span></button></div><blockquote>
<p>Don't use <code>redirect()</code> inside a <code>try {...}</code> block,=
 as the redirect will immediately trigger the catch statement.</p>
</blockquote>
<p>In the browser, you can also navigate programmatically outside of a <cod=
e>load</code> function using <a href=3D"https://kit.svelte.dev/docs/modules=
#$app-navigation-goto"><code>goto</code></a> from <a href=3D"https://kit.sv=
elte.dev/docs/modules#$app-navigation"><code>$app.navigation</code></a>.</p=
>
<blockquote>
<p><a href=3D"https://kit.svelte.dev/docs/migrating-to-sveltekit-2#redirect=
-and-error-are-no-longer-thrown-by-you">In SvelteKit 1.x</a> you had to <co=
de>throw</code> the <code>redirect</code> yourself</p>
</blockquote>
<h2 id=3D"streaming-with-promises">Streaming with promises<a href=3D"https:=
//kit.svelte.dev/docs/load#streaming-with-promises" class=3D"permalink"><sp=
an class=3D"visually-hidden">permalink</span></a></h2><p>When using a serve=
r <code>load</code>, promises will be streamed to the browser as they resol=
ve. This is useful if you have slow, non-essential data, since you can star=
t rendering the page before all the data is available:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/blog/[slug]/+page.server.js</span><pre class=3D"shiki twoslas=
h lsp" style=3D"background-color: var(--shiki-color-background); color: var=
(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code=
-container"><code><div class=3D"line"><span style=3D"color: var(--shiki-tok=
en-comment)">/** </span><span style=3D"color: var(--shiki-token-keyword)">@=
type</span><span style=3D"color: var(--shiki-token-comment)"> </span><span =
style=3D"color: var(--shiki-token-function)">{import('./$types').PageServer=
Load}</span><span style=3D"color: var(--shiki-token-comment)"> */</span></d=
iv><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)">ex=
port</span><span style=3D"color: var(--shiki-color-text)"> </span><span sty=
le=3D"color: var(--shiki-token-keyword)">async</span><span style=3D"color: =
var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-ke=
yword)">function</span><span style=3D"color: var(--shiki-color-text)"> </sp=
an><span style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"func=
tion load(event: ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10=
;}, Record&amp;lt;string, any>, string | null>): MaybePromise&amp;lt;void |=
 Record&amp;lt;string, any>>">load</data-lsp></span><span style=3D"color: v=
ar(--shiki-color-text)">({ <data-lsp lsp=3D"(parameter) params: {&amp;#10; =
   slug: string;&amp;#10;}">params</data-lsp> }) {</span></div><div class=
=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><span styl=
e=3D"color: var(--shiki-token-keyword)">return</span><span style=3D"color: =
var(--shiki-color-text)"> {</span></div><div class=3D"line"><span style=3D"=
color: var(--shiki-color-text)">		</span><span style=3D"color: var(--shiki-=
token-comment)">// make sure the `await` happens at the end, otherwise we</=
span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-text=
)">		</span><span style=3D"color: var(--shiki-token-comment)">// can't star=
t loading comments until we've loaded the post</span></div><div class=3D"li=
ne"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(prop=
erty) comments: Promise&amp;lt;{&amp;#10;    content: string;&amp;#10;}>">c=
omments</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">=
:</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"const loadComments=
: (slug: string) =3D> Promise&amp;lt;{&amp;#10;    content: string;&amp;#10=
;}>">loadComments</data-lsp></span><span style=3D"color: var(--shiki-color-=
text)">(</span><span style=3D"color: var(--shiki-token-constant)"><data-lsp=
 lsp=3D"(parameter) params: {&amp;#10;    slug: string;&amp;#10;}">params</=
data-lsp></span><span style=3D"color: var(--shiki-color-text)">.<data-lsp l=
sp=3D"(property) slug: string">slug</data-lsp>)</span><span style=3D"color:=
 var(--shiki-token-punctuation)">,</span></div><div class=3D"line"><span st=
yle=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(property) post: =
{&amp;#10;    title: string;&amp;#10;    content: string;&amp;#10;}">post</=
data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</span><=
span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color:=
 var(--shiki-token-keyword)">await</span><span style=3D"color: var(--shiki-=
color-text)"> </span><span style=3D"color: var(--shiki-token-function)"><da=
ta-lsp lsp=3D"const loadPost: (slug: string) =3D> Promise&amp;lt;{&amp;#10;=
    title: string;&amp;#10;    content: string;&amp;#10;}>">loadPost</data-=
lsp></span><span style=3D"color: var(--shiki-color-text)">(</span><span sty=
le=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(parameter) para=
ms: {&amp;#10;    slug: string;&amp;#10;}">params</data-lsp></span><span st=
yle=3D"color: var(--shiki-color-text)">.<data-lsp lsp=3D"(property) slug: s=
tring">slug</data-lsp>)</span></div><div class=3D"line"><span style=3D"colo=
r: var(--shiki-color-text)">	};</span></div><div class=3D"line"><span style=
=3D"color: var(--shiki-color-text)">}</span></div></code></div></pre><butto=
n id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"sv=
elte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><=
use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></d=
iv><div class=3D"ts-version copy-code-block code-block"><span class=3D"file=
name">src/routes/blog/[slug]/+page.server.ts</span><pre class=3D"shiki twos=
lash lsp" style=3D"background-color: var(--shiki-color-background); color: =
var(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"c=
ode-container"><code><div class=3D"line"><span style=3D"color: var(--shiki-=
token-keyword)">import</span><span style=3D"color: var(--shiki-color-text)"=
> </span><span style=3D"color: var(--shiki-token-keyword)">type</span><span=
 style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type =
PageServerLoad =3D (event: Kit.ServerLoadEvent&amp;lt;{&amp;#10;    slug: s=
tring;&amp;#10;}, Record&amp;lt;string, any>, string | null>) =3D> Kit.Mayb=
ePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import PageServe=
rLoad">PageServerLoad</data-lsp> } </span><span style=3D"color: var(--shiki=
-token-keyword)">from</span><span style=3D"color: var(--shiki-color-text)">=
 </span><span style=3D"color: var(--shiki-token-string-expression)">'./$typ=
es'</span><span style=3D"color: var(--shiki-color-text)">;</span></div><div=
 class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageServerLoad">load</data-lsp></s=
pan><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type PageServerLoad =3D (event=
: Kit.ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record&=
amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Re=
cord&amp;lt;string, any>>&amp;#10;import PageServerLoad">PageServerLoad</da=
ta-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color:=
 var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-k=
eyword)">async</span><span style=3D"color: var(--shiki-color-text)"> ({ <da=
ta-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: string;&amp;#10;}">pa=
rams</data-lsp> }) </span><span style=3D"color: var(--shiki-token-keyword)"=
>=3D&gt;</span><span style=3D"color: var(--shiki-color-text)"> {</span></di=
v><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</spa=
n><span style=3D"color: var(--shiki-token-keyword)">return</span><span styl=
e=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">		</span><span style=3D"color: =
var(--shiki-token-comment)">// make sure the `await` happens at the end, ot=
herwise we</span></div><div class=3D"line"><span style=3D"color: var(--shik=
i-color-text)">		</span><span style=3D"color: var(--shiki-token-comment)">/=
/ can't start loading comments until we've loaded the post</span></div><div=
 class=3D"line"><span style=3D"color: var(--shiki-color-text)">		<data-lsp =
lsp=3D"(property) comments: Promise&amp;lt;{&amp;#10;    content: string;&a=
mp;#10;}>">comments</data-lsp></span><span style=3D"color: var(--shiki-toke=
n-keyword)">:</span><span style=3D"color: var(--shiki-color-text)"> </span>=
<span style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"const l=
oadComments: (slug: string) =3D> Promise&amp;lt;{&amp;#10;    content: stri=
ng;&amp;#10;}>">loadComments</data-lsp></span><span style=3D"color: var(--s=
hiki-color-text)">(</span><span style=3D"color: var(--shiki-token-constant)=
"><data-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: string;&amp;#10;=
}">params</data-lsp></span><span style=3D"color: var(--shiki-color-text)">.=
<data-lsp lsp=3D"(property) slug: string">slug</data-lsp>)</span><span styl=
e=3D"color: var(--shiki-token-punctuation)">,</span></div><div class=3D"lin=
e"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(prope=
rty) post: {&amp;#10;    title: string;&amp;#10;    content: string;&amp;#1=
0;}">post</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)=
">:</span><span style=3D"color: var(--shiki-color-text)"> </span><span styl=
e=3D"color: var(--shiki-token-keyword)">await</span><span style=3D"color: v=
ar(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-fun=
ction)"><data-lsp lsp=3D"const loadPost: (slug: string) =3D> Promise&amp;lt=
;{&amp;#10;    title: string;&amp;#10;    content: string;&amp;#10;}>">load=
Post</data-lsp></span><span style=3D"color: var(--shiki-color-text)">(</spa=
n><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(para=
meter) params: {&amp;#10;    slug: string;&amp;#10;}">params</data-lsp></sp=
an><span style=3D"color: var(--shiki-color-text)">.<data-lsp lsp=3D"(proper=
ty) slug: string">slug</data-lsp>)</span><span style=3D"color: var(--shiki-=
token-punctuation)">,</span></div><div class=3D"line"><span style=3D"color:=
 var(--shiki-color-text)">	};</span></div><div class=3D"line"><span style=
=3D"color: var(--shiki-color-text)">};</span></div></code></div></pre><butt=
on id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"s=
velte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20">=
<use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></=
div><p>This is useful for creating skeleton loading states, for example:</p=
>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/blog/[slug]/+page.svelte</span><pre class=3D"shiki" style=3D"=
background-color: var(--shiki-color-background)"><code><span class=3D"line"=
><span style=3D"color: var(--shiki-color-text)">&lt;</span><span style=3D"c=
olor: var(--shiki-token-string-expression)">script</span><span style=3D"col=
or: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-comment)">/** </span><span style=
=3D"color: var(--shiki-token-keyword)">@type</span><span style=3D"color: va=
r(--shiki-token-comment)"> </span><span style=3D"color: var(--shiki-token-f=
unction)">{import('./$types').PageData}</span><span style=3D"color: var(--s=
hiki-token-comment)"> */</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">h1</span><s=
pan style=3D"color: var(--shiki-color-text)">&gt;{</span><span style=3D"col=
or: var(--shiki-token-constant)">data</span><span style=3D"color: var(--shi=
ki-color-text)">.</span><span style=3D"color: var(--shiki-token-constant)">=
post</span><span style=3D"color: var(--shiki-color-text)">.title}&lt;/</spa=
n><span style=3D"color: var(--shiki-token-string-expression)">h1</span><spa=
n style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">div</span><=
span style=3D"color: var(--shiki-color-text)">&gt;{@</span><span style=3D"c=
olor: var(--shiki-token-keyword)">html</span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)"=
>data</span><span style=3D"color: var(--shiki-color-text)">.</span><span st=
yle=3D"color: var(--shiki-token-constant)">post</span><span style=3D"color:=
 var(--shiki-color-text)">.content}&lt;/</span><span style=3D"color: var(--=
shiki-token-string-expression)">div</span><span style=3D"color: var(--shiki=
-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">{#</spa=
n><span style=3D"color: var(--shiki-token-keyword)">await</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-constant)">data</span><span style=3D"color: var(--shiki-color-text=
)">.comments}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	Loadin=
g comments...</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">{:</spa=
n><span style=3D"color: var(--shiki-token-keyword)">then</span><span style=
=3D"color: var(--shiki-color-text)"> comments}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	{#</sp=
an><span style=3D"color: var(--shiki-token-keyword)">each</span><span style=
=3D"color: var(--shiki-color-text)"> comments </span><span style=3D"color: =
var(--shiki-token-keyword)">as</span><span style=3D"color: var(--shiki-colo=
r-text)"> comment}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		&lt;<=
/span><span style=3D"color: var(--shiki-token-string-expression)">p</span><=
span style=3D"color: var(--shiki-color-text)">&gt;{</span><span style=3D"co=
lor: var(--shiki-token-constant)">comment</span><span style=3D"color: var(-=
-shiki-color-text)">.content}&lt;/</span><span style=3D"color: var(--shiki-=
token-string-expression)">p</span><span style=3D"color: var(--shiki-color-t=
ext)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	{/</sp=
an><span style=3D"color: var(--shiki-token-keyword)">each</span><span style=
=3D"color: var(--shiki-color-text)">}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">{:</spa=
n><span style=3D"color: var(--shiki-token-keyword)">catch</span><span style=
=3D"color: var(--shiki-color-text)"> error}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-string-expression)">p</span><s=
pan style=3D"color: var(--shiki-color-text)">&gt;error loading comments: {<=
/span><span style=3D"color: var(--shiki-token-constant)">error</span><span =
style=3D"color: var(--shiki-color-text)">.message}&lt;/</span><span style=
=3D"color: var(--shiki-token-string-expression)">p</span><span style=3D"col=
or: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">{/</spa=
n><span style=3D"color: var(--shiki-token-keyword)">await</span><span style=
=3D"color: var(--shiki-color-text)">}</span></span></code></pre><button id=
=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte=
-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use =
xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><=
div class=3D"ts-version copy-code-block code-block"><span class=3D"filename=
">src/routes/blog/[slug]/+page.svelte</span><pre class=3D"shiki" style=3D"b=
ackground-color: var(--shiki-color-background)"><code><span class=3D"line">=
<span style=3D"color: var(--shiki-color-text)">&lt;</span><span style=3D"co=
lor: var(--shiki-token-string-expression)">script</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)">lang</span><span style=3D"color: var(--shiki-token-keyword)">=
=3D</span><span style=3D"color: var(--shiki-token-string-expression)">"ts"<=
/span><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">type</span><span style=3D"color: var(--shiki-color-text)=
"> { PageData } </span><span style=3D"color: var(--shiki-token-keyword)">fr=
om</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-string-expression)">'./$types'</span><span sty=
le=3D"color: var(--shiki-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data</span><span style=3D"color: var(--shiki-token-keyword)">:</span><spa=
n style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: va=
r(--shiki-token-function)">PageData</span><span style=3D"color: var(--shiki=
-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">h1</span><s=
pan style=3D"color: var(--shiki-color-text)">&gt;{</span><span style=3D"col=
or: var(--shiki-token-constant)">data</span><span style=3D"color: var(--shi=
ki-color-text)">.</span><span style=3D"color: var(--shiki-token-constant)">=
post</span><span style=3D"color: var(--shiki-color-text)">.title}&lt;/</spa=
n><span style=3D"color: var(--shiki-token-string-expression)">h1</span><spa=
n style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">div</span><=
span style=3D"color: var(--shiki-color-text)">&gt;{@</span><span style=3D"c=
olor: var(--shiki-token-keyword)">html</span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)"=
>data</span><span style=3D"color: var(--shiki-color-text)">.</span><span st=
yle=3D"color: var(--shiki-token-constant)">post</span><span style=3D"color:=
 var(--shiki-color-text)">.content}&lt;/</span><span style=3D"color: var(--=
shiki-token-string-expression)">div</span><span style=3D"color: var(--shiki=
-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">{#</spa=
n><span style=3D"color: var(--shiki-token-keyword)">await</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-constant)">data</span><span style=3D"color: var(--shiki-color-text=
)">.comments}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	Loadin=
g comments...</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">{:</spa=
n><span style=3D"color: var(--shiki-token-keyword)">then</span><span style=
=3D"color: var(--shiki-color-text)"> comments}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	{#</sp=
an><span style=3D"color: var(--shiki-token-keyword)">each</span><span style=
=3D"color: var(--shiki-color-text)"> comments </span><span style=3D"color: =
var(--shiki-token-keyword)">as</span><span style=3D"color: var(--shiki-colo=
r-text)"> comment}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		&lt;<=
/span><span style=3D"color: var(--shiki-token-string-expression)">p</span><=
span style=3D"color: var(--shiki-color-text)">&gt;{</span><span style=3D"co=
lor: var(--shiki-token-constant)">comment</span><span style=3D"color: var(-=
-shiki-color-text)">.content}&lt;/</span><span style=3D"color: var(--shiki-=
token-string-expression)">p</span><span style=3D"color: var(--shiki-color-t=
ext)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	{/</sp=
an><span style=3D"color: var(--shiki-token-keyword)">each</span><span style=
=3D"color: var(--shiki-color-text)">}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">{:</spa=
n><span style=3D"color: var(--shiki-token-keyword)">catch</span><span style=
=3D"color: var(--shiki-color-text)"> error}</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	&lt;</=
span><span style=3D"color: var(--shiki-token-string-expression)">p</span><s=
pan style=3D"color: var(--shiki-color-text)">&gt;error loading comments: {<=
/span><span style=3D"color: var(--shiki-token-constant)">error</span><span =
style=3D"color: var(--shiki-color-text)">.message}&lt;/</span><span style=
=3D"color: var(--shiki-token-string-expression)">p</span><span style=3D"col=
or: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">{/</spa=
n><span style=3D"color: var(--shiki-token-keyword)">await</span><span style=
=3D"color: var(--shiki-color-text)">}</span></span></code></pre><button id=
=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte=
-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use =
xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><=
p>When streaming data, be careful to handle promise rejections correctly. M=
ore specifically, the server could crash with an "unhandled promise rejecti=
on" error if a lazy-loaded promise fails before rendering starts (at which =
point it's caught) and isn't handling the error in some way. When using Sve=
lteKit's <code>fetch</code> directly in the <code>load</code> function, Sve=
lteKit will handle this case for you. For other promises, it is enough to a=
ttach a noop-<code>catch</code> to the promise to mark it as handled.</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/+page.server.js</span><pre class=3D"shiki twoslash lsp" style=
=3D"background-color: var(--shiki-color-background); color: var(--shiki-col=
or-text)"><div class=3D"language-id">ts</div><div class=3D"code-container">=
<code><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').PageServerLoad}</span>=
<span style=3D"color: var(--shiki-token-comment)"> */</span></div><div clas=
s=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span><=
span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color:=
 var(--shiki-token-keyword)">function</span><span style=3D"color: var(--shi=
ki-color-text)"> </span><span style=3D"color: var(--shiki-token-function)">=
<data-lsp lsp=3D"function load(event: ServerLoadEvent&amp;lt;{}, Record&amp=
;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Record&amp;lt=
;string, any>>">load</data-lsp></span><span style=3D"color: var(--shiki-col=
or-text)">({ <data-lsp lsp=3D"(parameter) fetch: {&amp;#10;    (input: URL =
| RequestInfo, init?: RequestInit | undefined): Promise&amp;lt;Response>;&a=
mp;#10;    (input: string | URL | Request, init?: RequestInit | undefined):=
 Promise&amp;lt;...>;&amp;#10;}">fetch</data-lsp> }) {</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><span st=
yle=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"color:=
 var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-c=
onstant)"><data-lsp lsp=3D"const ok_manual: Promise&amp;lt;never>">ok_manua=
l</data-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span><=
span style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"c=
olor: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-to=
ken-constant)"><data-lsp lsp=3D"var Promise: PromiseConstructor">Promise</d=
ata-lsp></span><span style=3D"color: var(--shiki-token-function)">.<data-ls=
p lsp=3D"(method) PromiseConstructor.reject&amp;lt;never>(reason?: any): Pr=
omise&amp;lt;never>">reject</data-lsp></span><span style=3D"color: var(--sh=
iki-color-text)">();</span></div><div class=3D"line"><span style=3D"color: =
var(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-co=
nstant)"><data-lsp lsp=3D"const ok_manual: Promise&amp;lt;never>">ok_manual=
</data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<data=
-lsp lsp=3D"(method) Promise&amp;lt;never>.catch&amp;lt;void>(onrejected?: =
((reason: any) =3D> void | PromiseLike&amp;lt;void>) | null | undefined): P=
romise&amp;lt;void>">catch</data-lsp></span><span style=3D"color: var(--shi=
ki-color-text)">(() </span><span style=3D"color: var(--shiki-token-keyword)=
">=3D&gt;</span><span style=3D"color: var(--shiki-color-text)"> {});</span>=
</div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"=
><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(propert=
y) ok_manual: Promise&amp;lt;never>">ok_manual</data-lsp></span><span style=
=3D"color: var(--shiki-token-punctuation)">,</span></div><div class=3D"line=
"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(proper=
ty) ok_fetch: Promise&amp;lt;Response>">ok_fetch</data-lsp></span><span sty=
le=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"color: var(=
--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-functi=
on)"><data-lsp lsp=3D"(parameter) fetch: (input: string | URL | Request, in=
it?: RequestInit | undefined) =3D> Promise&amp;lt;Response> (+1 overload)">=
fetch</data-lsp></span><span style=3D"color: var(--shiki-color-text)">(</sp=
an><span style=3D"color: var(--shiki-token-string-expression)">'/fetch/that=
/could/fail'</span><span style=3D"color: var(--shiki-color-text)">)</span><=
span style=3D"color: var(--shiki-token-punctuation)">,</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=
=3D"(property) dangerous_unhandled: Promise&amp;lt;never>">dangerous_unhand=
led</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</s=
pan><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"c=
olor: var(--shiki-token-constant)"><data-lsp lsp=3D"var Promise: PromiseCon=
structor">Promise</data-lsp></span><span style=3D"color: var(--shiki-token-=
function)">.<data-lsp lsp=3D"(method) PromiseConstructor.reject&amp;lt;neve=
r>(reason?: any): Promise&amp;lt;never>">reject</data-lsp></span><span styl=
e=3D"color: var(--shiki-color-text)">()</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">	};</span></div><div class=3D"l=
ine"><span style=3D"color: var(--shiki-color-text)">}</span></div></code></=
div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><=
span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20"=
 height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></s=
pan></button></div><div class=3D"ts-version copy-code-block code-block"><sp=
an class=3D"filename">src/routes/+page.server.ts</span><pre class=3D"shiki =
twoslash lsp" style=3D"background-color: var(--shiki-color-background); col=
or: var(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=
=3D"code-container"><code><div class=3D"line"><span style=3D"color: var(--s=
hiki-token-keyword)">import</span><span style=3D"color: var(--shiki-color-t=
ext)"> </span><span style=3D"color: var(--shiki-token-keyword)">type</span>=
<span style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) =
type PageServerLoad =3D (event: Kit.ServerLoadEvent&amp;lt;{}, Record&amp;l=
t;string, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&=
amp;lt;string, any>>&amp;#10;import PageServerLoad">PageServerLoad</data-ls=
p> } </span><span style=3D"color: var(--shiki-token-keyword)">from</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-string-expression)">'./$types'</span><span style=3D"color=
: var(--shiki-color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageServerLoad">load</data-lsp></s=
pan><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type PageServerLoad =3D (event=
: Kit.ServerLoadEvent&amp;lt;{}, Record&amp;lt;string, any>, string | null>=
) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;i=
mport PageServerLoad">PageServerLoad</data-lsp></span><span style=3D"color:=
 var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-k=
eyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> ({ <data=
-lsp lsp=3D"(parameter) fetch: {&amp;#10;    (input: URL | RequestInfo, ini=
t?: RequestInit | undefined): Promise&amp;lt;Response>;&amp;#10;    (input:=
 string | URL | Request, init?: RequestInit | undefined): Promise&amp;lt;..=
.>;&amp;#10;}">fetch</data-lsp> }) </span><span style=3D"color: var(--shiki=
-token-keyword)">=3D&gt;</span><span style=3D"color: var(--shiki-color-text=
)"> {</span></div><div class=3D"line"><span style=3D"color: var(--shiki-col=
or-text)">	</span><span style=3D"color: var(--shiki-token-keyword)">const</=
span><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"=
color: var(--shiki-token-constant)"><data-lsp lsp=3D"const ok_manual: Promi=
se&amp;lt;never>">ok_manual</data-lsp></span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">=
=3D</span><span style=3D"color: var(--shiki-color-text)"> </span><span styl=
e=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"var Promise: Prom=
iseConstructor">Promise</data-lsp></span><span style=3D"color: var(--shiki-=
token-function)">.<data-lsp lsp=3D"(method) PromiseConstructor.reject&amp;l=
t;never>(reason?: any): Promise&amp;lt;never>">reject</data-lsp></span><spa=
n style=3D"color: var(--shiki-color-text)">();</span></div><div class=3D"li=
ne"><span style=3D"color: var(--shiki-color-text)">	</span><span style=3D"c=
olor: var(--shiki-token-constant)"><data-lsp lsp=3D"const ok_manual: Promis=
e&amp;lt;never>">ok_manual</data-lsp></span><span style=3D"color: var(--shi=
ki-token-function)">.<data-lsp lsp=3D"(method) Promise&amp;lt;never>.catch&=
amp;lt;void>(onrejected?: ((reason: any) =3D> void | PromiseLike&amp;lt;voi=
d>) | null | undefined): Promise&amp;lt;void>">catch</data-lsp></span><span=
 style=3D"color: var(--shiki-color-text)">(() </span><span style=3D"color: =
var(--shiki-token-keyword)">=3D&gt;</span><span style=3D"color: var(--shiki=
-color-text)"> {});</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"=
><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(propert=
y) ok_manual: Promise&amp;lt;never>">ok_manual</data-lsp></span><span style=
=3D"color: var(--shiki-token-punctuation)">,</span></div><div class=3D"line=
"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(proper=
ty) ok_fetch: Promise&amp;lt;Response>">ok_fetch</data-lsp></span><span sty=
le=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"color: var(=
--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-functi=
on)"><data-lsp lsp=3D"(parameter) fetch: (input: string | URL | Request, in=
it?: RequestInit | undefined) =3D> Promise&amp;lt;Response> (+1 overload)">=
fetch</data-lsp></span><span style=3D"color: var(--shiki-color-text)">(</sp=
an><span style=3D"color: var(--shiki-token-string-expression)">'/fetch/that=
/could/fail'</span><span style=3D"color: var(--shiki-color-text)">)</span><=
span style=3D"color: var(--shiki-token-punctuation)">,</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=
=3D"(property) dangerous_unhandled: Promise&amp;lt;never>">dangerous_unhand=
led</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</s=
pan><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"c=
olor: var(--shiki-token-constant)"><data-lsp lsp=3D"var Promise: PromiseCon=
structor">Promise</data-lsp></span><span style=3D"color: var(--shiki-token-=
function)">.<data-lsp lsp=3D"(method) PromiseConstructor.reject&amp;lt;neve=
r>(reason?: any): Promise&amp;lt;never>">reject</data-lsp></span><span styl=
e=3D"color: var(--shiki-color-text)">()</span><span style=3D"color: var(--s=
hiki-token-punctuation)">,</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">	};</span></div><div class=3D"line"><span st=
yle=3D"color: var(--shiki-color-text)">};</span></div></code></div></pre><b=
utton id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=
=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D=
"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></butt=
on></div><blockquote>
<p>On platforms that do not support streaming, such as AWS Lambda or Fireba=
se, responses will be buffered. This means the page will only render once a=
ll promises resolve. If you are using a proxy (e.g. NGINX), make sure it do=
es not buffer responses from the proxied server.</p>
</blockquote>
<blockquote>
<p>Streaming data will only work when JavaScript is enabled. You should avo=
id returning promises from a universal <code>load</code> function if the pa=
ge is server rendered, as these are <em>not</em> streamed =E2=80=94 instead=
, the promise is recreated when the function reruns in the browser.</p>
</blockquote>
<blockquote>
<p>The headers and status code of a response cannot be changed once the res=
ponse has started streaming, therefore you cannot <code>setHeaders</code> o=
r throw redirects inside a streamed promise.</p>
</blockquote>
<blockquote>
<p><a href=3D"https://kit.svelte.dev/docs/migrating-to-sveltekit-2#top-leve=
l-promises-are-no-longer-awaited">In SvelteKit 1.x</a> top-level promises w=
ere automatically awaited, only nested promises were streamed.</p>
</blockquote>
<h2 id=3D"parallel-loading">Parallel loading<a href=3D"https://kit.svelte.d=
ev/docs/load#parallel-loading" class=3D"permalink"><span class=3D"visually-=
hidden">permalink</span></a></h2><p>When rendering (or navigating to) a pag=
e, SvelteKit runs all <code>load</code> functions concurrently, avoiding a =
waterfall of requests. During client-side navigation, the result of calling=
 multiple server <code>load</code> functions are grouped into a single resp=
onse. Once all <code>load</code> functions have returned, the page is rende=
red.</p>
<h2 id=3D"rerunning-load-functions">Rerunning load functions<a href=3D"http=
s://kit.svelte.dev/docs/load#rerunning-load-functions" class=3D"permalink">=
<span class=3D"visually-hidden">permalink</span></a></h2><p>SvelteKit track=
s the dependencies of each <code>load</code> function to avoid rerunning it=
 unnecessarily during navigation.</p>
<p>For example, given a pair of <code>load</code> functions like these...</=
p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/blog/[slug]/+page.server.js</span><pre class=3D"shiki twoslas=
h lsp" style=3D"background-color: var(--shiki-color-background); color: var=
(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code=
-container"><code><div class=3D"line"><span style=3D"color: var(--shiki-tok=
en-keyword)">import</span><span style=3D"color: var(--shiki-color-text)"> <=
/span><span style=3D"color: var(--shiki-token-constant)">*</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-keyword)">as</span><span style=3D"color: var(--shiki-color-text)"=
> <data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;=
import db">db</data-lsp> </span><span style=3D"color: var(--shiki-token-key=
word)">from</span><span style=3D"color: var(--shiki-color-text)"> </span><s=
pan style=3D"color: var(--shiki-token-string-expression)">'$lib/server/data=
base'</span><span style=3D"color: var(--shiki-color-text)">;</span></div><d=
iv class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').PageServerLoad}</span>=
<span style=3D"color: var(--shiki-token-comment)"> */</span></div><div clas=
s=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span><=
span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color:=
 var(--shiki-token-keyword)">async</span><span style=3D"color: var(--shiki-=
color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">func=
tion</span><span style=3D"color: var(--shiki-color-text)"> </span><span sty=
le=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(ev=
ent: ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record&a=
mp;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Record&amp;=
lt;string, any>>">load</data-lsp></span><span style=3D"color: var(--shiki-c=
olor-text)">({ <data-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: str=
ing;&amp;#10;}">params</data-lsp> }) {</span></div><div class=3D"line"><spa=
n style=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: va=
r(--shiki-token-keyword)">return</span><span style=3D"color: var(--shiki-co=
lor-text)"> {</span></div><div class=3D"line"><span style=3D"color: var(--s=
hiki-color-text)">		<data-lsp lsp=3D"(property) post: {&amp;#10;    title: =
string;&amp;#10;    content: string;&amp;#10;}">post</data-lsp></span><span=
 style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"color: =
var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-ke=
yword)">await</span><span style=3D"color: var(--shiki-color-text)"> </span>=
<span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(alias)=
 module &quot;$lib/server/database&quot;&amp;#10;import db">db</data-lsp></=
span><span style=3D"color: var(--shiki-token-function)">.<data-lsp lsp=3D"f=
unction getPost(slug: string): Promise&amp;lt;{&amp;#10;    title: string;&=
amp;#10;    content: string;&amp;#10;}>">getPost</data-lsp></span><span sty=
le=3D"color: var(--shiki-color-text)">(</span><span style=3D"color: var(--s=
hiki-token-constant)"><data-lsp lsp=3D"(parameter) params: {&amp;#10;    sl=
ug: string;&amp;#10;}">params</data-lsp></span><span style=3D"color: var(--=
shiki-color-text)">.<data-lsp lsp=3D"(property) slug: string">slug</data-ls=
p>)</span></div><div class=3D"line"><span style=3D"color: var(--shiki-color=
-text)">	};</span></div><div class=3D"line"><span style=3D"color: var(--shi=
ki-color-text)">}</span></div></code></div></pre><button id=3D"copy-to-clip=
board-button" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg cl=
ass=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#c=
opy-to-clipboard-empty"></use></svg></span></button></div><div class=3D"ts-=
version copy-code-block code-block"><span class=3D"filename">src/routes/blo=
g/[slug]/+page.server.ts</span><pre class=3D"shiki twoslash lsp" style=3D"b=
ackground-color: var(--shiki-color-background); color: var(--shiki-color-te=
xt)"><div class=3D"language-id">ts</div><div class=3D"code-container"><code=
><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)">impo=
rt</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-constant)">*</span><span style=3D"color: var(-=
-shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword=
)">as</span><span style=3D"color: var(--shiki-color-text)"> <data-lsp lsp=
=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;import db">db</=
data-lsp> </span><span style=3D"color: var(--shiki-token-keyword)">from</sp=
an><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"co=
lor: var(--shiki-token-string-expression)">'$lib/server/database'</span><sp=
an style=3D"color: var(--shiki-color-text)">;</span></div><div class=3D"lin=
e"><span style=3D"color: var(--shiki-token-keyword)">import</span><span sty=
le=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--s=
hiki-token-keyword)">type</span><span style=3D"color: var(--shiki-color-tex=
t)"> { <data-lsp lsp=3D"(alias) type PageServerLoad =3D (event: Kit.ServerL=
oadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record&amp;lt;string=
, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;s=
tring, any>>&amp;#10;import PageServerLoad">PageServerLoad</data-lsp> } </s=
pan><span style=3D"color: var(--shiki-token-keyword)">from</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-string-expression)">'./$types'</span><span style=3D"color: var(--=
shiki-color-text)">;</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageServerLoad">load</data-lsp></s=
pan><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type PageServerLoad =3D (event=
: Kit.ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record&=
amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | Re=
cord&amp;lt;string, any>>&amp;#10;import PageServerLoad">PageServerLoad</da=
ta-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color:=
 var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-k=
eyword)">async</span><span style=3D"color: var(--shiki-color-text)"> ({ <da=
ta-lsp lsp=3D"(parameter) params: {&amp;#10;    slug: string;&amp;#10;}">pa=
rams</data-lsp> }) </span><span style=3D"color: var(--shiki-token-keyword)"=
>=3D&gt;</span><span style=3D"color: var(--shiki-color-text)"> {</span></di=
v><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</spa=
n><span style=3D"color: var(--shiki-token-keyword)">return</span><span styl=
e=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(property) p=
ost: {&amp;#10;    title: string;&amp;#10;    content: string;&amp;#10;}">p=
ost</data-lsp></span><span style=3D"color: var(--shiki-token-keyword)">:</s=
pan><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"c=
olor: var(--shiki-token-keyword)">await</span><span style=3D"color: var(--s=
hiki-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)=
"><data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;=
import db">db</data-lsp></span><span style=3D"color: var(--shiki-token-func=
tion)">.<data-lsp lsp=3D"function getPost(slug: string): Promise&amp;lt;{&a=
mp;#10;    title: string;&amp;#10;    content: string;&amp;#10;}>">getPost<=
/data-lsp></span><span style=3D"color: var(--shiki-color-text)">(</span><sp=
an style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=3D"(parameter=
) params: {&amp;#10;    slug: string;&amp;#10;}">params</data-lsp></span><s=
pan style=3D"color: var(--shiki-color-text)">.<data-lsp lsp=3D"(property) s=
lug: string">slug</data-lsp>)</span><span style=3D"color: var(--shiki-token=
-punctuation)">,</span></div><div class=3D"line"><span style=3D"color: var(=
--shiki-color-text)">	};</span></div><div class=3D"line"><span style=3D"col=
or: var(--shiki-color-text)">};</span></div></code></div></pre><button id=
=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D"svelte=
-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20"><use =
xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button></div><=
div class=3D"js-version copy-code-block code-block"><span class=3D"filename=
">src/routes/blog/[slug]/+layout.server.js</span><pre class=3D"shiki twosla=
sh lsp" style=3D"background-color: var(--shiki-color-background); color: va=
r(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=3D"cod=
e-container"><code><div class=3D"line"><span style=3D"color: var(--shiki-to=
ken-keyword)">import</span><span style=3D"color: var(--shiki-color-text)"> =
</span><span style=3D"color: var(--shiki-token-constant)">*</span><span sty=
le=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--s=
hiki-token-keyword)">as</span><span style=3D"color: var(--shiki-color-text)=
"> <data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10=
;import db">db</data-lsp> </span><span style=3D"color: var(--shiki-token-ke=
yword)">from</span><span style=3D"color: var(--shiki-color-text)"> </span><=
span style=3D"color: var(--shiki-token-string-expression)">'$lib/server/dat=
abase'</span><span style=3D"color: var(--shiki-color-text)">;</span></div><=
div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-comment)"=
>/** </span><span style=3D"color: var(--shiki-token-keyword)">@type</span><=
span style=3D"color: var(--shiki-token-comment)"> </span><span style=3D"col=
or: var(--shiki-token-function)">{import('./$types').LayoutServerLoad}</spa=
n><span style=3D"color: var(--shiki-token-comment)"> */</span></div><div cl=
ass=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-keyword)">async</span><span style=3D"color: var(--shik=
i-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">fu=
nction</span><span style=3D"color: var(--shiki-color-text)"> </span><span s=
tyle=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(=
event: ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Record=
&amp;lt;string, any>, string | null>): MaybePromise&amp;lt;void | Record&am=
p;lt;string, any>>">load</data-lsp></span><span style=3D"color: var(--shiki=
-color-text)">() {</span></div><div class=3D"line"><span style=3D"color: va=
r(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-keyw=
ord)">return</span><span style=3D"color: var(--shiki-color-text)"> {</span>=
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">		=
<data-lsp lsp=3D"(property) posts: {&amp;#10;    title: string;&amp;#10;   =
 slug: string;&amp;#10;}[]">posts</data-lsp></span><span style=3D"color: va=
r(--shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-color-t=
ext)"> </span><span style=3D"color: var(--shiki-token-keyword)">await</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-constant)"><data-lsp lsp=3D"(alias) module &quot;$lib/=
server/database&quot;&amp;#10;import db">db</data-lsp></span><span style=3D=
"color: var(--shiki-token-function)">.<data-lsp lsp=3D"function getPostSumm=
aries(): Promise&amp;lt;{&amp;#10;    title: string;&amp;#10;    slug: stri=
ng;&amp;#10;}[]>">getPostSummaries</data-lsp></span><span style=3D"color: v=
ar(--shiki-color-text)">()</span></div><div class=3D"line"><span style=3D"c=
olor: var(--shiki-color-text)">	};</span></div><div class=3D"line"><span st=
yle=3D"color: var(--shiki-color-text)">}</span></div></code></div></pre><bu=
tton id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><span class=3D=
"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" height=3D"20=
"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span></button>=
</div><div class=3D"ts-version copy-code-block code-block"><span class=3D"f=
ilename">src/routes/blog/[slug]/+layout.server.ts</span><pre class=3D"shiki=
 twoslash lsp" style=3D"background-color: var(--shiki-color-background); co=
lor: var(--shiki-color-text)"><div class=3D"language-id">ts</div><div class=
=3D"code-container"><code><div class=3D"line"><span style=3D"color: var(--s=
hiki-token-keyword)">import</span><span style=3D"color: var(--shiki-color-t=
ext)"> </span><span style=3D"color: var(--shiki-token-constant)">*</span><s=
pan style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: =
var(--shiki-token-keyword)">as</span><span style=3D"color: var(--shiki-colo=
r-text)"> <data-lsp lsp=3D"(alias) module &quot;$lib/server/database&quot;&=
amp;#10;import db">db</data-lsp> </span><span style=3D"color: var(--shiki-t=
oken-keyword)">from</span><span style=3D"color: var(--shiki-color-text)"> <=
/span><span style=3D"color: var(--shiki-token-string-expression)">'$lib/ser=
ver/database'</span><span style=3D"color: var(--shiki-color-text)">;</span>=
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>import</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">type</span><span style=3D"color=
: var(--shiki-color-text)"> { <data-lsp lsp=3D"(alias) type LayoutServerLoa=
d =3D (event: Kit.ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#1=
0;}, Record&amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp;=
lt;void | Record&amp;lt;string, any>>&amp;#10;import LayoutServerLoad">Layo=
utServerLoad</data-lsp> } </span><span style=3D"color: var(--shiki-token-ke=
yword)">from</span><span style=3D"color: var(--shiki-color-text)"> </span><=
span style=3D"color: var(--shiki-token-string-expression)">'./$types'</span=
><span style=3D"color: var(--shiki-color-text)">;</span></div><div class=3D=
"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: LayoutServerLoad">load</data-lsp><=
/span><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(alias) type LayoutServerLoad =3D (eve=
nt: Kit.ServerLoadEvent&amp;lt;{&amp;#10;    slug: string;&amp;#10;}, Recor=
d&amp;lt;string, any>, string | null>) =3D> Kit.MaybePromise&amp;lt;void | =
Record&amp;lt;string, any>>&amp;#10;import LayoutServerLoad">LayoutServerLo=
ad</data-lsp></span><span style=3D"color: var(--shiki-color-text)"> </span>=
<span style=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"=
color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-t=
oken-keyword)">async</span><span style=3D"color: var(--shiki-color-text)"> =
() </span><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><=
span style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"=
line"><span style=3D"color: var(--shiki-color-text)">	</span><span style=3D=
"color: var(--shiki-token-keyword)">return</span><span style=3D"color: var(=
--shiki-color-text)"> {</span></div><div class=3D"line"><span style=3D"colo=
r: var(--shiki-color-text)">		<data-lsp lsp=3D"(property) posts: {&amp;#10;=
    title: string;&amp;#10;    slug: string;&amp;#10;}[]">posts</data-lsp><=
/span><span style=3D"color: var(--shiki-token-keyword)">:</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">await</span><span style=3D"color: var(--shiki-color-text=
)"> </span><span style=3D"color: var(--shiki-token-constant)"><data-lsp lsp=
=3D"(alias) module &quot;$lib/server/database&quot;&amp;#10;import db">db</=
data-lsp></span><span style=3D"color: var(--shiki-token-function)">.<data-l=
sp lsp=3D"function getPostSummaries(): Promise&amp;lt;{&amp;#10;    title: =
string;&amp;#10;    slug: string;&amp;#10;}[]>">getPostSummaries</data-lsp>=
</span><span style=3D"color: var(--shiki-color-text)">()</span><span style=
=3D"color: var(--shiki-token-punctuation)">,</span></div><div class=3D"line=
"><span style=3D"color: var(--shiki-color-text)">	};</span></div><div class=
=3D"line"><span style=3D"color: var(--shiki-color-text)">};</span></div></c=
ode></div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj=
3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=
=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></=
svg></span></button></div><p>...the one in <code>+page.server.js</code> wil=
l rerun if we navigate from <code>/blog/trying-the-raw-meat-diet</code> to =
<code>/blog/i-regret-my-choices</code> because <code>params.slug</code> has=
 changed. The one in <code>+layout.server.js</code> will not, because the d=
ata is still valid. In other words, we won't call <code>db.getPostSummaries=
()</code> a second time.</p>
<p>A <code>load</code> function that calls <code>await parent()</code> will=
 also rerun if a parent <code>load</code> function is rerun.</p>
<p>Dependency tracking does not apply <em>after</em> the <code>load</code> =
function has returned =E2=80=94 for example, accessing <code>params.x</code=
> inside a nested <a href=3D"https://kit.svelte.dev/docs/load#streaming-wit=
h-promises">promise</a> will not cause the function to rerun when <code>par=
ams.x</code> changes. (Don't worry, you'll get a warning in development if =
you accidentally do this.) Instead, access the parameter in the main body o=
f your <code>load</code> function.</p>
<p>Search parameters are tracked independently from the rest of the url. Fo=
r example, accessing <code>event.url.searchParams.get("x")</code> inside a =
<code>load</code> function will make that <code>load</code> function re-run=
 when navigating from <code>?x=3D1</code> to <code>?x=3D2</code>, but not w=
hen navigating from <code>?x=3D1&amp;y=3D1</code> to <code>?x=3D1&amp;y=3D2=
</code>.</p>
<h3 id=3D"rerunning-load-functions-untracking-dependencies">Untracking depe=
ndencies<a href=3D"https://kit.svelte.dev/docs/load#rerunning-load-function=
s-untracking-dependencies" class=3D"permalink"><span class=3D"visually-hidd=
en">permalink</span></a></h3><p>In rare cases, you may wish to exclude some=
thing from the dependency tracking mechanism. You can do this with the prov=
ided <code>untrack</code> function:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/+page.js</span><pre class=3D"shiki twoslash lsp" style=3D"bac=
kground-color: var(--shiki-color-background); color: var(--shiki-color-text=
)"><div class=3D"language-id">ts</div><div class=3D"code-container"><code><=
div class=3D"line"><span style=3D"color: var(--shiki-token-comment)">/** </=
span><span style=3D"color: var(--shiki-token-keyword)">@type</span><span st=
yle=3D"color: var(--shiki-token-comment)"> </span><span style=3D"color: var=
(--shiki-token-function)">{import('./$types').PageLoad}</span><span style=
=3D"color: var(--shiki-token-comment)"> */</span></div><div class=3D"line">=
<span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">async</span><span style=3D"color: var(--shiki-color-text=
)"> </span><span style=3D"color: var(--shiki-token-keyword)">function</span=
><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"colo=
r: var(--shiki-token-function)"><data-lsp lsp=3D"function load(event: LoadE=
vent&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, an=
y>, string | null>): MaybePromise&amp;lt;void | Record&amp;lt;string, any>>=
">load</data-lsp></span><span style=3D"color: var(--shiki-color-text)">({ <=
data-lsp lsp=3D"(parameter) untrack: &amp;lt;T>(fn: () =3D> T) =3D> T">untr=
ack</data-lsp></span><span style=3D"color: var(--shiki-token-punctuation)">=
,</span><span style=3D"color: var(--shiki-color-text)"> <data-lsp lsp=3D"(p=
arameter) url: URL">url</data-lsp> }) {</span></div><div class=3D"line"><sp=
an style=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: v=
ar(--shiki-token-comment)">// Untrack url.pathname so that path changes don=
't trigger a rerun</span></div><div class=3D"line"><span style=3D"color: va=
r(--shiki-color-text)">	</span><span style=3D"color: var(--shiki-token-keyw=
ord)">if</span><span style=3D"color: var(--shiki-color-text)"> (</span><spa=
n style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"(parameter)=
 untrack: &amp;lt;boolean>(fn: () =3D> boolean) =3D> boolean">untrack</data=
-lsp></span><span style=3D"color: var(--shiki-color-text)">(() </span><span=
 style=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><span style=3D"c=
olor: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-to=
ken-constant)"><data-lsp lsp=3D"(parameter) url: URL">url</data-lsp></span>=
<span style=3D"color: var(--shiki-color-text)">.<data-lsp lsp=3D"(property)=
 URL.pathname: string">pathname</data-lsp> </span><span style=3D"color: var=
(--shiki-token-keyword)">=3D=3D=3D</span><span style=3D"color: var(--shiki-=
color-text)"> </span><span style=3D"color: var(--shiki-token-string-express=
ion)">'/'</span><span style=3D"color: var(--shiki-color-text)">)) {</span><=
/div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">		<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(property) mes=
sage: string">message</data-lsp></span><span style=3D"color: var(--shiki-to=
ken-keyword)">:</span><span style=3D"color: var(--shiki-color-text)"> </spa=
n><span style=3D"color: var(--shiki-token-string-expression)">'Welcome!'</s=
pan><span style=3D"color: var(--shiki-color-text)"> };</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-color-text)">	}</span></div><=
div class=3D"line"><span style=3D"color: var(--shiki-color-text)">}</span><=
/div></code></div></pre><button id=3D"copy-to-clipboard-button" class=3D"sv=
elte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89=
" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"><=
/use></svg></span></button></div><div class=3D"ts-version copy-code-block c=
ode-block"><span class=3D"filename">src/routes/+page.ts</span><pre class=3D=
"shiki twoslash lsp" style=3D"background-color: var(--shiki-color-backgroun=
d); color: var(--shiki-color-text)"><div class=3D"language-id">ts</div><div=
 class=3D"code-container"><code><div class=3D"line"><span style=3D"color: v=
ar(--shiki-token-keyword)">import</span><span style=3D"color: var(--shiki-c=
olor-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">type<=
/span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D"(a=
lias) type PageLoad =3D (event: Kit.LoadEvent&amp;lt;{}, Record&amp;lt;stri=
ng, any> | null, Record&amp;lt;string, any>, string | null>) =3D> Kit.Maybe=
Promise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import PageLoad">=
PageLoad</data-lsp> } </span><span style=3D"color: var(--shiki-token-keywor=
d)">from</span><span style=3D"color: var(--shiki-color-text)"> </span><span=
 style=3D"color: var(--shiki-token-string-expression)">'./$types'</span><sp=
an style=3D"color: var(--shiki-color-text)">;</span></div><div class=3D"lin=
e">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageLoad">load</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEven=
t&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, any>,=
 string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, =
any>>&amp;#10;import PageLoad">PageLoad</data-lsp></span><span style=3D"col=
or: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-toke=
n-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> </spa=
n><span style=3D"color: var(--shiki-token-keyword)">async</span><span style=
=3D"color: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(parameter) untrac=
k: &amp;lt;T>(fn: () =3D> T) =3D> T">untrack</data-lsp></span><span style=
=3D"color: var(--shiki-token-punctuation)">,</span><span style=3D"color: va=
r(--shiki-color-text)"> <data-lsp lsp=3D"(parameter) url: URL">url</data-ls=
p> }) </span><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</spa=
n><span style=3D"color: var(--shiki-color-text)"> {</span></div><div class=
=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><span styl=
e=3D"color: var(--shiki-token-comment)">// Untrack url.pathname so that pat=
h changes don't trigger a rerun</span></div><div class=3D"line"><span style=
=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: var(--shi=
ki-token-keyword)">if</span><span style=3D"color: var(--shiki-color-text)">=
 (</span><span style=3D"color: var(--shiki-token-function)"><data-lsp lsp=
=3D"(parameter) untrack: &amp;lt;boolean>(fn: () =3D> boolean) =3D> boolean=
">untrack</data-lsp></span><span style=3D"color: var(--shiki-color-text)">(=
() </span><span style=3D"color: var(--shiki-token-keyword)">=3D&gt;</span><=
span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color:=
 var(--shiki-token-constant)"><data-lsp lsp=3D"(parameter) url: URL">url</d=
ata-lsp></span><span style=3D"color: var(--shiki-color-text)">.<data-lsp ls=
p=3D"(property) URL.pathname: string">pathname</data-lsp> </span><span styl=
e=3D"color: var(--shiki-token-keyword)">=3D=3D=3D</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-string-expression)">'/'</span><span style=3D"color: var(--shiki-color-text=
)">)) {</span></div><div class=3D"line"><span style=3D"color: var(--shiki-c=
olor-text)">		</span><span style=3D"color: var(--shiki-token-keyword)">retu=
rn</span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp lsp=3D=
"(property) message: string">message</data-lsp></span><span style=3D"color:=
 var(--shiki-token-keyword)">:</span><span style=3D"color: var(--shiki-colo=
r-text)"> </span><span style=3D"color: var(--shiki-token-string-expression)=
">'Welcome!'</span><span style=3D"color: var(--shiki-color-text)"> };</span=
></div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	=
}</span></div><div class=3D"line"><span style=3D"color: var(--shiki-color-t=
ext)">};</span></div></code></div></pre><button id=3D"copy-to-clipboard-but=
ton" class=3D"svelte-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"ic=
on svelte-5yec89" width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-cl=
ipboard-empty"></use></svg></span></button></div><h3 id=3D"rerunning-load-f=
unctions-manual-invalidation">Manual invalidation<a href=3D"https://kit.sve=
lte.dev/docs/load#rerunning-load-functions-manual-invalidation" class=3D"pe=
rmalink"><span class=3D"visually-hidden">permalink</span></a></h3><p>You ca=
n also rerun <code>load</code> functions that apply to the current page usi=
ng <a href=3D"https://kit.svelte.dev/docs/modules#$app-navigation-invalidat=
e"><code>invalidate(url)</code></a>, which reruns all <code>load</code> fun=
ctions that depend on <code>url</code>, and <a href=3D"https://kit.svelte.d=
ev/docs/modules#$app-navigation-invalidateall"><code>invalidateAll()</code>=
</a>, which reruns every <code>load</code> function. Server load functions =
will never automatically depend on a fetched <code>url</code> to avoid leak=
ing secrets to the client.</p>
<p>A <code>load</code> function depends on <code>url</code> if it calls <co=
de>fetch(url)</code> or <code>depends(url)</code>. Note that <code>url</cod=
e> can be a custom identifier that starts with <code>[a-z]:</code>:</p>
<div class=3D"js-version copy-code-block code-block"><span class=3D"filenam=
e">src/routes/random-number/+page.js</span><pre class=3D"shiki twoslash lsp=
" style=3D"background-color: var(--shiki-color-background); color: var(--sh=
iki-color-text)"><div class=3D"language-id">ts</div><div class=3D"code-cont=
ainer"><code><div class=3D"line"><span style=3D"color: var(--shiki-token-co=
mment)">/** </span><span style=3D"color: var(--shiki-token-keyword)">@type<=
/span><span style=3D"color: var(--shiki-token-comment)"> </span><span style=
=3D"color: var(--shiki-token-function)">{import('./$types').PageLoad}</span=
><span style=3D"color: var(--shiki-token-comment)"> */</span></div><div cla=
ss=3D"line"><span style=3D"color: var(--shiki-token-keyword)">export</span>=
<span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color=
: var(--shiki-token-keyword)">async</span><span style=3D"color: var(--shiki=
-color-text)"> </span><span style=3D"color: var(--shiki-token-keyword)">fun=
ction</span><span style=3D"color: var(--shiki-color-text)"> </span><span st=
yle=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"function load(e=
vent: LoadEvent&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt=
;string, any>, string | null>): MaybePromise&amp;lt;void | Record&amp;lt;st=
ring, any>>">load</data-lsp></span><span style=3D"color: var(--shiki-color-=
text)">({ <data-lsp lsp=3D"(parameter) fetch: (input: RequestInfo | URL, in=
it?: RequestInit | undefined) =3D> Promise&amp;lt;Response>">fetch</data-ls=
p></span><span style=3D"color: var(--shiki-token-punctuation)">,</span><spa=
n style=3D"color: var(--shiki-color-text)"> <data-lsp lsp=3D"(parameter) de=
pends: (...deps: string[]) =3D> void">depends</data-lsp> }) {</span></div><=
div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><=
span style=3D"color: var(--shiki-token-comment)">// load reruns when `inval=
idate('https://api.example.com/random-number')` is called...</span></div><d=
iv class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><s=
pan style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"=
color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-t=
oken-constant)"><data-lsp lsp=3D"const response: Response">response</data-l=
sp></span><span style=3D"color: var(--shiki-color-text)"> </span><span styl=
e=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color: var=
(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keywo=
rd)">await</span><span style=3D"color: var(--shiki-color-text)"> </span><sp=
an style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"(parameter=
) fetch: (input: RequestInfo | URL, init?: RequestInit | undefined) =3D> Pr=
omise&amp;lt;Response>">fetch</data-lsp></span><span style=3D"color: var(--=
shiki-color-text)">(</span><span style=3D"color: var(--shiki-token-string-e=
xpression)">'https://api.example.com/random-number'</span><span style=3D"co=
lor: var(--shiki-color-text)">);</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-comment)">// ...or when `inva=
lidate('app:random')` is called</span></div><div class=3D"line"><span style=
=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(parameter) depends: (...deps: string[=
]) =3D> void">depends</data-lsp></span><span style=3D"color: var(--shiki-co=
lor-text)">(</span><span style=3D"color: var(--shiki-token-string-expressio=
n)">'app:random'</span><span style=3D"color: var(--shiki-color-text)">);</s=
pan></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"=
><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(propert=
y) number: any">number</data-lsp></span><span style=3D"color: var(--shiki-t=
oken-keyword)">:</span><span style=3D"color: var(--shiki-color-text)"> </sp=
an><span style=3D"color: var(--shiki-token-keyword)">await</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-constant)"><data-lsp lsp=3D"const response: Response">response</d=
ata-lsp></span><span style=3D"color: var(--shiki-token-function)">.<data-ls=
p lsp=3D"(method) Body.json(): Promise&amp;lt;any>">json</data-lsp></span><=
span style=3D"color: var(--shiki-color-text)">()</span></div><div class=3D"=
line"><span style=3D"color: var(--shiki-color-text)">	};</span></div><div c=
lass=3D"line"><span style=3D"color: var(--shiki-color-text)">}</span></div>=
</code></div></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-=
4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" wid=
th=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use>=
</svg></span></button></div><div class=3D"ts-version copy-code-block code-b=
lock"><span class=3D"filename">src/routes/random-number/+page.ts</span><pre=
 class=3D"shiki twoslash lsp" style=3D"background-color: var(--shiki-color-=
background); color: var(--shiki-color-text)"><div class=3D"language-id">ts<=
/div><div class=3D"code-container"><code><div class=3D"line"><span style=3D=
"color: var(--shiki-token-keyword)">import</span><span style=3D"color: var(=
--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keywor=
d)">type</span><span style=3D"color: var(--shiki-color-text)"> { <data-lsp =
lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEvent&amp;lt;{}, Record&am=
p;lt;string, any> | null, Record&amp;lt;string, any>, string | null>) =3D> =
Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, any>>&amp;#10;import P=
ageLoad">PageLoad</data-lsp> } </span><span style=3D"color: var(--shiki-tok=
en-keyword)">from</span><span style=3D"color: var(--shiki-color-text)"> </s=
pan><span style=3D"color: var(--shiki-token-string-expression)">'./$types'<=
/span><span style=3D"color: var(--shiki-color-text)">;</span></div><div cla=
ss=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-token-keyword)"=
>export</span><span style=3D"color: var(--shiki-color-text)"> </span><span =
style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"const load: PageLoad">load</data-lsp></span><s=
pan style=3D"color: var(--shiki-token-keyword)">:</span><span style=3D"colo=
r: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token=
-function)"><data-lsp lsp=3D"(alias) type PageLoad =3D (event: Kit.LoadEven=
t&amp;lt;{}, Record&amp;lt;string, any> | null, Record&amp;lt;string, any>,=
 string | null>) =3D> Kit.MaybePromise&amp;lt;void | Record&amp;lt;string, =
any>>&amp;#10;import PageLoad">PageLoad</data-lsp></span><span style=3D"col=
or: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-toke=
n-keyword)">=3D</span><span style=3D"color: var(--shiki-color-text)"> </spa=
n><span style=3D"color: var(--shiki-token-keyword)">async</span><span style=
=3D"color: var(--shiki-color-text)"> ({ <data-lsp lsp=3D"(parameter) fetch:=
 (input: RequestInfo | URL, init?: RequestInit | undefined) =3D> Promise&am=
p;lt;Response>">fetch</data-lsp></span><span style=3D"color: var(--shiki-to=
ken-punctuation)">,</span><span style=3D"color: var(--shiki-color-text)"> <=
data-lsp lsp=3D"(parameter) depends: (...deps: string[]) =3D> void">depends=
</data-lsp> }) </span><span style=3D"color: var(--shiki-token-keyword)">=3D=
&gt;</span><span style=3D"color: var(--shiki-color-text)"> {</span></div><d=
iv class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><s=
pan style=3D"color: var(--shiki-token-comment)">// load reruns when `invali=
date('https://api.example.com/random-number')` is called...</span></div><di=
v class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span><sp=
an style=3D"color: var(--shiki-token-keyword)">const</span><span style=3D"c=
olor: var(--shiki-color-text)"> </span><span style=3D"color: var(--shiki-to=
ken-constant)"><data-lsp lsp=3D"const response: Response">response</data-ls=
p></span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-keyword)">=3D</span><span style=3D"color: var(=
--shiki-color-text)"> </span><span style=3D"color: var(--shiki-token-keywor=
d)">await</span><span style=3D"color: var(--shiki-color-text)"> </span><spa=
n style=3D"color: var(--shiki-token-function)"><data-lsp lsp=3D"(parameter)=
 fetch: (input: RequestInfo | URL, init?: RequestInit | undefined) =3D> Pro=
mise&amp;lt;Response>">fetch</data-lsp></span><span style=3D"color: var(--s=
hiki-color-text)">(</span><span style=3D"color: var(--shiki-token-string-ex=
pression)">'https://api.example.com/random-number'</span><span style=3D"col=
or: var(--shiki-color-text)">);</span></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-comment)">// ...or when `inva=
lidate('app:random')` is called</span></div><div class=3D"line"><span style=
=3D"color: var(--shiki-color-text)">	</span><span style=3D"color: var(--shi=
ki-token-function)"><data-lsp lsp=3D"(parameter) depends: (...deps: string[=
]) =3D> void">depends</data-lsp></span><span style=3D"color: var(--shiki-co=
lor-text)">(</span><span style=3D"color: var(--shiki-token-string-expressio=
n)">'app:random'</span><span style=3D"color: var(--shiki-color-text)">);</s=
pan></div><div class=3D"line">
</div><div class=3D"line"><span style=3D"color: var(--shiki-color-text)">	<=
/span><span style=3D"color: var(--shiki-token-keyword)">return</span><span =
style=3D"color: var(--shiki-color-text)"> {</span></div><div class=3D"line"=
><span style=3D"color: var(--shiki-color-text)">		<data-lsp lsp=3D"(propert=
y) number: any">number</data-lsp></span><span style=3D"color: var(--shiki-t=
oken-keyword)">:</span><span style=3D"color: var(--shiki-color-text)"> </sp=
an><span style=3D"color: var(--shiki-token-keyword)">await</span><span styl=
e=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--sh=
iki-token-constant)"><data-lsp lsp=3D"const response: Response">response</d=
ata-lsp></span><span style=3D"color: var(--shiki-token-function)">.<data-ls=
p lsp=3D"(method) Body.json(): Promise&amp;lt;any>">json</data-lsp></span><=
span style=3D"color: var(--shiki-color-text)">()</span><span style=3D"color=
: var(--shiki-token-punctuation)">,</span></div><div class=3D"line"><span s=
tyle=3D"color: var(--shiki-color-text)">	};</span></div><div class=3D"line"=
><span style=3D"color: var(--shiki-color-text)">};</span></div></code></div=
></pre><button id=3D"copy-to-clipboard-button" class=3D"svelte-4cj3ib"><spa=
n class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" width=3D"20" he=
ight=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></use></svg></span=
></button></div><div class=3D"js-version copy-code-block code-block"><span =
class=3D"filename">src/routes/random-number/+page.svelte</span><pre class=
=3D"shiki" style=3D"background-color: var(--shiki-color-background)"><code>=
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">script</spa=
n><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> { invalidate</span><span style=3D"colo=
r: var(--shiki-token-punctuation)">,</span><span style=3D"color: var(--shik=
i-color-text)"> invalidateAll } </span><span style=3D"color: var(--shiki-to=
ken-keyword)">from</span><span style=3D"color: var(--shiki-color-text)"> </=
span><span style=3D"color: var(--shiki-token-string-expression)">'$app/navi=
gation'</span><span style=3D"color: var(--shiki-color-text)">;</span></span=
>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-comment)">/** </span><span style=
=3D"color: var(--shiki-token-keyword)">@type</span><span style=3D"color: va=
r(--shiki-token-comment)"> </span><span style=3D"color: var(--shiki-token-f=
unction)">{import('./$types').PageData}</span><span style=3D"color: var(--s=
hiki-token-comment)"> */</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">function</span><span sty=
le=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--s=
hiki-token-function)">rerunLoadFunction</span><span style=3D"color: var(--s=
hiki-color-text)">() {</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-comment)">// any of these will ca=
use the `load` function to rerun</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-function)">invalidate</span><span=
 style=3D"color: var(--shiki-color-text)">(</span><span style=3D"color: var=
(--shiki-token-string-expression)">'app:random'</span><span style=3D"color:=
 var(--shiki-color-text)">);</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-function)">invalidate</span><span=
 style=3D"color: var(--shiki-color-text)">(</span><span style=3D"color: var=
(--shiki-token-string-expression)">'https://api.example.com/random-number'<=
/span><span style=3D"color: var(--shiki-color-text)">);</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-function)">invalidate</span><span=
 style=3D"color: var(--shiki-color-text)">(url </span><span style=3D"color:=
 var(--shiki-token-keyword)">=3D&gt;</span><span style=3D"color: var(--shik=
i-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)">u=
rl</span><span style=3D"color: var(--shiki-token-function)">.</span><span s=
tyle=3D"color: var(--shiki-token-constant)">href</span><span style=3D"color=
: var(--shiki-token-function)">.includes</span><span style=3D"color: var(--=
shiki-color-text)">(</span><span style=3D"color: var(--shiki-token-string-e=
xpression)">'random-number'</span><span style=3D"color: var(--shiki-color-t=
ext)">));</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-function)">invalidateAll</span><s=
pan style=3D"color: var(--shiki-color-text)">();</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	}</spa=
n></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">p</span><sp=
an style=3D"color: var(--shiki-color-text)">&gt;random number: {</span><spa=
n style=3D"color: var(--shiki-token-constant)">data</span><span style=3D"co=
lor: var(--shiki-color-text)">.number}&lt;/</span><span style=3D"color: var=
(--shiki-token-string-expression)">p</span><span style=3D"color: var(--shik=
i-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">button</spa=
n><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"col=
or: var(--shiki-token-keyword)">on</span><span style=3D"color: var(--shiki-=
color-text)">:</span><span style=3D"color: var(--shiki-token-function)">cli=
ck</span><span style=3D"color: var(--shiki-token-keyword)">=3D</span><span =
style=3D"color: var(--shiki-color-text)">{rerunLoadFunction}&gt;Update rand=
om number&lt;/</span><span style=3D"color: var(--shiki-token-string-express=
ion)">button</span><span style=3D"color: var(--shiki-color-text)">&gt;</spa=
n></span></code></pre><button id=3D"copy-to-clipboard-button" class=3D"svel=
te-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" =
width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></u=
se></svg></span></button></div><div class=3D"ts-version copy-code-block cod=
e-block"><span class=3D"filename">src/routes/random-number/+page.svelte</sp=
an><pre class=3D"shiki" style=3D"background-color: var(--shiki-color-backgr=
ound)"><code><span class=3D"line"><span style=3D"color: var(--shiki-color-t=
ext)">&lt;</span><span style=3D"color: var(--shiki-token-string-expression)=
">script</span><span style=3D"color: var(--shiki-color-text)"> </span><span=
 style=3D"color: var(--shiki-token-function)">lang</span><span style=3D"col=
or: var(--shiki-token-keyword)">=3D</span><span style=3D"color: var(--shiki=
-token-string-expression)">"ts"</span><span style=3D"color: var(--shiki-col=
or-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> { invalidate</span><span style=3D"colo=
r: var(--shiki-token-punctuation)">,</span><span style=3D"color: var(--shik=
i-color-text)"> invalidateAll } </span><span style=3D"color: var(--shiki-to=
ken-keyword)">from</span><span style=3D"color: var(--shiki-color-text)"> </=
span><span style=3D"color: var(--shiki-token-string-expression)">'$app/navi=
gation'</span><span style=3D"color: var(--shiki-color-text)">;</span></span=
>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">import</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">type</span><span style=3D"color: var(--shiki-color-text)=
"> { PageData } </span><span style=3D"color: var(--shiki-token-keyword)">fr=
om</span><span style=3D"color: var(--shiki-color-text)"> </span><span style=
=3D"color: var(--shiki-token-string-expression)">'./$types'</span><span sty=
le=3D"color: var(--shiki-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">export</span><span style=
=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--shi=
ki-token-keyword)">let</span><span style=3D"color: var(--shiki-color-text)"=
> data</span><span style=3D"color: var(--shiki-token-keyword)">:</span><spa=
n style=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: va=
r(--shiki-token-function)">PageData</span><span style=3D"color: var(--shiki=
-color-text)">;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	</span=
><span style=3D"color: var(--shiki-token-keyword)">function</span><span sty=
le=3D"color: var(--shiki-color-text)"> </span><span style=3D"color: var(--s=
hiki-token-function)">rerunLoadFunction</span><span style=3D"color: var(--s=
hiki-color-text)">() {</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-comment)">// any of these will ca=
use the `load` function to rerun</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-function)">invalidate</span><span=
 style=3D"color: var(--shiki-color-text)">(</span><span style=3D"color: var=
(--shiki-token-string-expression)">'app:random'</span><span style=3D"color:=
 var(--shiki-color-text)">);</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-function)">invalidate</span><span=
 style=3D"color: var(--shiki-color-text)">(</span><span style=3D"color: var=
(--shiki-token-string-expression)">'https://api.example.com/random-number'<=
/span><span style=3D"color: var(--shiki-color-text)">);</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-function)">invalidate</span><span=
 style=3D"color: var(--shiki-color-text)">((url) </span><span style=3D"colo=
r: var(--shiki-token-keyword)">=3D&gt;</span><span style=3D"color: var(--sh=
iki-color-text)"> </span><span style=3D"color: var(--shiki-token-constant)"=
>url</span><span style=3D"color: var(--shiki-token-function)">.</span><span=
 style=3D"color: var(--shiki-token-constant)">href</span><span style=3D"col=
or: var(--shiki-token-function)">.includes</span><span style=3D"color: var(=
--shiki-color-text)">(</span><span style=3D"color: var(--shiki-token-string=
-expression)">'random-number'</span><span style=3D"color: var(--shiki-color=
-text)">));</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">		</spa=
n><span style=3D"color: var(--shiki-token-function)">invalidateAll</span><s=
pan style=3D"color: var(--shiki-color-text)">();</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">	}</spa=
n></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;/</=
span><span style=3D"color: var(--shiki-token-string-expression)">script</sp=
an><span style=3D"color: var(--shiki-color-text)">&gt;</span></span>
<span class=3D"line"></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">p</span><sp=
an style=3D"color: var(--shiki-color-text)">&gt;random number: {</span><spa=
n style=3D"color: var(--shiki-token-constant)">data</span><span style=3D"co=
lor: var(--shiki-color-text)">.number}&lt;/</span><span style=3D"color: var=
(--shiki-token-string-expression)">p</span><span style=3D"color: var(--shik=
i-color-text)">&gt;</span></span>
<span class=3D"line"><span style=3D"color: var(--shiki-color-text)">&lt;</s=
pan><span style=3D"color: var(--shiki-token-string-expression)">button</spa=
n><span style=3D"color: var(--shiki-color-text)"> </span><span style=3D"col=
or: var(--shiki-token-keyword)">on</span><span style=3D"color: var(--shiki-=
color-text)">:</span><span style=3D"color: var(--shiki-token-function)">cli=
ck</span><span style=3D"color: var(--shiki-token-keyword)">=3D</span><span =
style=3D"color: var(--shiki-color-text)">{rerunLoadFunction}&gt;Update rand=
om number&lt;/</span><span style=3D"color: var(--shiki-token-string-express=
ion)">button</span><span style=3D"color: var(--shiki-color-text)">&gt;</spa=
n></span></code></pre><button id=3D"copy-to-clipboard-button" class=3D"svel=
te-4cj3ib"><span class=3D"svelte-4cj3ib"><svg class=3D"icon svelte-5yec89" =
width=3D"20" height=3D"20"><use xlink:href=3D"#copy-to-clipboard-empty"></u=
se></svg></span></button></div><h3 id=3D"rerunning-load-functions-when-do-l=
oad-functions-rerun">When do load functions rerun?<a href=3D"https://kit.sv=
elte.dev/docs/load#rerunning-load-functions-when-do-load-functions-rerun" c=
lass=3D"permalink"><span class=3D"visually-hidden">permalink</span></a></h3=
><p>To summarize, a <code>load</code> function will rerun in the following =
situations:</p>
<ul>
<li>It references a property of <code>params</code> whose value has changed=
</li>
<li>It references a property of <code>url</code> (such as <code>url.pathnam=
e</code> or <code>url.search</code>) whose value has changed. Properties in=
 <code>request.url</code> are <em>not</em> tracked</li>
<li>It calls <code>url.searchParams.get(...)</code>, <code>url.searchParams=
.getAll(...)</code> or <code>url.searchParams.has(...)</code> and the param=
eter in question changes. Accessing other properties of <code>url.searchPar=
ams</code> will have the same effect as accessing <code>url.search</code>.<=
/li>
<li>It calls <code>await parent()</code> and a parent <code>load</code> fun=
ction reran</li>
<li>It declared a dependency on a specific URL via <a href=3D"https://kit.s=
velte.dev/docs/load#making-fetch-requests"><code>fetch</code></a> (universa=
l load only) or <a href=3D"https://kit.svelte.dev/docs/types#public-types-l=
oadevent"><code>depends</code></a>, and that URL was marked invalid with <a=
 href=3D"https://kit.svelte.dev/docs/modules#$app-navigation-invalidate"><c=
ode>invalidate(url)</code></a></li>
<li>All active <code>load</code> functions were forcibly rerun with <a href=
=3D"https://kit.svelte.dev/docs/modules#$app-navigation-invalidateall"><cod=
e>invalidateAll()</code></a></li>
</ul>
<p><code>params</code> and <code>url</code> can change in response to a <co=
de>&lt;a href=3D".."&gt;</code> link click, a <a href=3D"https://kit.svelte=
.dev/docs/form-actions#get-vs-post"><code>&lt;form&gt;</code> interaction</=
a>, a <a href=3D"https://kit.svelte.dev/docs/modules#$app-navigation-goto">=
<code>goto</code></a> invocation, or a <a href=3D"https://kit.svelte.dev/do=
cs/modules#sveltejs-kit-redirect"><code>redirect</code></a>.</p>
<p>Note that rerunning a <code>load</code> function will update the <code>d=
ata</code> prop inside the corresponding <code>+layout.svelte</code> or <co=
de>+page.svelte</code>; it does <em>not</em> cause the component to be recr=
eated. As a result, internal state is preserved. If this isn't what you wan=
t, you can reset whatever you need to reset inside an <a href=3D"https://ki=
t.svelte.dev/docs/modules#$app-navigation-afternavigate"><code>afterNavigat=
e</code></a> callback, and/or wrap your component in a <a href=3D"https://s=
velte.dev/docs#template-syntax-key"><code>{#key ...}</code></a> block.</p>
<h2 id=3D"implications-for-authentication">Implications for authentication<=
a href=3D"https://kit.svelte.dev/docs/load#implications-for-authentication"=
 class=3D"permalink"><span class=3D"visually-hidden">permalink</span></a></=
h2><p>A couple features of loading data have important implications for aut=
h checks:</p>
<ul>
<li>Layout <code>load</code> functions do not run on every request, such as=
 during client side navigation between child routes. <a href=3D"https://kit=
.svelte.dev/docs/load#rerunning-load-functions-when-do-load-functions-rerun=
">(When do load functions rerun?)</a></li>
<li>Layout and page <code>load</code> functions run concurrently unless <co=
de>await parent()</code> is called. If a layout <code>load</code> throws, t=
he page <code>load</code> function runs, but the client will not receive th=
e returned data.</li>
</ul>
<p>There are a few possible strategies to ensure an auth check occurs befor=
e protected code.</p>
<p>To prevent data waterfalls and preserve layout <code>load</code> caches:=
</p>
<ul>
<li>Use <a href=3D"https://kit.svelte.dev/docs/hooks">hooks</a> to protect =
multiple routes before any <code>load</code> functions run</li>
<li>Use auth guards directly in <code>+page.server.js</code> <code>load</co=
de> functions for route specific protection</li>
</ul>
<p>Putting an auth guard in <code>+layout.server.js</code> requires all chi=
ld pages to call <code>await parent()</code> before protected code. Unless =
every child page depends on returned data from <code>await parent()</code>,=
 the other options will be more performant.</p>
<h2 id=3D"further-reading">Further reading<a href=3D"https://kit.svelte.dev=
/docs/load#further-reading" class=3D"permalink"><span class=3D"visually-hid=
den">permalink</span></a></h2><ul>
<li><a href=3D"https://learn.svelte.dev/tutorial/page-data">Tutorial: Loadi=
ng data</a></li>
<li><a href=3D"https://learn.svelte.dev/tutorial/error-basics">Tutorial: Er=
rors and redirects</a></li>
<li><a href=3D"https://learn.svelte.dev/tutorial/await-parent">Tutorial: Ad=
vanced loading</a></li>
</ul>
</section> <div class=3D"controls svelte-zelrq3"><div class=3D"svelte-zelrq=
3"><span class=3D"svelte-zelrq3" data-svelte-h=3D"svelte-14z7y6c">previous<=
/span> <a href=3D"https://kit.svelte.dev/docs/routing">Routing</a></div> <d=
iv class=3D"svelte-zelrq3"><span class=3D"svelte-zelrq3" data-svelte-h=3D"s=
velte-1swaq3c">next</span> <a href=3D"https://kit.svelte.dev/docs/form-acti=
ons">Form actions</a></div></div></div></div> <div class=3D"toc-container s=
velte-p2d7pa"><nav aria-label=3D"Docs" class=3D"svelte-1os1f05"><ul class=
=3D"sidebar svelte-1os1f05"><li class=3D"svelte-1os1f05"><span class=3D"sec=
tion svelte-1os1f05">Getting started</span> <ul class=3D"svelte-1os1f05"><l=
i class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"pag=
e svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/introduction">Introdu=
ction</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=
=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/cre=
ating-a-project">Creating a project</a> </li><li class=3D"svelte-1os1f05"><=
a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"ht=
tps://kit.svelte.dev/docs/project-structure">Project structure</a> </li><li=
 class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page=
 svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/web-standards">Web sta=
ndards</a> </li></ul> </li><li class=3D"svelte-1os1f05"><span class=3D"sect=
ion svelte-1os1f05">Core concepts</span> <ul class=3D"svelte-1os1f05"><li c=
lass=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page s=
velte-1os1f05" href=3D"https://kit.svelte.dev/docs/routing">Routing</a> </l=
i><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D=
"page svelte-1os1f05 active" href=3D"https://kit.svelte.dev/docs/load">Load=
ing data</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-da=
ta=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/f=
orm-actions">Form actions</a> </li><li class=3D"svelte-1os1f05"><a data-sve=
ltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.=
svelte.dev/docs/page-options">Page options</a> </li><li class=3D"svelte-1os=
1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05" hre=
f=3D"https://kit.svelte.dev/docs/state-management">State management</a> </l=
i></ul> </li><li class=3D"svelte-1os1f05"><span class=3D"section svelte-1os=
1f05">Build and deploy</span> <ul class=3D"svelte-1os1f05"><li class=3D"sve=
lte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f=
05" href=3D"https://kit.svelte.dev/docs/building-your-app">Building your ap=
p</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D""=
 class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/adapters=
">Adapters</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-=
data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs=
/adapter-auto">Zero-config deployments</a> </li><li class=3D"svelte-1os1f05=
"><a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D=
"https://kit.svelte.dev/docs/adapter-node">Node servers</a> </li><li class=
=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelt=
e-1os1f05" href=3D"https://kit.svelte.dev/docs/adapter-static">Static site =
generation</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-=
data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs=
/single-page-apps">Single-page apps</a> </li><li class=3D"svelte-1os1f05"><=
a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"ht=
tps://kit.svelte.dev/docs/adapter-cloudflare">Cloudflare Pages</a> </li><li=
 class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page=
 svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/adapter-cloudflare-wor=
kers">Cloudflare Workers</a> </li><li class=3D"svelte-1os1f05"><a data-svel=
tekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.s=
velte.dev/docs/adapter-netlify">Netlify</a> </li><li class=3D"svelte-1os1f0=
5"><a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=
=3D"https://kit.svelte.dev/docs/adapter-vercel">Vercel</a> </li><li class=
=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelt=
e-1os1f05" href=3D"https://kit.svelte.dev/docs/writing-adapters">Writing ad=
apters</a> </li></ul> </li><li class=3D"svelte-1os1f05"><span class=3D"sect=
ion svelte-1os1f05">Advanced</span> <ul class=3D"svelte-1os1f05"><li class=
=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelt=
e-1os1f05" href=3D"https://kit.svelte.dev/docs/advanced-routing">Advanced r=
outing</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=
=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/hoo=
ks">Hooks</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-d=
ata=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/=
errors">Errors</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-prel=
oad-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/=
docs/link-options">Link options</a> </li><li class=3D"svelte-1os1f05"><a da=
ta-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"https:=
//kit.svelte.dev/docs/service-workers">Service workers</a> </li><li class=
=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelt=
e-1os1f05" href=3D"https://kit.svelte.dev/docs/server-only-modules">Server-=
only modules</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preloa=
d-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/do=
cs/snapshots">Snapshots</a> </li><li class=3D"svelte-1os1f05"><a data-svelt=
ekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.sv=
elte.dev/docs/shallow-routing">Shallow routing</a> </li><li class=3D"svelte=
-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05"=
 href=3D"https://kit.svelte.dev/docs/packaging">Packaging</a> </li></ul> </=
li><li class=3D"svelte-1os1f05"><span class=3D"section svelte-1os1f05">Best=
 practices</span> <ul class=3D"svelte-1os1f05"><li class=3D"svelte-1os1f05"=
><a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"=
https://kit.svelte.dev/docs/performance">Performance</a> </li><li class=3D"=
svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelte-1o=
s1f05" href=3D"https://kit.svelte.dev/docs/images">Images</a> </li><li clas=
s=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svel=
te-1os1f05" href=3D"https://kit.svelte.dev/docs/accessibility">Accessibilit=
y</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D""=
 class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/seo">SEO=
</a> </li></ul> </li><li class=3D"svelte-1os1f05"><span class=3D"section sv=
elte-1os1f05">Reference</span> <ul class=3D"svelte-1os1f05"><li class=3D"sv=
elte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1=
f05" href=3D"https://kit.svelte.dev/docs/configuration">Configuration</a> <=
/li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=
=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/cli">Command L=
ine Interface</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-prelo=
ad-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/d=
ocs/modules">Modules</a> </li><li class=3D"svelte-1os1f05"><a data-svelteki=
t-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelt=
e.dev/docs/types">Types</a> </li></ul> </li><li class=3D"svelte-1os1f05"><s=
pan class=3D"section svelte-1os1f05">Appendix</span> <ul class=3D"svelte-1o=
s1f05"><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" cla=
ss=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/faq">Frequen=
tly asked questions</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit=
-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte=
.dev/docs/integrations">Integrations</a> </li><li class=3D"svelte-1os1f05">=
<a data-sveltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"h=
ttps://kit.svelte.dev/docs/migrating-to-sveltekit-2">Migrating to SvelteKit=
 v2</a> </li><li class=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D=
"" class=3D"page svelte-1os1f05" href=3D"https://kit.svelte.dev/docs/migrat=
ing">Migrating from Sapper</a> </li><li class=3D"svelte-1os1f05"><a data-sv=
eltekit-preload-data=3D"" class=3D"page svelte-1os1f05" href=3D"https://kit=
.svelte.dev/docs/additional-resources">Additional resources</a> </li><li cl=
ass=3D"svelte-1os1f05"><a data-sveltekit-preload-data=3D"" class=3D"page sv=
elte-1os1f05" href=3D"https://kit.svelte.dev/docs/glossary">Glossary</a> </=
li></ul> </li></ul></nav> <div class=3D"ts-toggle svelte-1os1f05"><div clas=
s=3D"input-output-toggle svelte-1gwn6w1"><span aria-hidden=3D"true">JavaScr=
ipt</span> <button aria-pressed=3D"false" aria-label=3D"TypeScript code exa=
mples" class=3D"svelte-19k14fe"></button> <span aria-hidden=3D"true">TypeSc=
ript</span></div></div></div></div></main> <div class=3D"banner-bottom"></d=
iv></div>  <div aria-live=3D"assertive" class=3D"visually-hidden"></div> <d=
iv id=3D"svelte-announcer" aria-live=3D"assertive" aria-atomic=3D"true" sty=
le=3D"position: absolute; left: 0px; top: 0px; clip: rect(0px, 0px, 0px, 0p=
x); clip-path: inset(50%); overflow: hidden; white-space: nowrap; width: 1p=
x; height: 1px;"></div></div>
=09

</body></html>
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-58f29a70-0913-43d9-bda7-5df74a6ed710@mhtml.blink

@charset "utf-8";

.ts-version { display: none; }

body.prefers-ts .js-version { display: none; }

body.prefers-ts .ts-version { display: block; }

.no-js .ts-toggle { display: none; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/0.rZS1kFg9.css

@charset "utf-8";

nav.svelte-g9bops.svelte-g9bops { font-family: var(--sk-font); height: 100%=
; padding: 0px 0.29rem 0.29rem; overflow-y: auto; }

section.svelte-g9bops > ul.svelte-g9bops { margin-bottom: 0px; padding: 1re=
m 1rem 0px; }

section.svelte-g9bops.svelte-g9bops:not(:first-child) { padding-top: 1.5rem=
; }

hr.svelte-g9bops.svelte-g9bops { border-right: none; border-bottom: none; b=
order-left: none; border-image: initial; border-top: 1px solid var(--sk-bac=
k-5); width: 95%; margin: 1rem 0px; transform: translate(2.5%); }

h3.svelte-g9bops.svelte-g9bops, h4.svelte-g9bops.svelte-g9bops { font-size:=
 var(--sk-text-xs); text-transform: uppercase; letter-spacing: 0.1em; color=
: var(--sk-text-3); padding-bottom: 0.8rem; font-weight: 600; display: bloc=
k; }

h3.svelte-g9bops.svelte-g9bops { z-index: 1; font-size: var(--sk-text-s); b=
ackground-color: var(--sk-back-3); border-radius: 1rem 1rem 0px 0px; width:=
 98%; margin-left: 4px; padding: 1rem 1rem 1rem 4px; position: sticky; top:=
 -1px; }

ul.svelte-g9bops.svelte-g9bops { margin: 0px 0px 2.5rem; list-style-type: n=
one; }

li.svelte-g9bops.svelte-g9bops { display: block; }

a.svelte-g9bops.svelte-g9bops { border-radius: var(--sk-border-radius); col=
or: var(--sk-text-2); align-items: center; line-height: 1; transition: back=
ground-color 0.1s ease 0s, color 0.1s ease 0s; display: flex; padding: 0.9r=
em 0.75rem !important; }

a.svelte-g9bops.svelte-g9bops:hover { background-color: var(--sk-back-4); t=
ext-decoration: none; }

[aria-current=3D"true"].svelte-g9bops.svelte-g9bops { font-weight: 400; bac=
kground-color: hsla(var(--sk-theme-1-hsl),.1) !important; color: var(--sk-t=
heme-1) !important; }

.badge.svelte-g9bops.svelte-g9bops { letter-spacing: 1px; font-size: 1.1rem=
; font-weight: 600; font-family: var(--sk-font); color: var(--sk-theme-1); =
background: hsla(var(--sk-theme-1-hsl),.1); border-radius: 30px; justify-co=
ntent: center; align-items: center; padding: 0.5rem 0.75rem; line-height: 1=
; display: flex; }

.menu.svelte-1ih0snl.svelte-1ih0snl { left: 0px; bottom: var(--bottom,var(-=
-sk-nav-height)); z-index: 1; pointer-events: none; border-radius: 1rem 1re=
m 0px 0px; width: 100%; height: 70vh; display: block; position: fixed; over=
flow: hidden; transform: translate(0px); }

button.svelte-1ih0snl.svelte-1ih0snl { width: var(--sk-nav-height); justify=
-content: center; align-items: center; gap: 1.5rem; height: 100%; line-heig=
ht: 1; display: flex; }

.menu-background.svelte-1ih0snl.svelte-1ih0snl { background: var(--backgrou=
nd,var(--sk-back-2)); will-change: height; transition-duration: ; transitio=
n-timing-function: ; transition-delay: ; transition-behavior: ; border-radi=
us: 1rem 1rem 0px 0px; width: 100%; height: 99.5%; transition-property: bac=
kground; position: absolute; bottom: 0px; left: 0px; box-shadow: rgba(0, 0,=
 0, 0.19) 0px 0px 6px; }

.menu-background.ready.svelte-1ih0snl.svelte-1ih0snl { transition-property:=
 height, background; }

.menu-background.dark.svelte-1ih0snl.svelte-1ih0snl { border-top: 1.1px sol=
id rgba(255, 255, 255, 0.2); }

.mobile-main-menu.svelte-1ih0snl.svelte-1ih0snl { contain: layout paint; ba=
ckface-visibility: hidden; height: 100%; transform: translateZ(0px); }

.clip.svelte-1ih0snl.svelte-1ih0snl { will-change: clip-path; width: 100%; =
height: 100%; transition: -webkit-clip-path 0.4s cubic-bezier(0.23, 1, 0.32=
, 1) 0s, clip-path 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s; }

.viewport.svelte-1ih0snl.svelte-1ih0snl { grid-template-columns: 50% 50%; g=
rid-auto-rows: 100%; width: 200%; height: 100%; transition: transform 0.4s =
cubic-bezier(0.23, 1, 0.32, 1) 0s; display: grid; position: relative; botto=
m: -1px; }

.viewport.reduced-motion.svelte-1ih0snl.svelte-1ih0snl { transition-duratio=
n: 0.01ms; }

.viewport.offset.svelte-1ih0snl.svelte-1ih0snl { transform: translate(-50%)=
; }

.universal.svelte-1ih0snl .contents.svelte-1ih0snl { width: 50%; max-height=
: 70vh; padding: 1rem; position: absolute; bottom: 0px; overflow-y: scroll;=
 }

.viewport.svelte-1ih0snl > .svelte-1ih0snl { transition: transform 0s ease =
0s, opacity 0s ease 0s; overflow-y: auto; }

.context.svelte-1ih0snl.svelte-1ih0snl { height: 99%; padding-bottom: 2rem;=
 position: relative; bottom: -7px; }

.back-button.svelte-1ih0snl.svelte-1ih0snl { z-index: 9; color: var(--sk-te=
xt-3); background-color: var(--sk-back-3); justify-content: start; align-it=
ems: center; gap: 1rem; width: 50%; height: 48px; padding: 0px 1.5rem; font=
-size: 0.9em; display: flex; position: absolute; bottom: -1px; right: 0px; =
box-shadow: rgba(0, 0, 0, 0.19) 0px 0px 6px; }

.back-button.dark.svelte-1ih0snl.svelte-1ih0snl { border-top: solid 1px var=
(--sk-back-4); box-shadow: none; }

.back-button.svelte-1ih0snl svg { transform: scale(0.8); }

.viewport.svelte-1ih0snl a { color: var(--sk-text-2); align-items: center; =
height: 4rem; margin: 0.3rem 0px; padding: 0.3rem 0px; display: block; posi=
tion: relative; }

.universal.svelte-1ih0snl .contents.svelte-1ih0snl, .context.svelte-1ih0snl=
.svelte-1ih0snl, .back-button.svelte-1ih0snl.svelte-1ih0snl { pointer-event=
s: all; }

.universal.svelte-1ih0snl .link-item.svelte-1ih0snl { padding-right: var(--=
button-width); position: relative; }

.universal.svelte-1ih0snl .contents .link-item button.svelte-1ih0snl { widt=
h: var(--button-width); height: 100%; position: absolute; top: 0px; right: =
0px; }

.viewport.svelte-1ih0snl .link-item.svelte-1ih0snl svg { stroke-width: 0; }

.viewport.svelte-1ih0snl a { border-radius: var(--sk-border-radius); align-=
items: center; width: 100%; height: 100%; padding-left: 1rem; display: flex=
; }

.viewport.svelte-1ih0snl a[aria-current=3D"true"] { background-color: hsla(=
var(--sk-theme-1-hsl),.05); }

.viewport.svelte-1ih0snl a:hover, .related-menu-arrow.svelte-1ih0snl.svelte=
-1ih0snl:hover { border-radius: var(--sk-border-radius); background-color: =
var(--sk-back-4); text-decoration: none; }

.viewport.svelte-1ih0snl a[aria-current=3D"true"]:hover { background-color:=
 hsla(var(--sk-theme-1-hsl),.05); color: var(--sk-theme-1); }

hr.svelte-hbkmlj { border: none; align-items: center; height: 100%; display=
: flex; }

hr.svelte-hbkmlj::before { content: "=E2=80=A2"; color: rgb(204, 204, 204);=
 margin: 0px 0.3rem; }

@media (max-width: 832px) {
  hr.svelte-hbkmlj { background: var(--sk-back-translucent); height: 1px; m=
argin: 0.5rem 0px; display: block; position: relative; }
}

nav.svelte-1wcjdtw.svelte-1wcjdtw { z-index: 100; height: var(--sk-nav-heig=
ht); background-color: var(--sk-back-2); font-family: var(--sk-font); user-=
select: none; transition-duration: ; transition-timing-function: ; transiti=
on-delay: ; transition-behavior: ; isolation: isolate; width: 100vw; margin=
: 0px auto; transition-property: transform, background; display: flex; posi=
tion: fixed; top: 0px; }

nav.svelte-1wcjdtw.svelte-1wcjdtw::after { content: ""; background: linear-=
gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.05)); width: 100%; height: 4px; =
position: absolute; top: -4px; left: 0px; }

.current-section.svelte-1wcjdtw.svelte-1wcjdtw { color: var(--sk-text-3); a=
lign-items: center; margin-left: 0.4em; font-size: 0.8em; display: flex; }

@media (max-width: 800px) {
  nav.svelte-1wcjdtw.svelte-1wcjdtw:not(.visible):not(:focus-within) { tran=
sform: translateY(calc(var(--sk-nav-height))); }
}

.menu.svelte-1wcjdtw.svelte-1wcjdtw { width: 100%; display: flex; position:=
 relative; }

.menu.svelte-1wcjdtw a { color: var(--sk-text-2); white-space: nowrap; marg=
in: 0px 0.3em; line-height: 1; }

.menu.svelte-1wcjdtw a[aria-current=3D"page"] { color: var(--sk-theme-1); b=
ox-shadow: inset 0 -1px 0 0 var(--sk-theme-1); }

.menu.svelte-1wcjdtw a[aria-current=3D"page"]:hover { text-decoration: none=
; }

.home-link.svelte-1wcjdtw.svelte-1wcjdtw { background-image: url("data:imag=
e/svg+xml,%3csvg%20xmlns=3D'http://www.w3.org/2000/svg'%20xmlns:xlink=3D'ht=
tp://www.w3.org/1999/xlink'%20viewBox=3D'0%200%20358.464%20235.952'%3e%3cde=
fs%3e%3cstyle%3e.a{fill:%23ff3e00;}.b{fill:%23fff;}.c{fill:%231273ff;}.d{fi=
ll:%23ffd815;}%3c/style%3e%3csymbol%20id=3D'a'%20viewBox=3D'0%200%2093.224%=
20112'%3e%3cpath%20class=3D'a'%20d=3D'M87.269,14.819C76.869-.066,56.328-4.4=
78,41.477,4.984L15.4,21.608A29.921,29.921,0,0,0,1.876,41.651,31.514,31.514,=
0,0,0,4.984,61.882,30.006,30.006,0,0,0,.507,73.065,31.892,31.892,0,0,0,5.95=
5,97.181c10.4,14.887,30.942,19.3,45.791,9.835L77.829,90.392A29.915,29.915,0=
,0,0,91.347,70.349a31.522,31.522,0,0,0-3.1-20.232,30.019,30.019,0,0,0,4.474=
-11.182,31.878,31.878,0,0,0-5.447-24.116'/%3e%3cpath%20class=3D'b'%20d=3D'M=
38.929,98.582a20.72,20.72,0,0,1-22.237-8.243,19.176,19.176,0,0,1-3.276-14.5=
,18.143,18.143,0,0,1,.623-2.435l.491-1.5,1.337.981a33.633,33.633,0,0,0,10.2=
,5.1l.969.294-.089.968A5.844,5.844,0,0,0,28,83.122a6.24,6.24,0,0,0,6.7,2.48=
5,5.748,5.748,0,0,0,1.6-.7L62.382,68.281a5.43,5.43,0,0,0,2.451-3.631,5.794,=
5.794,0,0,0-.988-4.371,6.244,6.244,0,0,0-6.7-2.487,5.755,5.755,0,0,0-1.6.7l=
-9.953,6.345a19.06,19.06,0,0,1-5.3,2.326,20.719,20.719,0,0,1-22.237-8.243,1=
9.171,19.171,0,0,1-3.277-14.5A17.992,17.992,0,0,1,22.915,32.37L49,15.747a19=
.03,19.03,0,0,1,5.3-2.329,20.72,20.72,0,0,1,22.237,8.243,19.176,19.176,0,0,=
1,3.277,14.5,18.453,18.453,0,0,1-.624,2.435l-.491,1.5-1.336-.979a33.616,33.=
616,0,0,0-10.2-5.1l-.97-.294.09-.968a5.859,5.859,0,0,0-1.052-3.878,6.241,6.=
241,0,0,0-6.7-2.485,5.748,5.748,0,0,0-1.6.7L30.842,43.719a5.421,5.421,0,0,0=
-2.449,3.63,5.79,5.79,0,0,0,.986,4.372,6.245,6.245,0,0,0,6.7,2.487,5.773,5.=
773,0,0,0,1.6-.7l9.952-6.342a18.978,18.978,0,0,1,5.3-2.328,20.718,20.718,0,=
0,1,22.236,8.243,19.171,19.171,0,0,1,3.277,14.5,18,18,0,0,1-8.13,12.054L44.=
229,96.253a19.017,19.017,0,0,1-5.3,2.329'/%3e%3c/symbol%3e%3c/defs%3e%3cuse=
%20width=3D'93.224'%20height=3D'112'%20transform=3D'translate(34.228%2029.2=
67)%20scale(1.584)'%20xlink:href=3D'%23a'/%3e%3c/svg%3e"); background-posit=
ion: calc(var(--sk-page-padding-side) - 1rem)50%; padding-left: calc(var(--=
sk-page-padding-side) + 4rem); text-transform: uppercase; letter-spacing: 0=
.05em; color: var(--sk-text-4); background-repeat: no-repeat; background-si=
ze: auto 70%; align-items: center; max-width: max-content; height: 100%; pa=
dding-top: 5px; font-size: 1.8rem; text-decoration: none; display: flex; }

.home-small.svelte-1wcjdtw.svelte-1wcjdtw { margin-left: -0.75rem; display:=
 none; }

.home-large.svelte-1wcjdtw.svelte-1wcjdtw { color: var(--sk-text-4); displa=
y: block; }

.home-link.svelte-1wcjdtw strong { color: var(--sk-text-1); font-weight: in=
herit; }

.mobile-menu.svelte-1wcjdtw.svelte-1wcjdtw { height: 100%; display: flex; p=
osition: absolute; bottom: 0px; right: 0px; }

.desktop.svelte-1wcjdtw.svelte-1wcjdtw { display: none; }

nav.svelte-1wcjdtw .small { display: block; }

button.svelte-1wcjdtw.svelte-1wcjdtw { justify-content: center; align-items=
: center; gap: 1.5rem; height: 100%; padding: 0px 1rem; line-height: 1; dis=
play: flex; }

.search.svelte-1wcjdtw.svelte-1wcjdtw { padding-left: 2rem; }

.appearance.svelte-1wcjdtw.svelte-1wcjdtw { align-items: center; margin-lef=
t: 0.75rem; display: flex; }

.appearance.svelte-1wcjdtw .caption.svelte-1wcjdtw { font-size: var(--sk-te=
xt-xs); margin-right: 0.5rem; line-height: 1; display: none; }

@media (max-width: 799px) {
  nav.svelte-1wcjdtw.svelte-1wcjdtw { top: unset; bottom: 0px; }
  .home-small.svelte-1wcjdtw.svelte-1wcjdtw { display: block; }
  .home-large.svelte-1wcjdtw.svelte-1wcjdtw { display: none; }
  .menu.svelte-1wcjdtw.svelte-1wcjdtw { background: var(--sk-back-1); paddi=
ng: 1rem var(--sk-page-padding-side); width: 100%; display: none; position:=
 relative; }
  .appearance.svelte-1wcjdtw.svelte-1wcjdtw { justify-content: space-betwee=
n; padding: 1.5rem 0px; display: flex; position: relative; }
  .appearance.svelte-1wcjdtw .caption.svelte-1wcjdtw { font-size: var(--sk-=
text-s); display: block; }
  nav.svelte-1wcjdtw .large { display: none; }
}

.desktop.svelte-1wcjdtw .center-area.svelte-1wcjdtw { flex: 1 1 0%; justify=
-content: center; align-items: center; display: flex; }

@media (min-width: 800px) {
  nav.svelte-1wcjdtw.svelte-1wcjdtw { grid-template-columns: auto 1fr 1fr; =
display: grid; }
  nav.svelte-1wcjdtw.svelte-1wcjdtw::after { background: linear-gradient(rg=
ba(0, 0, 0, 0.05), rgba(0, 0, 0, 0)); top: auto; bottom: -4px; }
  .menu.svelte-1wcjdtw.svelte-1wcjdtw { padding: 0 var(--sk-page-padding-si=
de)0 0; justify-content: end; align-items: center; width: auto; height: 100=
%; display: flex; }
  .mobile.svelte-1wcjdtw.svelte-1wcjdtw { display: none; }
  .desktop.svelte-1wcjdtw.svelte-1wcjdtw { display: contents; }
  nav.svelte-1wcjdtw .small { display: none; }
}

@media (min-width: 1240px) {
  nav.svelte-1wcjdtw.svelte-1wcjdtw { grid-template-columns: 1fr auto 1fr; =
display: grid; }
}

.small.svelte-egrlut { display: inline; }

.large.svelte-egrlut { display: none; }

@media (min-width: 800px) {
  .small.svelte-egrlut { display: none; }
  .large.svelte-egrlut { display: inline; }
}

.examples-container, .repl-outer, .tutorial-outer { height: calc(100vh - va=
r(--sk-nav-height)) !important; }

.toggle { bottom: 0px !important; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/ThemeToggle.vUNFaod-.css

@charset "utf-8";

:root { --sk-back-h: 206; --sk-selection-color: #42b4ff4d; --sk-nav-height:=
 6rem; --sk-page-padding-top: 6rem; --sk-page-padding-bottom: 6rem; --sk-pa=
ge-padding-side: 2.4rem; --sk-thick-border-width: .3rem; --sk-border-radius=
: .4rem; --sk-page-main-width: 80rem; --sk-banner-bottom-height: 0px; --sk-=
font: "Overpass",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,=
Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif; --sk=
-font-mono: "Fira Mono",monospace; --sk-text-xxl: 3.6rem; --sk-text-xl: 3re=
m; --sk-text-l: 2.4rem; --sk-text-m: 2rem; --sk-text-s: 1.6rem; --sk-text-x=
s: 1.3rem; --sk-line-max-width: 84rem; }

body { --sk-focus-outline: 0 0 0 2px hsla(var(--sk-theme-1-hsl),.6); --sk-t=
heme-1: hsl(var(--sk-theme-1-hsl)); --sk-theme-2: hsl(var(--sk-theme-2-hsl)=
); --sk-theme-3: hsl(var(--sk-theme-3-hsl)); --sk-back-3: hsla(var(--sk-bac=
k-3-hsl),1); --sk-back-2: hsla(var(--sk-back-2-hsl),1); --sk-code-bg: var(-=
-sk-back-3); --sk-text-warning: hsl(var(--sk-text-warning-hsl)); }

@media only screen and (prefers-color-scheme: dark) {
  :root { color-scheme: dark; --sk-back-3-hsl: 0,0%,14%; --sk-back-2-hsl: 0=
,0%,18%; --sk-back-1: #1a1a1a; --sk-back-4: #383838; --sk-back-5: #666; --s=
k-back-translucent: #ffffff1a; --sk-theme-1-hsl: 12,94%,62%; --sk-theme-2-h=
sl: 240,8%,44%; --sk-theme-3-hsl: 204,100%,63%; --sk-text-1: #e6e6e6; --sk-=
text-2: #ccc; --sk-text-3: #a6a6a6; --sk-text-4: #737373; --sk-text-translu=
cent: #ffffffe6; --sk-scrollbar: #ffffff4d; --sk-theme-1-variant: #c30; --s=
k-theme-2-variant: #525260; --sk-theme-3-variant: #09f; --sk-text-warning-h=
sl: 32,67%,56%; --sk-code-ts-bg: hsl(var(--sk-back-2-hsl)); --sk-code-base:=
 #c4c1bb; --sk-code-comment: #8c8c8c; --sk-code-keyword: #57b5f4; --sk-code=
-function: #eab095; --sk-code-string: #ccb88f; --sk-code-number: green; --s=
k-code-template-string: #d81e18; --sk-code-tags: var(--sk-code-function); -=
-sk-code-important: var(--sk-code-string); --sk-code-diff-base: #ffffff80; =
--sk-code-diff-inserted: #42b342; --sk-code-diff-removed: #e38582; }
  body.light { color-scheme: light; --sk-back-3-hsl: 206,64%,98%; --sk-back=
-2-hsl: 0,0%,100%; --sk-back-1: #fff; --sk-back-4: #f2f7fd; --sk-back-5: #c=
2cdd6; --sk-theme-1-hsl: 12,93%,43%; --sk-theme-2-hsl: 240,8%,44%; --sk-the=
me-3-hsl: 204,100%,63%; --sk-text-1: #212121; --sk-text-2: #454545; --sk-te=
xt-3: var(--sk-theme-2); --sk-text-4: #a6a6a6; --sk-scrollbar: #0000004d; -=
-sk-theme-1-variant: #ff4000; --sk-theme-2-variant: #676779; --sk-theme-3-v=
ariant: #42b4ff; --sk-code-ts-bg: var(--sk-back-1); --sk-code-base: #5f5c53=
; --sk-code-comment: #696969; --sk-code-keyword: #0b69a8; --sk-code-functio=
n: #bb5525; --sk-code-string: #856e3d; --sk-code-number: green; --sk-code-t=
emplate-string: #d81e18; --sk-code-tags: var(--sk-code-function); --sk-code=
-important: var(--sk-code-string); --sk-code-diff-base: #0009; --sk-code-di=
ff-inserted: green; --sk-code-diff-removed: #d81e18; --sk-text-warning-hsl:=
 32,95%,44%; --sk-back-translucent: #0000001a; --sk-text-translucent: #0000=
00b3; }
}

@media screen and (min-width: 480px) {
  :root { --sk-page-padding-side: 3.2rem; }
}

@media screen and (min-width: 768px) {
  :root { --sk-text-xxl: 5.4rem; --sk-text-xl: 3.6rem; --sk-page-padding-to=
p: 8rem; --sk-page-padding-side: 4.8rem; }
}

@media screen and (prefers-color-scheme: light) {
  :root { color-scheme: light; --sk-back-3-hsl: 206,64%,98%; --sk-back-2-hs=
l: 0,0%,100%; --sk-back-1: #fff; --sk-back-4: #f2f7fd; --sk-back-5: #c2cdd6=
; --sk-theme-1-hsl: 12,93%,43%; --sk-theme-2-hsl: 240,8%,44%; --sk-theme-3-=
hsl: 204,100%,63%; --sk-text-1: #212121; --sk-text-2: #454545; --sk-text-3:=
 var(--sk-theme-2); --sk-text-4: #a6a6a6; --sk-scrollbar: #0000004d; --sk-t=
heme-1-variant: #ff4000; --sk-theme-2-variant: #676779; --sk-theme-3-varian=
t: #42b4ff; --sk-code-ts-bg: var(--sk-back-1); --sk-code-base: #5f5c53; --s=
k-code-comment: #696969; --sk-code-keyword: #0b69a8; --sk-code-function: #b=
b5525; --sk-code-string: #856e3d; --sk-code-number: green; --sk-code-templa=
te-string: #d81e18; --sk-code-tags: var(--sk-code-function); --sk-code-impo=
rtant: var(--sk-code-string); --sk-code-diff-base: #0006; --sk-code-diff-in=
serted: green; --sk-code-diff-removed: #d81e18; --sk-text-warning-hsl: 32,9=
5%,44%; --sk-back-translucent: #0000001a; --sk-text-translucent: #000000b3;=
 }
  body.dark { color-scheme: dark; --sk-back-2-hsl: 0,0%,18%; --sk-back-1: #=
1a1a1a; --sk-back-4: #383838; --sk-back-5: #666; --sk-back-translucent: #ff=
ffff1a; --sk-theme-1-hsl: 12,94%,62%; --sk-theme-2-hsl: 240,8%,44%; --sk-th=
eme-3-hsl: 204,100%,63%; --sk-text-1: #e6e6e6; --sk-text-2: #ccc; --sk-text=
-3: #a6a6a6; --sk-text-4: #737373; --sk-text-translucent: #ffffffe6; --sk-s=
crollbar: #ffffff4d; --sk-back-3-hsl: 0,0%,14%; --sk-theme-1-variant: #c30;=
 --sk-theme-2-variant: #525260; --sk-theme-3-variant: #09f; --sk-text-warni=
ng-hsl: 32,67%,56%; --sk-code-ts-bg: var(--sk-back-2); --sk-code-base: #c4c=
1bb; --sk-code-comment: #8c8c8c; --sk-code-keyword: #57b5f4; --sk-code-func=
tion: #eab095; --sk-code-string: #ccb88f; --sk-code-number: green; --sk-cod=
e-template-string: #d81e18; --sk-code-tags: var(--sk-code-function); --sk-c=
ode-important: var(--sk-code-string); --sk-code-diff-base: #ffffff80; --sk-=
code-diff-inserted: #42b342; --sk-code-diff-removed: #e38582; }
}

@font-face { font-family: Overpass; font-style: normal; font-weight: 300; s=
rc: local("Overpass Light"), local("Overpass-Light"), url("./overpass-latin=
-300.ldBGjluk.woff2") format("woff2"); font-display: swap; }

@font-face { font-family: Overpass; font-style: normal; font-weight: 600; s=
rc: local("Overpass Bold"), local("Overpass-Bold"), url("./overpass-latin-6=
00.K39Izyhw.woff2") format("woff2"); font-display: swap; }

@font-face { font-family: "Fira Mono"; font-style: normal; font-weight: 400=
; src: local("Fira Mono Regular"), local("Fira Mono-Regular"), url("./fira-=
mono-latin-400.U_SXdLRM.woff2") format("woff2"); font-display: swap; }

.text :where(h2) { border-bottom: 1px solid var(--sk-back-4); margin-top: 7=
rem; }

.text :where(h3) { margin-top: 5rem; }

.text :where(p, ol, ul) { margin: 1em 0px; }

.text :where(section) { max-width: var(--sk-line-max-width); padding: 0px 0=
px 0px 1rem; }

.text :where(section) :where(h2, h3, h4) { margin-left: -1rem; }

.text :where(code) { white-space: pre-wrap; background: var(--sk-back-4); m=
argin: 0px 0.2rem; padding: 0.2rem 0.4rem; top: -0.1rem; }

.text :where(.code-block) { position: relative; }

.text :where(pre) { box-sizing: border-box; background-color: var(--sk-code=
-bg); color: var(--sk-code-base); border-radius: var(--sk-border-radius); f=
ont-size: var(--sk-text-s); width: 100%; margin: 1em 0px; padding: 1rem; po=
sition: relative; overflow-x: auto; box-shadow: rgba(29, 86, 128, 0.06) 1px=
 1px 6px inset; }

.text :where(pre code) { background: 0px 0px; width: 100%; margin: 0px; pad=
ding: 0px; display: block; top: 0px; }

.text :where(p code) { max-width: 100%; padding-top: 0px; padding-bottom: 0=
px; display: inline-flex; overflow-x: auto; }

.text :where(.code-block .filename) { content: attr(data-file); font-family=
: var(--sk-font-mono); color: var(--sk-text-2); background: var(--sk-back-4=
); border-radius: var(--sk-border-radius)var(--sk-border-radius)0 0; box-si=
zing: border-box; width: 100%; padding: 1rem 1rem 0.8rem; font-size: 1.2rem=
; font-weight: 400; display: block; }

.text :where(.code-block pre) { border-radius: 0 0 var(--sk-border-radius)v=
ar(--sk-border-radius); margin-top: 0px; }

.text :where(a:not(.permalink)) { --color: var(--primary-hsl,var(--sk-theme=
-1-hsl)); color: hsl(var(--color)); box-shadow: inset 0 -1px hsl(var(--colo=
r)); transition: box-shadow 0.1s ease-in-out 0s; }

.text :where(a:not(.permalink)):hover { box-shadow: inset 0 -2px hsl(var(--=
color)); text-decoration: none; }

.text :where(a:not(.permalink) code) { color: unset !important; font: unset=
 !important; font-palette: unset !important; font-synthesis: unset !importa=
nt; forced-color-adjust: unset !important; position: unset !important; text=
-orientation: unset !important; text-rendering: unset !important; -webkit-f=
ont-smoothing: unset !important; -webkit-locale: unset !important; -webkit-=
text-orientation: unset !important; -webkit-writing-mode: unset !important;=
 writing-mode: unset !important; zoom: unset !important; accent-color: unse=
t !important; place-content: unset !important; place-items: unset !importan=
t; place-self: unset !important; alignment-baseline: unset !important; anim=
ation-composition: unset !important; animation: unset !important; app-regio=
n: unset !important; appearance: unset !important; aspect-ratio: unset !imp=
ortant; backdrop-filter: unset !important; backface-visibility: unset !impo=
rtant; background-attachment: unset !important; background-blend-mode: unse=
t !important; background-clip: unset !important; background-color: rgba(0, =
0, 0, 0) !important; background-image: unset !important; background-origin:=
 unset !important; background-position: unset !important; background-repeat=
: unset !important; background-size: unset !important; baseline-shift: unse=
t !important; baseline-source: unset !important; block-size: unset !importa=
nt; border-block: unset !important; border: unset !important; border-radius=
: unset !important; border-collapse: unset !important; border-end-end-radiu=
s: unset !important; border-end-start-radius: unset !important; border-inli=
ne: unset !important; border-start-end-radius: unset !important; border-sta=
rt-start-radius: unset !important; inset: unset !important; box-shadow: uns=
et !important; box-sizing: unset !important; break-after: unset !important;=
 break-before: unset !important; break-inside: unset !important; buffered-r=
endering: unset !important; caption-side: unset !important; caret-color: un=
set !important; clear: unset !important; clip: unset !important; clip-path:=
 unset !important; clip-rule: unset !important; color-interpolation: unset =
!important; color-interpolation-filters: unset !important; color-rendering:=
 unset !important; color-scheme: unset !important; columns: unset !importan=
t; column-fill: unset !important; gap: unset !important; column-rule: unset=
 !important; column-span: unset !important; contain: unset !important; cont=
ain-intrinsic-block-size: unset !important; contain-intrinsic-size: unset !=
important; contain-intrinsic-inline-size: unset !important; container: unse=
t !important; content: unset !important; content-visibility: unset !importa=
nt; counter-increment: unset !important; counter-reset: unset !important; c=
ounter-set: unset !important; cursor: unset !important; cx: unset !importan=
t; cy: unset !important; d: unset !important; display: unset !important; do=
minant-baseline: unset !important; empty-cells: unset !important; fill: uns=
et !important; fill-opacity: unset !important; fill-rule: unset !important;=
 filter: unset !important; flex: unset !important; flex-flow: unset !import=
ant; float: unset !important; flood-color: unset !important; flood-opacity:=
 unset !important; grid: unset !important; grid-area: unset !important; hei=
ght: unset !important; hyphenate-character: unset !important; hyphenate-lim=
it-chars: unset !important; hyphens: unset !important; image-orientation: u=
nset !important; image-rendering: unset !important; initial-letter: unset !=
important; inline-size: unset !important; inset-block: unset !important; in=
set-inline: unset !important; isolation: unset !important; letter-spacing: =
unset !important; lighting-color: unset !important; line-break: unset !impo=
rtant; list-style: unset !important; margin-block: unset !important; margin=
: unset !important; margin-inline: unset !important; marker: unset !importa=
nt; mask: unset !important; mask-type: unset !important; math-depth: unset =
!important; math-shift: unset !important; math-style: unset !important; max=
-block-size: unset !important; max-height: unset !important; max-inline-siz=
e: unset !important; max-width: unset !important; min-block-size: unset !im=
portant; min-height: unset !important; min-inline-size: unset !important; m=
in-width: unset !important; mix-blend-mode: unset !important; object-fit: u=
nset !important; object-position: unset !important; object-view-box: unset =
!important; offset: unset !important; opacity: unset !important; order: uns=
et !important; orphans: unset !important; outline: unset !important; outlin=
e-offset: unset !important; overflow-anchor: unset !important; overflow-cli=
p-margin: unset !important; overflow-wrap: unset !important; overflow: unse=
t !important; overlay: unset !important; overscroll-behavior-block: unset !=
important; overscroll-behavior-inline: unset !important; overscroll-behavio=
r: unset !important; padding-block: unset !important; padding: unset !impor=
tant; padding-inline: unset !important; page: unset !important; page-orient=
ation: unset !important; paint-order: unset !important; perspective: unset =
!important; perspective-origin: unset !important; pointer-events: unset !im=
portant; quotes: unset !important; r: unset !important; resize: unset !impo=
rtant; rotate: unset !important; ruby-position: unset !important; rx: unset=
 !important; ry: unset !important; scale: unset !important; scroll-behavior=
: unset !important; scroll-margin-block: unset !important; scroll-margin: u=
nset !important; scroll-margin-inline: unset !important; scroll-padding-blo=
ck: unset !important; scroll-padding: unset !important; scroll-padding-inli=
ne: unset !important; scroll-snap-align: unset !important; scroll-snap-stop=
: unset !important; scroll-snap-type: unset !important; scroll-timeline: un=
set !important; scrollbar-color: unset !important; scrollbar-gutter: unset =
!important; scrollbar-width: unset !important; shape-image-threshold: unset=
 !important; shape-margin: unset !important; shape-outside: unset !importan=
t; shape-rendering: unset !important; size: unset !important; speak: unset =
!important; stop-color: unset !important; stop-opacity: unset !important; s=
troke: unset !important; stroke-dasharray: unset !important; stroke-dashoff=
set: unset !important; stroke-linecap: unset !important; stroke-linejoin: u=
nset !important; stroke-miterlimit: unset !important; stroke-opacity: unset=
 !important; stroke-width: unset !important; tab-size: unset !important; ta=
ble-layout: unset !important; text-align: unset !important; text-align-last=
: unset !important; text-anchor: unset !important; text-combine-upright: un=
set !important; text-decoration: unset !important; text-decoration-skip-ink=
: unset !important; text-emphasis: unset !important; text-emphasis-position=
: unset !important; text-indent: unset !important; text-overflow: unset !im=
portant; text-shadow: unset !important; text-size-adjust: unset !important;=
 text-transform: unset !important; text-underline-offset: unset !important;=
 text-underline-position: unset !important; white-space: unset !important; =
timeline-scope: unset !important; touch-action: unset !important; transform=
: unset !important; transform-box: unset !important; transform-origin: unse=
t !important; transform-style: unset !important; transition: unset !importa=
nt; translate: unset !important; user-select: unset !important; vector-effe=
ct: unset !important; vertical-align: unset !important; view-timeline: unse=
t !important; view-transition-name: unset !important; visibility: unset !im=
portant; border-spacing: unset !important; -webkit-box-align: unset !import=
ant; -webkit-box-decoration-break: unset !important; -webkit-box-direction:=
 unset !important; -webkit-box-flex: unset !important; -webkit-box-ordinal-=
group: unset !important; -webkit-box-orient: unset !important; -webkit-box-=
pack: unset !important; -webkit-box-reflect: unset !important; -webkit-line=
-break: unset !important; -webkit-line-clamp: unset !important; -webkit-mas=
k-box-image: unset !important; -webkit-print-color-adjust: unset !important=
; -webkit-rtl-ordering: unset !important; -webkit-ruby-position: unset !imp=
ortant; -webkit-tap-highlight-color: unset !important; -webkit-text-combine=
: unset !important; -webkit-text-decorations-in-effect: unset !important; -=
webkit-text-fill-color: unset !important; -webkit-text-security: unset !imp=
ortant; -webkit-text-stroke: unset !important; -webkit-user-drag: unset !im=
portant; widows: unset !important; width: unset !important; will-change: un=
set !important; word-break: unset !important; word-spacing: unset !importan=
t; x: unset !important; y: unset !important; z-index: unset !important; }

.text :where(pre a):hover { border-bottom: 1px solid var(--sk-theme-1); tex=
t-decoration: none; }

.text :where(pre.border) { border-left: 5px solid var(--sk-theme-2); }

.text :where(pre.language-diff code) { color: var(--sk-code-diff-base); }

.language-diff :where(.inserted, .deleted) { position: relative; }

.language-diff :where(.inserted) { color: var(--sk-code-diff-inserted); }

.language-diff :where(.deleted) { color: var(--sk-code-diff-removed); user-=
select: none; }

.language-diff :where(.inserted, .deleted)::before { position: absolute; le=
ft: -1ch; }

.language-diff :where(.inserted)::before { content: "+"; }

.language-diff :where(.deleted)::before { content: "-"; }

:where(.token.comment.wrapped) { white-space: pre-wrap; padding-left: calc(=
var(--indent) + 2ch); text-indent: calc(-1*var(--indent) - 2ch); min-height=
: 1.35em; display: block; }

.api-section { background: var(--sk-back-4); max-width: var(--sk-line-max-w=
idth); border-radius: var(--sk-border-radius); margin-bottom: 1rem; padding=
: 1rem; }

.ts-block { max-width: var(--sk-line-max-width); background: var(--sk-code-=
ts-bg); border-radius: var(--sk-border-radius); filter: drop-shadow(rgba(0,=
 0, 0, 0.08) 2px 2px 8px); margin: 1em 0px; overflow: hidden; }

.ts-block > pre { --shiki-color-background: var(--sk-code-ts-bg); box-shado=
w: none; background: var(--sk-code-ts-bg); border-radius: 0px; margin: 0px;=
 }

.ts-block .ts-block-property p, .ts-block-property pre { margin: 1rem 0px; =
}

.ts-block-property > pre { box-shadow: none; border-top: 1px solid var(--sk=
-back-4); border-radius: 0px; margin: 0px; padding-left: 1rem; }

.ts-block-property-details { padding: 0px 1rem 0px 2rem; }

.ts-block-property-details blockquote { margin: 1rem 0px; }

.ts-block-property-children { margin: 0px -1rem 0px 1rem; }

.ts-block-property-bullets .tag { text-transform: uppercase; color: rgb(102=
, 102, 102); font-size: 1.4rem; }

.ts-block-property ul:last-child { margin-bottom: 0px; }

.text :where([id]) { scroll-margin-top: calc(var(--sk-nav-height) + 4rem); =
}

.text :where(a.permalink) { opacity: 0; background: url("data:image/svg+xml=
,%3c?xml%20version=3D'1.0'%20encoding=3D'utf-8'?%3e%3csvg%20xmlns=3D'http:/=
/www.w3.org/2000/svg'%20style=3D'width:24px;height:24px'%20viewBox=3D'0%200=
%2024%2024'%3e%3cstyle%3e%20path%20{%20stroke:%20%23333;%20fill:%20none;%20=
}%20@media%20(prefers-color-scheme:%20dark)%20{%20path%20{%20stroke:%20%23c=
cc;%20}%20}%20%3c/style%3e%3cpath%20d=3D'M9,7L6,7A2%202%200%200%200%206,17L=
9,17'/%3e%3cpath%20d=3D'M15,7L18,7A2%202%200%200%201%2018,17L15,17'/%3e%3cp=
ath%20d=3D'M7,12L17,12'/%3e%3c/svg%3e") 0px center / 1em 1em no-repeat; wid=
th: 1.4em; height: 1em; transition: opacity 0.2s ease 0s; display: block; b=
ottom: 0.25em; left: -1.3em; position: absolute !important; }

@media (min-width: 768px) {
  .text :where(a.permalink:focus) { opacity: 1; }
  .text :where(h2, h3, h4, h5, h6):hover a.permalink { opacity: 1; }
}

@media (max-width: 768px) {
  .text :where(a.permalink) { opacity: 1; left: -1em; transform: scale(0.6)=
; }
  .text :where(blockquote *) { word-break: break-word; }
}

.text :where(ol, ul) { --list-padding: 3rem; margin-left: var(--list-paddin=
g); }

.text :where(ul) { list-style: none; }

.text :where(ol) { list-style: decimal; }

.text :where(li) { max-width: calc(var(--sk-line-max-width) - var(--list-pa=
dding)); margin: 0px 0px 0.5em; line-height: 1.5; position: relative; }

.text :where(ul li)::before { content: ""; background-color: var(--sk-back-=
5); opacity: 0.7; border-radius: 2px; width: 0.6rem; height: 0.6rem; margin=
-top: 0.8rem; margin-left: -1.8rem; position: absolute; }

.text :where(table) { margin: 1em 0px; }

.text :where(small) { font-size: var(--sk-text-s); float: right; pointer-ev=
ents: all; color: var(--sk-theme-1); cursor: pointer; }

.text :where(blockquote) { --primary-hsl: var(--sk-theme-1-hsl); background=
-color: hsla(var(--primary-hsl),.02); color: var(--sk-text-1); border: 1px =
solid hsl(var(--primary-hsl)); border-radius: var(--sk-border-radius); box-=
shadow: 0 2px 6px hsla(var(--primary-hsl),.2); padding: 1rem; }

.text :where(blockquote)::before { content: "note"; text-transform: upperca=
se; color: hsl(var(--primary-hsl)); margin-bottom: 0.5rem; font-size: 1.2re=
m; font-weight: 600; display: block; }

.text :where(blockquote):first-child { margin-top: 0px; }

.text :where(blockquote):last-child { margin-bottom: 0px; }

.text :where(blockquote.deprecated) { --primary-hsl: var(--sk-text-warning-=
hsl); --color: var(--primary-hsl); }

.text :where(blockquote.deprecated)::before { content: "Deprecated"; }

.text :where(blockquote.deprecated a) { --color: var(--primary-hsl); }

.text :where(section a code) { color: inherit; }

.text :where(ul ul) { margin-bottom: 0px; }

html { text-size-adjust: 100%; box-sizing: border-box; border-collapse: col=
lapse; font-size: 62.5%; }

html, body { width: 100%; height: 100%; }

:root { --quint-out: cubic-bezier(.23,1,.32,1); }

body { font-size: 1.6rem; font-family: var(--sk-font); color: var(--sk-text=
-2); background-color: var(--sk-back-1); tab-size: 2; width: 100%; line-hei=
ght: 1.618; }

* { box-sizing: inherit; scrollbar-width: thin; scrollbar-color: var(--sk-s=
crollbar)transparent; -webkit-tap-highlight-color: hsla(var(--sk-theme-1-hs=
l),.1); transition-duration: ; transition-timing-function: ; transition-del=
ay: ; transition-behavior: ; margin: 0px; padding: 0px; transition-property=
: background, background-color, background-image, border; }

:focus-visible { outline: 2px solid hsla(var(--sk-theme-1-hsl),.6); transit=
ion: all 0.1s ease 0s; }

p, ul, ol { margin: 1em 0px; }

a { cursor: pointer; color: inherit; text-decoration: none; position: relat=
ive; }

a:hover { text-decoration: underline; }

h6 { font-size: var(--sk-text-xs); }

h5, h4 { font-size: var(--sk-text-s); }

h3 { font-size: var(--sk-text-m); }

h2 { font-size: var(--sk-text-l); }

h1 { font-size: var(--sk-text-xxl); }

:where(h1, h2, h3, h4, h5, h6) { color: var(--sk-text-1); font-weight: 400;=
 line-height: 1.35; position: relative; }

strong { font-weight: 600; }

code, kbd { font-size: var(--sk-text-xs); font-family: var(--sk-font-mono);=
 line-height: 1.7; }

code { white-space: nowrap; color: var(--sk-text-2); -webkit-font-smoothing=
: initial; background: var(--sk-back-4); border-radius: 0.3em; margin: 0px =
0.2rem; padding: 0.4rem; position: relative; top: -0.1rem; }

pre { overflow-x: auto; }

pre code { white-space: inherit; background: 0px 0px; margin: 0px; padding:=
 0px; top: 0px; }

::selection { background: var(--sk-selection-color); }

blockquote { max-width: var(--sk-line-max-width); margin: 1.6rem 0px 2.4rem=
; padding: 2rem 2.4rem 1.8rem; position: relative; }

blockquote :where(p, ul) { font-size: var(--sk-text-s); }

blockquote :last-child { margin: 0px; }

button { font-family: inherit; font-size: inherit; color: currentcolor; cur=
sor: pointer; background-color: rgba(0, 0, 0, 0); border: none; }

button[disabled] { opacity: 0.55; pointer-events: none; }

button > svg { position: relative; top: -0.1rem; stroke: currentcolor !impo=
rtant; width: 2rem !important; height: 2rem !important; }

a { color: var(--sk-theme-1); padding: 0px 0px 1px; position: relative; }

table { font-size: var(--sk-text-s); width: 100%; }

td, th { text-align: left; border-bottom: 1px solid rgb(238, 238, 238); pad=
ding: 0.4rem 0.8rem 0.4rem 0px; }

table :where(code, span) { white-space: pre; }

figcaption, .post aside { font: 1.2rem/1.6 var(--sk-font-mono); max-width: =
none; margin: 0px auto; padding: 1.6rem 0px 0px 0.8rem; }

.visually-hidden { clip: rect(0px, 0px, 0px, 0px); white-space: nowrap; bor=
der: 0px; width: 1px; height: auto; margin: 0px; padding: 0px; position: ab=
solute; overflow: hidden; }

body, body.light, body.dark { --shiki-color-text: var(--sk-code-base); --sh=
iki-color-background: hsl(var(--sk-back-3-hsl)); --shiki-token-constant: va=
r(--sk-code-base); --shiki-token-string: var(--sk-code-string); --shiki-tok=
en-comment: var(--sk-code-comment); --shiki-token-keyword: var(--sk-code-ke=
yword); --shiki-token-parameter: var(--sk-code-base); --shiki-token-functio=
n: var(--sk-code-function); --shiki-token-string-expression: var(--sk-code-=
string); --shiki-token-punctuation: var(--sk-code-base); --shiki-token-link=
: var(--sk-code-keyword); }

.token { color: var(--sk-code-base); }

.token.tag, .token.attr-value .attr-equals { color: var(--sk-code-function)=
; }

.token.string, .token.interpolation-punctuation, .token.attr-value, .token.=
inserted { color: var(--sk-code-string); }

.token.builtin, .token.function { color: var(--sk-code-function); }

.token.keyword, .token.boolean { color: var(--sk-code-keyword); }

.token.comment { color: var(--sk-code-comment); }

.token.deleted { color: rgb(252, 155, 155); }

.token.template-string .interpolation-punctuation, .token.template-string .=
string { color: var(--sk-code-template-string); }

.language-id { display: none; }

pre.twoslash :where(.error, .error-behind) { display: none; }

pre.twoslash data-lsp { border-bottom: 1px dotted rgba(0, 0, 0, 0); transit=
ion: border-color 0.3s ease 0s; }

pre.twoslash:hover data-lsp { border-color: var(--sk-back-5); }

.banner-bottom.svelte-mf92j0.svelte-mf92j0 { z-index: 80; text-align: cente=
r; background: var(--sk-theme-1-variant); color: rgb(255, 255, 255); justif=
y-content: center; align-items: center; width: 100%; height: max-content; p=
adding: 8px; display: flex; position: fixed; bottom: 0px; left: 0px; right:=
 0px; overflow-y: auto; }

.banner-bottom.svelte-mf92j0 a { color: rgb(252, 252, 252); }

button.svelte-mf92j0.svelte-mf92j0 { align-items: center; height: 100%; dis=
play: flex; position: absolute; top: 0px; right: 1rem; }

.main-area.svelte-mf92j0.svelte-mf92j0 { align-items: center; gap: 0.6rem; =
display: flex; }

.main-area.svelte-mf92j0 svg { transition: transform .2s var(--quint-out); =
}

.main-area.svelte-mf92j0:hover svg { transform: translate(40%); }

div.svelte-mf92j0 a[href] { padding: 0px; text-decoration: none; }

a.svelte-mf92j0 .lg.svelte-mf92j0 { display: initial; }

a.svelte-mf92j0 .sm.svelte-mf92j0 { display: none; }

@media screen and (max-width: 800px) {
  .banner-bottom.svelte-mf92j0.svelte-mf92j0 { bottom: initial; top: 0px; }
  .main-area.svelte-mf92j0 svg, a.svelte-mf92j0 .lg.svelte-mf92j0 { display=
: none; }
  a.svelte-mf92j0 .sm.svelte-mf92j0 { display: initial; }
}

section.svelte-r6pgeo { background: var(--background,white); padding: 6rem =
0px; }

section.svelte-r6pgeo::after { content: ""; clear: both; display: table; }

.inner.svelte-r6pgeo { padding: 0 var(--sk-page-padding-side); max-width: 1=
20rem; margin: 0px auto; }

@media (min-width: 900px) {
  section.svelte-r6pgeo { padding: 10rem 0px; }
}

.progress-container.svelte-156y8je { z-index: 999; width: 100%; height: 4px=
; position: absolute; top: 0px; left: 0px; }

.progress.svelte-156y8je { background-color: var(--sk-theme-1); height: 100=
%; transition: width 0.4s ease 0s; position: absolute; top: 0px; left: 0px;=
 }

.fade.svelte-156y8je { pointer-events: none; z-index: 998; background-color=
: rgba(255, 255, 255, 0.3); width: 100%; height: 100%; animation: 0.4s ease=
 0s 1 normal none running svelte-156y8je-fade; position: fixed; }

@keyframes svelte-156y8je-fade {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

a.svelte-1rscj97 { background: var(--sk-back-1); color: var(--sk-text-2); b=
order: 2px solid var(--sk-text-1); z-index: 1000; padding: 8px; position: a=
bsolute; top: 0px; transform: translateY(-999px); }

a.svelte-1rscj97:not(:-webkit-any(:lang(ae), :lang(ar), :lang(arc), :lang(b=
cc), :lang(bqi), :lang(ckb), :lang(dv), :lang(fa), :lang(glk), :lang(he), :=
lang(ku), :lang(mzn), :lang(nqo), :lang(pnb), :lang(ps), :lang(sd), :lang(u=
g), :lang(ur), :lang(yi))) { left: 0px; }

a.svelte-1rscj97:not(:is(:lang(ae), :lang(ar), :lang(arc), :lang(bcc), :lan=
g(bqi), :lang(ckb), :lang(dv), :lang(fa), :lang(glk), :lang(he), :lang(ku),=
 :lang(mzn), :lang(nqo), :lang(pnb), :lang(ps), :lang(sd), :lang(ug), :lang=
(ur), :lang(yi))) { left: 0px; }

a.svelte-1rscj97:-webkit-any(:lang(ae), :lang(ar), :lang(arc), :lang(bcc), =
:lang(bqi), :lang(ckb), :lang(dv), :lang(fa), :lang(glk), :lang(he), :lang(=
ku), :lang(mzn), :lang(nqo), :lang(pnb), :lang(ps), :lang(sd), :lang(ug), :=
lang(ur), :lang(yi)) { right: 0px; }

a.svelte-1rscj97:is(:lang(ae), :lang(ar), :lang(arc), :lang(bcc), :lang(bqi=
), :lang(ckb), :lang(dv), :lang(fa), :lang(glk), :lang(he), :lang(ku), :lan=
g(mzn), :lang(nqo), :lang(pnb), :lang(ps), :lang(sd), :lang(ug), :lang(ur),=
 :lang(yi)) { right: 0px; }

a.svelte-1rscj97:focus { transform: translateY(0px); }

.modal-overlay.svelte-1sui5a8 { z-index: 99; opacity: 0; pointer-events: no=
ne; width: 100%; background: var(--sk-back-1); height: 100dvh; transition: =
opacity 0.4s cubic-bezier(0.23, 1, 0.32, 1) 0s; position: fixed; top: 0px; =
left: 0px; }

.modal-overlay.visible.svelte-1sui5a8 { opacity: 0.7; pointer-events: auto;=
 }

main.svelte-1sui5a8 { padding-top: var(--sk-nav-height); padding-bottom: va=
r(--sk-banner-bottom-height); height: 100%; margin: 0px auto; position: rel=
ative; overflow: hidden auto; }

@media (max-width: 800px) {
  main.svelte-1sui5a8 { padding-top: var(--sk-banner-bottom-height); paddin=
g-bottom: 0px; }
}

body { font-size: 1.6rem !important; }

button.svelte-1b9q9nc { border: 1px solid var(--sk-text-4); background-colo=
r: var(--sk-back-2); border-radius: 11px; flex-shrink: 0; width: 40px; heig=
ht: 22px; transition: border-color 0.25s ease 0s; display: block; position:=
 relative; }

button.svelte-1b9q9nc:hover { color: var(--sk-text-1); border-color: var(--=
sk-text-1); }

.check.svelte-1b9q9nc { background-color: var(--sk-back-4); pointer-events:=
 none; border-radius: 50%; width: 18px; height: 18px; transition: transform=
 0.25s ease 0s; position: absolute; top: 1px; left: 1px; box-shadow: rgba(0=
, 0, 0, 0.04) 0px 1px 2px, rgba(0, 0, 0, 0.06) 0px 1px 2px; }

.check.checked.svelte-1b9q9nc { transform: translate(18px); }

.icon.svelte-1b9q9nc { border-radius: 50%; width: 18px; height: 18px; displ=
ay: block; position: relative; overflow: hidden; }

.icon.svelte-1b9q9nc svg { width: 12px; height: 12px; position: absolute; t=
op: 3px; left: 3px; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/theme.6RVyi6nR.css

@charset "utf-8";

.icon.svelte-5yec89 { vertical-align: middle; object-fit: contain; transfor=
m-origin: 50% center; stroke: currentcolor; stroke-width: 2px; stroke-linec=
ap: round; stroke-linejoin: round; fill: none; position: relative; overflow=
: hidden; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/root-scroll.3-7Nlnhx.css

@charset "utf-8";

.code-block #copy-to-clipboard-button { top: 5px; }

button.svelte-4cj3ib { opacity: 0.5; grid-template-rows: 1fr; grid-template=
-columns: 1fr; place-items: center; width: 2.4rem; height: 2.4rem; transiti=
on: opacity 0.1s ease-in-out 0s; display: grid; position: absolute; top: 1r=
em; right: 1rem; overflow: hidden; }

button.svelte-4cj3ib:hover { opacity: 0.7; }

span.svelte-4cj3ib { grid-area: 1 / 1 / span 1 / span 1; }

button.svelte-4cj3ib svg { stroke-width: 0 !important; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/flexsearch.bundle.module.kDjERGTi.css

@charset "utf-8";

@keyframes svelte-15l0yne-fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.search-container.svelte-15l0yne.svelte-15l0yne { align-items: center; widt=
h: 100%; display: flex; position: relative; }

input.svelte-15l0yne.svelte-15l0yne { border: 1px solid var(--sk-back-trans=
lucent); appearance: none; background: no-repeat 1rem 50%/1em 1em url("data=
:image/svg+xml,%3csvg%20viewBox=3D'0%200%2024%2024'%20xmlns=3D'http://www.w=
3.org/2000/svg'%3e%3cpath%20fill=3D'%23ccc'%20d=3D'M9.5,3A6.5,6.5%200%200,1=
%2016,9.5C16,11.11%2015.41,12.59%2014.44,13.73L14.71,14H15.5L20.5,19L19,20.=
5L14,15.5V14.71L13.73,14.44C12.59,15.41%2011.11,16%209.5,16A6.5,6.5%200%200=
,1%203,9.5A6.5,6.5%200%200,1%209.5,3M9.5,5C7,5%205,7%205,9.5C5,12%207,14%20=
9.5,14C12,14%2014,12%2014,9.5C14,7%2012,5%209.5,5Z'%20/%3e%3c/svg%3e"),var(=
--sk-back-3); color: var(--sk-text-3); border-radius: 3.5rem; width: 100%; =
height: 4.2rem; padding: 0.5em 0.5em 0.4em 2em; font-family: inherit; font-=
size: 1.4rem; position: relative; }

input.svelte-15l0yne:focus + .shortcut.svelte-15l0yne { display: none; }

input.svelte-15l0yne.svelte-15l0yne::placeholder { text-transform: uppercas=
e; color: var(--sk-text-3); font-size: 1.2rem; transform: translateY(-1px);=
 }

.shortcut.svelte-15l0yne.svelte-15l0yne { color: var(--sk-text-3); text-ali=
gn: right; pointer-events: none; text-transform: uppercase; width: 100%; fo=
nt-size: 1.2rem; animation: 0.2s ease 0s 1 normal none running svelte-15l0y=
ne-fade-in; position: absolute; top: calc(50% - 0.9rem); right: 0px; }

kbd.svelte-15l0yne.svelte-15l0yne { background: var(--sk-back-2); border: 1=
px solid var(--sk-back-translucent); color: var(--sk-text-3); font-size: in=
herit; border-radius: 2px; padding: 0.2rem 0.2rem 0px; font-family: inherit=
; display: none; }

@media (min-width: 800px) {
  .search-container.svelte-15l0yne.svelte-15l0yne { width: 11rem; }
  .shortcut.svelte-15l0yne.svelte-15l0yne { padding: 0px 1.6rem 0px 0px; }
  input.svelte-15l0yne.svelte-15l0yne { border-radius: 5.6rem; height: 3.4r=
em; }
  input.svelte-15l0yne.svelte-15l0yne::placeholder { opacity: 0; }
  kbd.svelte-15l0yne.svelte-15l0yne { display: inline; }
}

@media (min-width: 960px) {
  .search-container.svelte-15l0yne.svelte-15l0yne { width: 19rem; }
  input.svelte-15l0yne.svelte-15l0yne::placeholder { opacity: 1; }
}

ul.svelte-13pjn3x.svelte-13pjn3x { margin: 0px; position: relative; }

ul.svelte-13pjn3x ul { border-left: 1px solid var(--sk-back-5); padding-lef=
t: 0px; margin-left: 0.8em !important; }

li.svelte-13pjn3x.svelte-13pjn3x { margin-bottom: 1em; list-style: none; }

li.svelte-13pjn3x.svelte-13pjn3x:last-child { margin-bottom: 0px; }

ul.svelte-13pjn3x ul li.svelte-13pjn3x { margin: 0px; }

a.svelte-13pjn3x.svelte-13pjn3x { padding: 1rem; line-height: 1; text-decor=
ation: none; display: block; }

a.svelte-13pjn3x.svelte-13pjn3x:hover { background: rgba(0, 0, 0, 0.05); }

a.svelte-13pjn3x.svelte-13pjn3x:focus { background: var(--sk-theme-2); colo=
r: rgb(255, 255, 255); outline: none; }

a.svelte-13pjn3x strong.svelte-13pjn3x, a.svelte-13pjn3x span.svelte-13pjn3=
x { white-space: nowrap; text-overflow: ellipsis; line-height: 1; display: =
block; overflow: hidden; }

a.svelte-13pjn3x strong.svelte-13pjn3x { color: var(--sk-text-2); font-size=
: 1.6rem; }

a.svelte-13pjn3x span.svelte-13pjn3x { color: rgb(115, 115, 115); margin: 0=
.4rem 0px 0px; font-size: 1.2rem; }

a.svelte-13pjn3x mark { --highlight-color: #ff03; }

a.svelte-13pjn3x span.svelte-13pjn3x mark { color: var(--sk-text-1); backgr=
ound: var(--highlight-color); outline: 2px solid var(--highlight-color); bo=
rder-top: 2px solid var(--highlight-color); }

a.svelte-13pjn3x:focus span.svelte-13pjn3x { color: rgba(255, 255, 255, 0.6=
); }

a.svelte-13pjn3x:focus strong.svelte-13pjn3x { color: rgb(255, 255, 255); }

a.svelte-13pjn3x:focus span.svelte-13pjn3x mark, a.svelte-13pjn3x:focus str=
ong.svelte-13pjn3x mark { --highlight-color: #808093; mix-blend-mode: light=
en; color: rgb(255, 255, 255); }

a.svelte-13pjn3x strong.svelte-13pjn3x mark { color: var(--sk-text-1); back=
ground: var(--highlight-color); outline: 2px solid var(--highlight-color); =
border-radius: 1px; }

.info.svelte-16pklco { text-transform: uppercase; background-color: var(--s=
k-back-2); border-radius: 0 0 var(--sk-border-radius)var(--sk-border-radius=
); pointer-events: all; margin: 0px; padding: 1rem; font-size: 1.2rem; font=
-weight: 400; }

.pseudo-overlay.svelte-y8ty26.svelte-y8ty26 { z-index: 100; width: 100vw; h=
eight: 100vh; position: fixed; top: 0px; left: 0px; }

input.svelte-y8ty26.svelte-y8ty26 { border-top: none; border-right: none; b=
order-left: none; border-image: initial; border-bottom: 1px solid var(--sk-=
back-3); background: var(--sk-back-2); color: var(--sk-text-1); flex-shrink=
: 0; width: 100%; height: 5rem; padding: 1rem 6rem 0.5rem 1rem; font-family=
: inherit; font-size: 1.6rem; font-weight: 600; }

input.svelte-y8ty26.svelte-y8ty26::selection { background-color: var(--sk-b=
ack-translucent); }

input.svelte-y8ty26.svelte-y8ty26::placeholder { color: var(--sk-text-3); o=
pacity: 0.3; }

input.svelte-y8ty26.svelte-y8ty26:focus-visible { background: var(--sk-them=
e-2); color: rgb(255, 255, 255); outline: none; }

input.svelte-y8ty26.svelte-y8ty26:focus-visible::placeholder { color: rgba(=
255, 255, 255, 0.5); }

button[aria-label=3D"Close"].svelte-y8ty26.svelte-y8ty26 { --size: 2rem; co=
lor: var(--sk-text-2); background: 0px 0px; width: 5rem; height: 5rem; posi=
tion: absolute; top: 0px; right: 0px; }

button[aria-label=3D"Close"].svelte-y8ty26.svelte-y8ty26:focus-visible { ba=
ckground: var(--sk-theme-2); color: var(--sk-back-1); outline: none; }

input.svelte-y8ty26:focus-visible + button[aria-label=3D"Close"].svelte-y8t=
y26 { color: var(--sk-back-1); }

ul.svelte-y8ty26.svelte-y8ty26 { margin: 0px; }

.modal.svelte-y8ty26.svelte-y8ty26 { z-index: 9999; pointer-events: none; j=
ustify-content: center; align-items: center; width: 100%; height: 100%; dis=
play: flex; position: fixed; top: 0px; left: 0px; }

.search-box.svelte-y8ty26.svelte-y8ty26 { filter: drop-shadow(rgba(0, 0, 0,=
 0.2) 2px 4px 16px); border-radius: var(--sk-border-radius); flex-direction=
: column; width: calc(-2rem + 100vw); max-width: 50rem; height: calc(100% -=
 2rem); max-height: 50rem; display: flex; position: relative; overflow: hid=
den; }

.search-box.svelte-y8ty26 > .svelte-y8ty26 { pointer-events: all; }

.results.svelte-y8ty26.svelte-y8ty26 { overscroll-behavior-y: none; overflo=
w: auto; }

.results-container.svelte-y8ty26.svelte-y8ty26 { background: var(--sk-back-=
2); border-radius: 0 0 var(--sk-border-radius)var(--sk-border-radius); poin=
ter-events: all; }

.info.svelte-y8ty26.svelte-y8ty26 { text-transform: uppercase; background-c=
olor: var(--sk-back-2); pointer-events: all; padding: 1rem; font-size: 1.2r=
em; font-weight: 400; }

.info.empty.svelte-y8ty26.svelte-y8ty26 { border-radius: 0 0 var(--sk-borde=
r-radius)var(--sk-border-radius); }

a.svelte-y8ty26.svelte-y8ty26 { padding: 1rem; line-height: 1; text-decorat=
ion: none; display: block; }

a.svelte-y8ty26.svelte-y8ty26:hover { background: rgba(0, 0, 0, 0.05); }

a.svelte-y8ty26.svelte-y8ty26:focus { background: var(--sk-theme-2); color:=
 var(--sk-back-1); outline: none; }

a.svelte-y8ty26 small.svelte-y8ty26, a.svelte-y8ty26 strong.svelte-y8ty26 {=
 white-space: nowrap; text-overflow: ellipsis; line-height: 1; display: blo=
ck; overflow: hidden; }

a.svelte-y8ty26 small.svelte-y8ty26 { text-transform: uppercase; color: var=
(--sk-text-3); font-size: 1rem; font-weight: 600; }

a.svelte-y8ty26 strong.svelte-y8ty26 { color: var(--sk-text-2); margin: 0.4=
rem 0px; font-size: 1.6rem; }

a.svelte-y8ty26:focus small.svelte-y8ty26 { color: rgb(255, 255, 255); opac=
ity: 0.6; }

a.svelte-y8ty26:focus strong.svelte-y8ty26 { color: rgb(255, 255, 255); }

a.svelte-y8ty26 strong.svelte-y8ty26 mark { background: var(--sk-theme-2); =
color: var(--sk-text-3); border-radius: 1px; text-decoration: none; }

li.svelte-y8ty26.svelte-y8ty26 { position: relative; }

button[aria-label=3D"Delete"].svelte-y8ty26.svelte-y8ty26 { color: var(--sk=
-text-2); opacity: 0.1; width: 5rem; height: 100%; position: absolute; top:=
 0px; right: 0px; }

a.svelte-y8ty26:focus + [aria-label=3D"Delete"].svelte-y8ty26 { color: var(=
--sk-back-1); }

button[aria-label=3D"Delete"].svelte-y8ty26.svelte-y8ty26:hover { opacity: =
1; outline: none; }

button[aria-label=3D"Delete"].svelte-y8ty26.svelte-y8ty26:focus-visible { b=
ackground: var(--sk-theme-2); color: var(--sk-text-1); opacity: 1; outline:=
 none; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/2._rkDlgd7.css

@charset "utf-8";

.container.svelte-p2d7pa { --sidebar-menu-width: 28rem; --sidebar-width: va=
r(--sidebar-menu-width); --ts-toggle-height: 4.2rem; }

.page.svelte-p2d7pa { --on-this-page-display: none; padding: var(--sk-page-=
padding-top)var(--sk-page-padding-side); }

.category.svelte-p2d7pa { font: 700 var(--sk-text-s)var(--sk-font); text-tr=
ansform: uppercase; letter-spacing: 0.12em; color: var(--sk-text-3); margin=
: 0px 0px 0.5em; }

.toc-container.svelte-p2d7pa { background: var(--sk-back-3); display: none;=
 }

@media (min-width: 832px) {
  .toc-container.svelte-p2d7pa { width: var(--sidebar-width); height: calc(=
100vh - var(--sk-nav-height) - var(--ts-toggle-height) - var(--sk-banner-bo=
ttom-height)); left: 0px; top: var(--sk-nav-height); display: block; positi=
on: fixed; overflow: hidden; }
  .toc-container.svelte-p2d7pa::before { content: ""; top: 0px; left: calc(=
var(--sidebar-width) - 1px); border-right: 1px solid var(--sk-back-5); widt=
h: 0px; height: 100%; position: fixed; }
  .page.svelte-p2d7pa { padding-left: calc(var(--sidebar-width) + var(--sk-=
page-padding-side)); }
}

@media (min-width: 1200px) {
  .container.svelte-p2d7pa { --sidebar-width: max(28rem,23vw); }
  .page.svelte-p2d7pa { --on-this-page-display: block; padding: var(--sk-pa=
ge-padding-top)calc(var(--sidebar-width) + var(--sk-page-padding-side)); ma=
x-width: var(--sk-line-max-width); box-sizing: content-box; margin: 0px aut=
o; }
}
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/Tooltip.pgXQ42ag.css

@charset "utf-8";

button.svelte-19k14fe { --size: 1em; --bg: var(--sk-theme-2); --fg: white; =
--bg-active: var(--bg); --fg-active: var(--fg); height: var(--size); max-wi=
dth: calc(2*var(--size)); appearance: none; outline-offset: 2px; border: rg=
ba(0, 0, 0, 0); border-radius: 0.5em; width: calc(100% - 0.6em); position: =
relative; }

button.svelte-19k14fe::before { content: ""; border-radius: var(--size); ba=
ckground: var(--bg); box-sizing: border-box; width: 100%; height: 100%; pad=
ding: 2px; display: block; position: absolute; top: 0px; left: 0px; }

button[aria-pressed=3D"true"].svelte-19k14fe::before { background: var(--bg=
-active); }

button.svelte-19k14fe::after { content: ""; width: calc(var(--size) - 4px);=
 height: calc(var(--size) - 4px); aspect-ratio: 1 / 1; background: var(--fg=
); border-radius: 50%; transition: background 0.2s ease-out 0s, left 0.2s e=
ase-out 0s; display: block; position: absolute; top: 2px; left: 2px; box-sh=
adow: rgba(0, 0, 0, 0.4) 0px 0px 1px, rgba(0, 0, 0, 0.1) 0px 4px 2px; }

button[aria-pressed=3D"true"].svelte-19k14fe::after { background: var(--fg-=
active); left: calc(100% - var(--size) + 2px); }

.input-output-toggle.svelte-1gwn6w1 { user-select: none; height: var(--ts-t=
oggle-height); z-index: 2; padding: 0 var(--sk-page-padding-side); justify-=
content: center; align-items: center; gap: 0.5em; margin: 0px auto; display=
: flex; position: relative; }

@media (min-width: 832px) {
  .input-output-toggle.svelte-1gwn6w1 { width: var(--sidebar-menu-width); m=
argin: 0px 0px 0px auto; padding: 0px; transform: translate(-1rem); }
}

nav.svelte-1os1f05.svelte-1os1f05 { color: var(--sk-text-3); position: rela=
tive; top: 0px; left: 0px; }

.sidebar.svelte-1os1f05.svelte-1os1f05 { font-family: var(--sk-font); width=
: 100%; height: 100%; margin: 0px; padding: 3.2rem; bottom: auto; }

li.svelte-1os1f05.svelte-1os1f05 { margin: 0px 0px 4rem; line-height: 1.2; =
display: block; }

li.svelte-1os1f05.svelte-1os1f05:last-child { margin-bottom: 0px; }

a.svelte-1os1f05.svelte-1os1f05 { color: var(--sk-text-3); user-select: non=
e; border-bottom: none; padding: 0px; transition: color 0.2s ease 0s; posit=
ion: relative; }

.section.svelte-1os1f05.svelte-1os1f05 { font-size: var(--sk-text-s); text-=
transform: uppercase; letter-spacing: 0.1em; padding-bottom: 0.8rem; font-w=
eight: 600; display: block; }

.page.svelte-1os1f05.svelte-1os1f05 { font-size: 1.6rem; font-family: var(-=
-sk-font); padding-bottom: 0.6em; display: block; }

.active.svelte-1os1f05.svelte-1os1f05 { color: var(--sk-text-1); font-weigh=
t: 700; }

ul.svelte-1os1f05 ul.svelte-1os1f05, ul.svelte-1os1f05 ul li.svelte-1os1f05=
 { margin: 0px; }

.ts-toggle.svelte-1os1f05.svelte-1os1f05 { width: var(--sidebar-width); bot=
tom: var(--sk-banner-bottom-height); z-index: 1; border-top: 1px solid var(=
--sk-back-4); border-right: 1px solid var(--sk-back-5); background-color: v=
ar(--sk-back-3); margin-right: 0px; position: fixed; left: 0px; }

@media (max-width: 831px) {
  .sidebar.svelte-1os1f05.svelte-1os1f05 { padding: 1rem; }
  li.svelte-1os1f05.svelte-1os1f05 { margin-bottom: 2.5rem; }
  a.svelte-1os1f05.svelte-1os1f05 { border-radius: var(--sk-border-radius);=
 line-height: 1; transition: background-color 0.1s ease 0s, color 0.1s ease=
 0s; padding: 0.9rem 0.75rem !important; }
  a.svelte-1os1f05.svelte-1os1f05:hover { background-color: var(--sk-back-4=
); text-decoration: none; }
  .active.svelte-1os1f05.svelte-1os1f05 { font-weight: 400; background-colo=
r: hsla(var(--sk-theme-1-hsl),.1) !important; color: var(--sk-theme-1) !imp=
ortant; }
  .ts-toggle.svelte-1os1f05.svelte-1os1f05 { display: none; }
}

@media (min-width: 832px) {
  .sidebar.svelte-1os1f05.svelte-1os1f05 { columns: 1; padding-left: 3.2rem=
; padding-right: 0px; padding-top: var(--sk-page-padding-top); width: var(-=
-sidebar-menu-width); margin: 0px 0px 0px auto; }
  nav.svelte-1os1f05.svelte-1os1f05 { max-height: calc(100vh - var(--ts-tog=
gle-height) - var(--sk-nav-height)); overflow: hidden auto; }
  .active.svelte-1os1f05.svelte-1os1f05::after { --size: 1rem; content: "";=
 width: var(--size); height: var(--size); top: -0.1rem; right: calc(-.5*var=
(--size)); background-color: var(--sk-back-1); border-left: 1px solid var(-=
-sk-back-5); border-bottom: 1px solid var(--sk-back-5); z-index: 2; positio=
n: absolute; transform: translateY(0.2rem) rotate(45deg); }
}

.on-this-page.svelte-1wvrrw.svelte-1wvrrw { display: var(--on-this-page-dis=
play); padding: var(--sk-page-padding-top)var(--sk-page-padding-side)0 0; w=
idth: min(280px,calc(var(--sidebar-width) - var(--sk-page-padding-side))); =
height: calc(100vh - var(--sk-nav-height) - var(--sk-page-padding-top)); to=
p: var(--sk-nav-height); left: calc(100vw - (var(--sidebar-width))); scroll=
bar-width: none; font-family: var(--sk-font); position: fixed; overflow-y: =
auto; }

.on-this-page.svelte-1wvrrw.svelte-1wvrrw::-webkit-scrollbar { display: non=
e; }

.heading.svelte-1wvrrw.svelte-1wvrrw { display: none; }

h2.svelte-1wvrrw.svelte-1wvrrw { border: none; margin: 0px; padding: 0px 0.=
85rem; }

.h2.svelte-1wvrrw.svelte-1wvrrw { text-transform: uppercase; color: var(--s=
k-text-3); text-align: start; margin: 0px; padding: 0px; font-size: 1.4rem;=
 font-weight: 400; }

.desktop-only-heading.svelte-1wvrrw.svelte-1wvrrw { display: inline; }

.heading.svelte-1wvrrw svg { transform: translateY(-1px); }

.expand-icon.svelte-1wvrrw.svelte-1wvrrw { padding: 0.5rem; }

.expand-icon.svelte-1wvrrw svg { transition: transform .4s var(--quint-out)=
; transform-origin: 50% center; }

.expand-icon.inverted.svelte-1wvrrw svg { transform: rotate(180deg); }

ul.svelte-1wvrrw.svelte-1wvrrw { margin-left: 0px; list-style: none; }

li.svelte-1wvrrw.svelte-1wvrrw { margin: 0.2rem; }

li.svelte-1wvrrw.svelte-1wvrrw::before { content: none; }

a.svelte-1wvrrw.svelte-1wvrrw { color: var(--sk-text-3); font-size: var(--s=
k-text-s); box-shadow: none; transition-duration: ; transition-timing-funct=
ion: ; transition-delay: ; transition-behavior: ; border-left: 2px solid rg=
ba(0, 0, 0, 0); padding: 0.3rem 0.5rem; transition-property: background, bo=
rder-left; display: block; }

a.svelte-1wvrrw.svelte-1wvrrw:hover { box-shadow: none; background: var(--s=
k-back-3); }

a[aria-current=3D"page"].svelte-1wvrrw.svelte-1wvrrw { background: var(--sk=
-back-3); border-left-color: var(--sk-theme-1); }

.on-this-page.mobile.svelte-1wvrrw.svelte-1wvrrw { --shadow: 0px 0px 14px #=
0000001a; z-index: 99; overflow-y: initial; width: 100%; height: auto; marg=
in: 5rem 0px; padding: 0px; display: block; position: relative; top: 0px; l=
eft: 0px; }

.on-this-page.mobile.dark.svelte-1wvrrw.svelte-1wvrrw { --shadow: 0 0 0 1px=
 var(--sk-back-4); }

.on-this-page.mobile.svelte-1wvrrw .desktop-only-heading.svelte-1wvrrw { di=
splay: none; }

.on-this-page.mobile.svelte-1wvrrw .heading.svelte-1wvrrw { z-index: 2; box=
-shadow: var(--shadow); border-radius: var(--sk-border-radius); box-sizing:=
 border-box; background-color: var(--sk-back-3); grid-template-columns: 1fr=
 auto; align-items: center; gap: 0.75rem; width: 100%; padding: 0.75rem; di=
splay: grid; position: relative; }

.on-this-page.mobile.svelte-1wvrrw .heading[aria-expanded=3D"true"].svelte-=
1wvrrw { border-radius: var(--sk-border-radius)var(--sk-border-radius)0 0; =
}

.on-this-page.mobile.svelte-1wvrrw h2.svelte-1wvrrw { padding: unset; }

.on-this-page.mobile.svelte-1wvrrw .h2.svelte-1wvrrw { font-size: var(--sk-=
text-s); border: none; padding: 0.8rem 0.5rem; line-height: 1; }

.on-this-page.mobile.svelte-1wvrrw .heading.svelte-1wvrrw svg { display: bl=
ock; }

.on-this-page.mobile.svelte-1wvrrw nav.svelte-1wvrrw { background-color: va=
r(--sk-back-3); border-radius: 0 0 var(--sk-border-radius)var(--sk-border-r=
adius); box-shadow: var(--shadow); width: 100%; max-height: 50vh; position:=
 absolute; top: 45px; left: 0px; overflow-y: auto; }

.on-this-page.mobile.svelte-1wvrrw ul.svelte-1wvrrw { gap: 0.5rem; display:=
 grid; margin: 0px !important; }

.on-this-page.mobile.svelte-1wvrrw li.svelte-1wvrrw { margin: 0px; }

.on-this-page.mobile.svelte-1wvrrw li.svelte-1wvrrw:first-child { display: =
none; }

.on-this-page.mobile.svelte-1wvrrw li.svelte-1wvrrw:nth-child(2) { margin-t=
op: 0.75rem; }

.on-this-page.mobile.svelte-1wvrrw li.svelte-1wvrrw:last-child { margin-bot=
tom: 0.75rem; }

.on-this-page.mobile.svelte-1wvrrw a.svelte-1wvrrw { box-sizing: border-box=
; color: var(--sk-text-2); padding: 0.4rem 1.25rem; }

.on-this-page.mobile.svelte-1wvrrw a[aria-current=3D"page"].svelte-1wvrrw {=
 background-color: rgba(0, 0, 0, 0); border-left: 0px; }

.on-this-page.mobile.svelte-1wvrrw a.svelte-1wvrrw:hover { background-color=
: initial; text-decoration: none; }

.tooltip-container.svelte-cee90x { --bg: var(--sk-theme-2); --arrow-size: .=
4rem; transform: translate(var(--offset),calc(2rem + var(--arrow-size))); p=
osition: absolute; }

.tooltip.svelte-cee90x { background-color: var(--bg); color: rgb(255, 255, =
255); text-align: left; border-radius: var(--sk-border-radius); font-family=
: var(--sk-font-mono); white-space: pre-wrap; z-index: 100; filter: drop-sh=
adow(rgba(103, 103, 120, 0.4) 2px 4px 6px); margin: 0px 2rem 0px 0px; paddi=
ng: 0.4rem 0.6rem; font-size: 1.2rem; }

.tooltip.svelte-cee90x::after { content: ""; left: calc(-1*var(--offset) - =
var(--arrow-size)); top: calc(-2*var(--arrow-size)); border-top-color: ; bo=
rder-top-style: ; border-top-width: ; border-right-color: ; border-right-st=
yle: ; border-right-width: ; border-bottom-style: ; border-bottom-width: ; =
border-left-color: ; border-left-style: ; border-left-width: ; border-image=
-source: ; border-image-slice: ; border-image-width: ; border-image-outset:=
 ; border-image-repeat: ; border-bottom-color: var(--bg); position: absolut=
e; }

.tooltip.svelte-cee90x a { color: rgb(255, 255, 255); text-decoration: unde=
rline; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/5.MhVYpst-.css

@charset "utf-8";

.content.svelte-zelrq3.svelte-zelrq3 { width: 100%; margin: 0px; }

.edit.svelte-zelrq3.svelte-zelrq3 { z-index: 2; font-size: 1.4rem; line-hei=
ght: 1; position: relative; }

.edit.svelte-zelrq3 .icon { width: 1.4rem; height: 1.4rem; margin-right: 0.=
5rem; position: relative; top: -0.1rem; left: 0.3rem; }

.controls.svelte-zelrq3.svelte-zelrq3 { max-width: calc(var(--sk-line-max-w=
idth) + 1rem); border-top: 1px solid var(--sk-back-4); grid-template-column=
s: 1fr 1fr; margin: 6rem 0px 0px; padding: 1rem 0px 0px; display: grid; }

.controls.svelte-zelrq3 > .svelte-zelrq3:first-child { text-align: left; }

.controls.svelte-zelrq3 > .svelte-zelrq3:last-child { text-align: right; }

.controls.svelte-zelrq3 span.svelte-zelrq3 { text-transform: uppercase; col=
or: var(--sk-text-3); font-size: 1.2rem; font-weight: 600; display: block; =
}

.controls.svelte-zelrq3 span.faded.svelte-zelrq3 { opacity: 0.4; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://kit.svelte.dev/_app/immutable/assets/1.bpchmm27.css

@charset "utf-8";

.container.svelte-etykxn { padding: var(--sk-page-padding-top)var(--sk-page=
-padding-side)6rem var(--sk-page-padding-side); }

h1.svelte-etykxn, p.svelte-etykxn { margin: 0px auto; }

h1.svelte-etykxn { margin: 0px 0px 0.5em; font-size: 2.8em; font-weight: 30=
0; }

p.svelte-etykxn { margin: 1em auto; }

.error.svelte-etykxn { color: rgb(255, 255, 255); font: 600 16px/1.7 var(--=
sk-font); background-color: rgb(218, 16, 110); border-radius: 2px; padding:=
 12px 16px; }
------MultipartBoundary--D8IIq9qLca2BTDo8H9lTvtLP0yQThQxkMrHOScHZQ8------
